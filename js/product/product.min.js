/*
 * JavaScript Templates 2.1.0
 * https://github.com/blueimp/JavaScript-Templates
 *
 * Copyright 2011, Sebastian Tschan
 * https://blueimp.net
 *
 * Licensed under the MIT license:
 * http://www.opensource.org/licenses/MIT
 *
 * Inspired by John Resig's JavaScript Micro-Templating:
 * http://ejohn.org/blog/javascript-micro-templating/
 */

/*jslint evil: true, regexp: true */
/*global document, define */

(function ($) {
    "use strict";
    var tmpl = function (str, data, nocache) {
        var f = !/[^\w\-\.:]/.test(str) ?
            ( !nocache ?
                    (tmpl.cache[str] = tmpl.cache[str] || tmpl(tmpl.load(str))) :
                        tmpl.cache[str] = tmpl(tmpl.load(str))
            ) :
            new Function(
                tmpl.arg + ',tmpl',
                "var _e=tmpl.encode" + tmpl.helper + ",_s='" +
                    str.replace(tmpl.regexp, tmpl.func) +
                    "';return _s;"
            );
        return data ? f(data, tmpl) : function (data) {
            return f(data, tmpl);
        };
    };
    tmpl.cache = {};
    tmpl.load = function (id) {
        var e = document.getElementById(id),
            pattern = /<\\\/(\w+)/g,
            replace = '<'+'/$1';
        if(!e && console) {
            throw { message: 'template with id='+id+' not found' };
        }
        return e?(e.tagName.toLowerCase() == 'textarea' ? e.value: document.getElementById(id).innerHTML).replace(pattern, replace):null;
    };
    tmpl.regexp = /([\s'\\])(?![^%]*%\})|(?:\{%(=|#)([\s\S]+?)%\})|(\{%)|(%\})/g;
    tmpl.func = function (s, p1, p2, p3, p4, p5) {
        if (p1) { // whitespace, quote and backspace in interpolation context
            return {
                "\n": "\\n",
                "\r": "\\r",
                "\t": "\\t",
                " " : " "
            }[s] || "\\" + s;
        }
        if (p2) { // interpolation: {%=prop%}, or unescaped: {%#prop%}
            if (p2 === "=") {
                return "'+_e(" + p3 + ")+'";
            }
            return "'+(" + p3 + "||'')+'";
        }
        if (p4) { // evaluation start tag: {%
            return "';";
        }
        if (p5) { // evaluation end tag: %}
            return "_s+='";
        }
    };
    tmpl.encReg = /[<>&"'\x00]/g;
    tmpl.encMap = {
        "<"   : "&lt;",
        ">"   : "&gt;",
        "&"   : "&amp;",
        "\""  : "&quot;",
        "'"   : "&#39;"
    };
    tmpl.encode = function (s) {
        return String(s || "").replace(
            tmpl.encReg,
            function (c) {
                return tmpl.encMap[c] || "";
            }
        );
    };
    tmpl.arg = "o";
    tmpl.helper = ",print=function(s,e){_s+=e&&(s||'')||_e(s);}" +
        ",include=function(s,d){_s+=tmpl(s,d);}";
    if (typeof define === "function" && define.amd) {
        define(function () {
            return tmpl;
        });
    } else {
        $.tmpl = tmpl;
    }
}(this));;
(function($) {

    $.fn.lazyLoad = function(options, ext) {

        if (options == 'stop') {
            var settings = this.data('lazyLoadSettings');
            if (settings) {
                settings.stopped = true;
            }
            return;
        }
        
        if (options == 'reload') {
            var settings = this.data('lazyLoadSettings');
            if (settings) {
                settings.stopped = false;
                settings.loading = false;
                this.get(0).onscroll = null;
                this.lazyLoad(settings);
            }
            return;
        }

        if (options == 'sleep') {
            var settings = this.data('lazyLoadSettings');
            if (settings) {
                settings.loading = true;
            }
            return;
        }

        if (options == 'wake') {
            var settings = this.data('lazyLoadSettings');
            if (settings) {
                settings.loading = false;
            }
            return;
        }

        if (options == 'force') {
            var settings = this.data('lazyLoadSettings');
            if (settings) {
                if (!settings.loading) {
                    settings.load();
                }
            }
            return;
        }

        if (options === 'get') {
            var settings = this.data('lazyLoadSettings') || {};
            return settings[ext];
        }

        this.data('lazyLoadSettings', $.extend({
            distance: 50,
            load: function() {},
            container: container,
            state: 'wake',
            hash: location.hash.replace(/^[^#]*#\/*/, '').split('/')[0] || null,
            distanceBetweenBottoms: null
        }, options || {}));

        var settings = this.data('lazyLoadSettings');
        settings.loading = false;
        settings.stopped = false;

        var win = $(window);
        var container = settings.container || $(this);

        init();

        function init()
        {
            if (settings.hash !== null) {
                if (!$.isArray(settings.hash)) {
                    settings.hash = [settings.hash];
                }
            }
            $.fn.lazyLoad.call(win, settings.state);
            initHandler();
        }

        function scrollHandler()
        {
            if (settings.stopped) {
                this.onscroll = null;
                return;
            }
            if (!settings.stopped && !settings.loading && distanceBetweenBottoms(container, win) <= settings.distance) {
                if (settings.hash !== null) {
                    var loc_hash = location.hash.replace(/^[^#]*#\/*/, '').split('/')[0];
                    if (settings.hash.indexOf(loc_hash) === -1) {
                        this.onscroll = null;
                        return;
                    }
                }
                settings.load();
            }
        }

        function initHandler()
        {
            var interval = 350, h;
            var timerId = setTimeout(h = function() {
                if (settings.stopped) {
                    clearTimeout(timerId);
                    return;
                }
                if (settings.hash !== null) {
                    var loc_hash = location.hash.replace(/^[^#]*#\/*/, '').split('/')[0];
                    if (settings.hash.indexOf(loc_hash) === -1) {
                        clearTimeout(timerId);
                        return;
                    }
                }
                if (!settings.loading) {
                    var r = distanceBetweenBottoms(container, win);
                    if (distanceBetweenBottoms(container, win) <= settings.distance) {
                        settings.load();
                        timerId = setTimeout(h, interval);
                    } else {
                        win.get(0).onscroll = scrollHandler;
                        clearTimeout(timerId);
                    }
                } else {
                    timerId = setTimeout(h, interval);
                }
            }, interval);
        }

        var distanceBetweenBottoms = typeof settings.distanceBetweenBottoms === 'function' ?
            settings.distanceBetweenBottoms :
            function (container, win, offset) {
                container = typeof container === 'string' ? $(container) : container;
                offset = offset || 0;
                return (container.position().top + container.outerHeight() - offset) - (win.scrollTop() + win.height());
            };
    };
})(jQuery);
;
//live draggable and live droppable


$.fn.liveDraggable = function (opts) {
    this.each(function(i,el) {
        var self = $(this);
        if (self.data('init_draggable')) {
            self.die("mouseover", self.data('init_draggable'));
        }
    });
    var h;
    this.die("mouseover").live("mouseover", h = function() {
        var self = $(this);
        if (!self.data("init_draggable")) {
            self.data("init_draggable", h).draggable(opts);
        }
    });
};
$.fn.liveDroppable = function (opts) {
    this.each(function(i,el) {
        var self = $(this);
        if (self.data('init_droppable')) {
            self.die("mouseover", self.data('init_droppable'));
        }
    });
    var init = function() {
        var self = $(this);
        if (!self.data("init_droppable")) {
            self.data("init_droppable", init).droppable(opts);
            self.mouseover();
        }
    };
    init.call(this);
    this.die("mouseover", init).live("mouseover", init);
};;
(function($) {
    $.fn.inlineEditable = function(options, ext)
    {
        if (!this.length) {
            return;
        }
        var binded = false;

        if (typeof options == 'string') {
            if (options == 'setOption') {
                var settings = this.data('inlineEditableSettings') || {};
                $.extend(true, settings, ext);
                if (typeof ext.hold !== 'undefined' && typeof ext.hold !== 'function') {
                    settings.hold = _scalarToFunc(settings.hold);
                }
                this.data('inlineEditableSettings', settings);
            }
            return this;        // means that widget is installed already
        }

        var prev_settings = this.data('inlineEditableSettings');   // prev-old settings
        this.data('inlineEditableSettings', $.extend({
            inputType: 'text',
            inputClass: '',
            size: {
                height: null,
                width: null
            },
            minSize: {
                height: null,
                width: null
            },
            maxSize: {
                height: null,
                width: null
            },
            editLink: null,
            editOnItself: true,
            placeholder: null,
            makeReadableBy: ['blur', 'enter', 'esc'],        // available 'blur', 'enter', 'esc', function
            updateBy: ['ctrl+enter','alt+enter'],
            beforeBackReadable: function() {},
            afterBackReadable: function() {},
            beforeMakeEditable: function() {},
            afterMakeEditable: function() {},
            placeholderClass: 'hint',
            truncate: false,
            hold: false,
            html: false,
            allowEmpty: false
        }, prev_settings, options || {}));

        var settings = this.data('inlineEditableSettings')||{},
            self = this,
            mode = 'read',                            // read|edit
            text = '';                                // previous text

        if (typeof settings.hold !== 'function') {
            settings.hold = _scalarToFunc(settings.hold);
        }
        init.call(this);

        function init() {
            if (this.data('inited')) {    // has initialized already. Don't initialize again
                return;
            }
            if (settings.truncate && typeof settings.truncate == 'boolean') {
                settings.truncate = 255; // default value of truncate
            }
            if (settings.truncate) {
                var text = !settings.placeholder || settings.placeholder !== this.text() ? this.text() : '';
                this.data('real_text', text);       // here real text. Non truncated text
                this.text(text.length < settings.truncate - 3 ? text : text.substr(0, settings.truncate - 3) + '...');
            }
            if (settings.placeholder) {
                setPlaceholder.call(this);
            }
            if (settings.editLink) {
                $(settings.editLink).unbind('click.inlineEditable').bind('click.inlineEditable', function() {
                    if (settings.hold.call(self)) {
                        return;
                    }
                    if (mode != 'edit') {
                        makeEditable.call(self.get(0));
                    }
                });
            }
            if (settings.editOnItself) {
                this.unbind('click.inlineEditable').bind('click.inlineEditable', function() {
                    if (settings.hold.call(self)) {
                        return;
                    }
                    if (mode != 'edit') {
                        makeEditable.call(this);
                    }
                });
            }
            this.unbind('editable.inlineEditable').bind('editable.inlineEditable', function() {
                if (settings.hold.call(self)) {
                    return;
                }
                if (mode != 'edit') {
                    makeEditable.call(this);
                }
            });
            this.unbind('placeholder.inlineEditable').bind('placeholder.inlineEditable', function(e, s) {
                if (s && settings.placeholder) {
                    setPlaceholder.call(this);
                }
                if (!s) {
                    $(this).removeClass(settings.placeholderClass);
                }
            });
            this.data('inited', true);
        }

        function setPlaceholder()
        {
            var text = getText($(this));
            if (!text) {
                $(this).addClass(settings.placeholderClass).text(settings.placeholder);
            }
        }

        function unsetPlaceholder()
        {
            var text = getText($(this));
            if (text == settings.placeholder) {
                $(this).text('').removeClass(settings.placeholderClass);
            }
        }

        function backPlaceholder(input)
        {
            if (!$(input).val()) {
                $(this).text(settings.placeholder).addClass(settings.placeholderClass);
                return true;
            }
            return false;
        }

        function makeEditable()
        {
            mode = 'edit';
            this.id = this.id || ('' + Math.random()).slice(2);

            var input_id = this.id + '-input',
                input = $('#' + input_id);

            if (!input.length) {
                self.after(inputHtml(input_id));
                input = $('#' + input_id);
            }
            input.addClass(settings.inputClass);
            setSize(input, self);
            if (settings.placeholder) {
                if (getText($(this)) == settings.placeholder) {
                    unsetPlaceholder.call(self);
                }
            }

            // fire before-callback
            settings.beforeMakeEditable.call(this, input);

            text = settings.truncate ? self.data('real_text') : getText(self);      // save text - for restoring if need
            input.val(text).show().focus();
            self.hide();
            $(settings.editLink).hide();

            if (!binded) {        // bind event handler only once
                var key_codes = [];
                var save_key_codes = [];
                for (var i = 0, n = settings.makeReadableBy.length; i < n; ++i) {
                    var item = settings.makeReadableBy[i];
                    if (item == 'blur') {
                        input.blur(function() {
                            if (mode != 'read') {
                                makeReadable.call(this);
                            }
                        });
                    }
                    if (item == 'enter') {
                        key_codes.push(13);
                    }
                    if (item == 'esc') {
                        key_codes.push(27);
                    }
                }
                for (var i = 0, n = settings.updateBy.length; i < n; ++i) {
                    var item = settings.updateBy[i];
                    if (item == 'alt+enter') {
                        save_key_codes.push({'ctrl':false,'alt':true,'shift':false,'key':13});
                    }
                    if (item == 'ctrl+enter') {
                        save_key_codes.push({'ctrl':true,'alt':false,'shift':false,'key':13});
                    }
                    if (item == 'ctrl+s') {
                        save_key_codes.push({'ctrl':true,'alt':false,'shift':false,'key':17});
                    }
                }
                if (key_codes.length) {
                    (function(key_codes) {
                        input.keydown(function(e) {
                            if (~key_codes.indexOf(e.keyCode) && !e.ctrlKey && !e.altKey && !e.shiftKey) {
                                if (mode != 'read') {
                                    makeReadable.call(this, e.keyCode == 27 ? text : null);
                                }
                            }
                            if(save_key_codes.length) {
                                for(var i in save_key_codes) {
                                    var k = save_key_codes[i];
                                    if ((e.keyCode == k.key) && (e.ctrlKey == k.ctrl) && (e.altKey == k.alt) && (e.shiftKey == k.shift) ){
                                        self.trigger('readable');
                                        break;
                                    }
                                }
                            }
                        });
                    })(key_codes);
                }
                self.unbind('readable.inlineEditable').bind('readable.inlineEditable', function(e, disable_handlers) {
                    if (mode != 'read') {
                        var input_id = this.id + '-input';
                        var input = $('#' + input_id);
                        makeReadable.call(input, input.val(), disable_handlers);
                    }
                });
                binded = true;
            }

            settings.afterMakeEditable.call(this, input);

        }

        function makeReadable(new_text, disable_handlers)
        {
            disable_handlers = typeof disable_handlers === 'undefined' ? false : true;
            if (new_text != undefined && new_text != null) {
                $(this).val(new_text);
            } else {
                new_text = $(this).val();
            }
            if (disable_handlers === false) {
                if (settings.beforeBackReadable.call(self.get(0), this, {
                    changed: new_text != text,
                    old_text: text,
                    new_text: new_text
                }) === false)
                {
                    return;
                }
            }
            mode = 'read';
            // this - input
            if (!settings.placeholder || !backPlaceholder.call(self, this)) {
                if (settings.allowEmpty || new_text) {
                    if (settings.truncate) {
                        self.data('real_text', new_text);       // here real text. Non truncated text
                        self.text(new_text.length < settings.truncate - 3 ? new_text : new_text.substr(0, settings.truncate - 3) + '...' );
                    } else {
                        setText(self, new_text);
                    }
                    if (!new_text) {
                        setPlaceholder.call(this);
                    }
                }
            }
            self.show();
            $(this).hide();
            $(settings.editLink).show();
            // fire after-callback
            if (disable_handlers === false) {
                settings.afterBackReadable.call(self.get(0), this, {
                   changed: new_text != text,
                   old_text: text
                });
            }
        }

        function inputHtml(id)
        {
            switch (settings.inputType) {
                case 'textarea':
                    return '<textarea id="' + id + '" style="display:none;"></textarea>';
                case 'input':
                default:
                    return '<input type="text" id="' + id + '" style="display:none;">';
            }
        }

        function setSize(dst, src)
        {
            var height = settings.size.height || src.height(),
                width = settings.size.width || src.width() * 1.5;

            height = settings.minSize.height && height < settings.minSize.height ? settings.minSize.height : height;
            width = settings.minSize.width && width < settings.minSize.width ? settings.minSize.width : width;

            height = settings.maxSize.height && height > settings.maxSize.height ? settings.maxSize.height : height;
            width = settings.maxSize.width && width > settings.maxSize.width ? settings.maxSize.width : width;

            dst.height(height);
            dst.width(width);
        }

        function _scalarToFunc(scalar) {
            return function() {
                return scalar;
            };
        }

        function getText(item)
        {
            return !settings.html ? item.text() : item.html();
        }

        function setText(item, text)
        {
            return !settings.html ? item.text(text) : item.html(text);
        }

        return this;

    };
})(jQuery);;
(function($) {
    $.fn.photoStreamSlider = function(options) {
        var settings = $.extend({
            duration: 200,
            height: 48
        }, options || {});
        var self = this;

        function init()
        {
            var photo_stream = self.find(settings.photoStream),
                visible_list = $('li.visible', photo_stream),
                list = $('li', photo_stream),
                visible_width = visible_list.filter(':first').outerWidth() * visible_list.length,
                width = list.filter(':first').outerWidth() * list.length,
                height = settings.height || list.filter(':first').outerHeight(),
                wrapper = photo_stream.parent();

            wrapper.css({
                overflow: 'hidden',
                height: height,
                position: 'relative',
                padding: '4px 0',
                margin: 0,
                width: visible_width
            });

            var li = photo_stream.find('li:first'),
                first_visible = visible_list.filter(':first'),
                delta = (first_visible.outerWidth() - first_visible.width()) / 2,
                offset = 0,
                li_width = li.outerWidth();

            first_visible = first_visible.get(0);
            while (li.length) {
                if (li.get(0) == first_visible) {
                    break;
                }
                offset += li_width;
                li = li.next();
            }

            offset -= delta;
            photo_stream.css({
                position: 'absolute',
                left: -offset,
                width: width
            });

            $(settings.forwardLink).unbind('click').bind('click', function() {
                slide('forward');
                return false;
            });

            $(settings.backwardLink).unbind('click').bind('click', function() {
                slide('backward');
                return false;
            });

            self.unbind('append prepend').bind('append prepend', function(e, html) {
                if (e.type == 'append') {
                    var last_dummy = photo_stream.find('li:last'),
                        li = last_dummy,
                        dummies_tail = $();
                    while (li.hasClass('dummy')) {
                        dummies_tail = dummies_tail.add(li);
                        li = li.prev('li');
                    }
                    dummies_tail.remove();
                    photo_stream.append(html);
                } else {
                    // because we prepend and use css-left for shifting, so calc shift (width of prepended items)
                    var rendered = $('<div></div>').html(html),
                        new_list = rendered.find('li'),
                        shift = new_list.length * li_width;
                    rendered.remove();

                    var first_dummy = photo_stream.find('li:first'),
                        li = first_dummy,
                        dummies_head = $();

                    while (li.hasClass('dummy')) {
                        dummies_head = dummies_head.add(li);
                        li = li.next('li');
                    }
                    dummies_head.remove();
                    photo_stream.prepend(new_list);
                }
                // update closure vars
                list = photo_stream.find('li');
                // recalc width
                width = list.filter(':first').outerWidth() * list.length;
                photo_stream.css('width', width);

                if (e.type == 'prepend') {
                    // prepend - take into account shifting (see before)
                    var f = function() {
                        photo_stream.css('left', parseInt(photo_stream.css('left')) - shift);
                    };
                    if (photo_stream.is(':animated')) {
                        photo_stream.stop(false, true);
                        f();
                    } else {
                        f();
                    }
                }

                var selected_li = photo_stream.find('li.selected');
                if (selected_li.hasClass('visible')) {
                    self.trigger('home', [null, false]);
                }
            });

            self.unbind('forward backward').bind('forward backward', function(e, options) {
                slide({
                    direction: e.type,
                    steps: options.steps,
                    animate: typeof options.animate !== 'undefined' ? options.animate : true,
                    fn: options.fn
                });
                var selected_li = photo_stream.find('li.selected'),
                    candidate_li = e.type == 'forward' ? selected_li.next('li:not(.fishki)') : selected_li.prev('li:not(.fishki)');
                if (candidate_li.length) {
                    selected_li.removeClass('selected');
                    candidate_li.addClass('selected');
                }
            });

            self.unbind('home').bind('home', function(e, fn, animate) {
                var middle = parseInt(visible_list.length / 2),
                    current = visible_list.filter(':eq('+middle+')'),
                    next_selected = current.nextAll('.selected:first'),
                    prev_selected = current.prevAll('.selected:first'),
                    cnt = 0,
                    direction = '';

                if (typeof fn !== 'function') {
                    animate = fn;
                }
                animate = typeof animate !== 'undefined' ? animate : true;
                if (next_selected.length) {
                    direction = 'forward';
                    current.nextAll().each(function() {
                        ++cnt;
                        if ($(this).hasClass('selected')) {
                            return false;
                        }
                    });
                } else if (prev_selected.length) {
                    direction = 'backward';
                    current.prevAll().each(function() {
                        ++cnt;
                        if ($(this).hasClass('selected')) {
                            return false;
                        }
                    });
                }
                if (direction && cnt) {
                    slide({
                        direction: direction,
                        steps: cnt,
                        fn: fn,
                        animate: animate
                    });
                } else {
                    if (typeof fn == 'function') {
                        fn();
                    }
                }
                return false;
            });

            self.unbind('refresh').bind('refresh', function() {
                init();
            });

            function slide(options)
            {
                if (typeof options == 'string') {
                    options = {
                        direction: options,
                        animate: true
                    };
                }
                var direction = options['direction'] || 'forward',
                    count = options['steps'] || visible_list.length;

                if (slide.execution) {
                    return;
                }
                slide.execution = true;

                var shift = visible_list.filter(':first').outerWidth() * count,
                    visible_count = visible_list.length;

                if (direction == 'forward') {
                    var last = visible_list.filter(':last'),
                        next = last.nextAll(':lt(' + count + ')'),
                        next_count = next.length,
                        last_in_next = next.filter(':last');
                    if (next_count) {
                        visible_list.removeClass('visible');
                        last_in_next.prevAll(':lt(' + (visible_count - 1) + ')').addClass('visible');
                        last_in_next.addClass('visible');
                    }
                } else {
                    var first = visible_list.filter(':first'),
                        prev = first.prevAll(':lt(' + count + ')'),
                        prev_count = prev.length,
                        first_in_prev = prev.filter(':last');       // prevAll return list in right-to-left order, so first is last
                    if (prev_count) {
                        visible_list.removeClass('visible');
                        first_in_prev.nextAll(':lt(' + (visible_count - 1) + ')').addClass('visible').show();
                        first_in_prev.addClass('visible');
                    }
                }
                // update closure
                visible_list = $('li.visible', photo_stream);
                // sliding itself
                var left = photo_stream.position()['left'];
                if (direction == 'forward') {
                    var bound = width - visible_width - delta;
                    left = left - shift;
                    left = left > -bound ? left : -bound;
                } else {
                    left = left + shift;
                    left = left < delta ? left : delta;
                }

                function afterAnimate() {
                    slide.execution = false;
                    var callback = 'on' + direction.charAt(0).toUpperCase() + direction.slice(1);
                    callback = settings[callback];
                    if (typeof callback == 'function') {
                        callback.call(self);
                    }
                    callback = options.fn;
                    if (typeof callback == 'function') {
                        callback.call(self);
                    }
                }
                if (options.animate) {
                    photo_stream.animate({
                        left: left
                    }, settings.duration, afterAnimate);
                } else {
                    photo_stream.css({
                        left: left
                    });
                    afterAnimate();
                }
            }
        }

        init();

    };
})(jQuery);;
(function($) {
    $.product_dragndrop = {
        handlers: {},
        options: {},
        init: function(options) {
            this.options = options;
            if (options.collections) {
                this.initDragCollections();
                this.initDropCollections();
            }
            if (options.products) {
                this.initDragProducts();
                this.initDropProducts();
            }
            return this;
        },

        bind: function(event, handler) {
            this.handlers[event] = handler;
            return this;
        },

        trigger: function(event) {
            if (typeof this.handlers[event] === 'function') {
                return this.handlers[event].apply(this, Array.prototype.slice.call(arguments, 1));
            }
        },

        initDragProducts: function() {
            var product_list = $('#product-list');
            var context = product_list.find('.product:not(.s-alien)');
            context.find('.drag-handle').live('selectstart', function() {
                document.onselectstart = function() {
                    return false;
                };
                return false;
            });
            context.liveDraggable({
                opacity: 0.75,
                zIndex: 9999,
                distance: 5,
                appendTo: 'body',
                cursor: 'move',
                refreshPositions: true,
                containment: [
                      0,
                      0,
                      $(window).width(),
                      {
                          toString: function() {
                              return $(document).height();  // we have lengthened document, so make flexible calculating (use typecast method toString)
                          }
                      }
                ],
                start: function(event, ui) {
                    // prevent default-browser drag-and-drop action
                    document.ondragstart = function() {
                        return false;
                    };
                    // scroll fix. See helperScroll
                    ui.helper.data('scrollTop', $(document).scrollTop());
                    $(document).bind('scroll', $.product_dragndrop._scrolHelper);

                    $('.block.drop-target').addClass('drag-active');
                },
                handle: '.drag-handle',
                stop: function(event, ui) {
                    document.ondragstart   = null;
                    document.onselectstart = null;

                    var self = $(this);
                    if (!self.find('input:checked').length) {
                        self.removeClass('selected');
                    }
                    hideSortHint();
                    $(document).unbind('scroll', $.product_dragndrop._scrolHelper);
                    $('.block.drop-target').removeClass('drag-active');

                    hideSortHint();
                },
                helper: function(event, ui) {
                    var count = 1;
                    var select_all_input = product_list.find('.s-select-all');
                    if (select_all_input.is(':checked')) {
                        count = select_all_input.attr('data-count');
                    } else {
                        var selected = product_list.find('.product.selected');
                        if (selected.length) {
                            if (selected.index(this) !== -1) {
                                count = selected.length;
                            } else {
                                $(this).trigger('select', true);
                                count = selected.length + 1;
                            }
                        } else {
                            $(this).addClass('selected');
                        }
                    }
                    return '<div id="products-helper"><span class="indicator red">'+count+'</span><i class="icon10 no-bw" style="display:none;"></i></div>';
                },
                drag: function(event, ui) {
                    var e = event.originalEvent;
                    ui.position.left = e.pageX - 20;
                    ui.position.top = e.pageY;
                }
            });
        },

        initDropProducts: function() {
            // dropping process in photo-list itself. Dropping process is trying sorting
            $('#product-list .product').liveDroppable({
                disabled: false,
                greedy: true,
                tolerance: 'pointer',
                over: function(event, ui) {

                    // activate item
                    var self = $(this);
                    if (self.hasClass('s-alien')) {
                        return false;
                    }
                    if (!ui.draggable.hasClass('product')) {
                        return false;
                    }

                    if (!$.product_dragndrop.trigger('is_product_sortable')) {
                        showSortHint();
                    } else {
                        hideSortHint();
                    }

                    $.product_dragndrop._activatePhotoListItem.call(this);
                },
                out: function(event, ui) {
                    $.product_dragndrop._unactivatePhotoListItem.call(this);
                },
                drop: function(event, ui) {
                    if (!ui.draggable.hasClass('product')) {
                        return false;
                    }

                    var self = $(this);
                    // drop into itself is illegal
                    if (self.hasClass('selected')) {
                        $.product_dragndrop._unactivatePhotoListItem.call(this);
                        return false;
                    }

                    var selected = $('#product-list').find('.product.selected');

                    if (!$.product_dragndrop.trigger('is_product_sortable')) {
                        $.product_dragndrop._unactivatePhotoListItem.call(this);
                        $.product_dragndrop._unactivatePhotoListItem.call(ui.draggable);
                        return false;
                    }

                    var before_id = null;
                    // Special case: self is alien (from child categories)
                    if (self.hasClass('s-alien')) {
                        var closest = self.nextAll(':not(.s-alien):first');
                        if (!closest.length) {
                            closest = self.prevAll(':not(.s-alien):first');
                            if (!closest.length || closest.hasClass('selected')) {
                                return false;
                            }
                            before_id = null;
                            closest.after(selected);
                            if (closest.hasClass('last')) {
                                closest.removeClass('last');
                                selected.filter(':last').addClass('last');
                            }
                        } else {
                            before_id = closest.attr('data-product-id');
                            closest.before(selected);
                            if (closest.hasClass('last')) {
                                closest.removeClass('last');
                                selected.filter(':last').addClass('last');
                            }
                        }

                    } else {
                        if (!self.hasClass('drag-active-last')) {
                            before_id = self.attr('data-product-id');
                        }

                        if (self.hasClass('last') && self.hasClass('drag-active-last')) {
                            self.after(selected).removeClass('drag-active drag-active-last last');
                            selected.filter(':last').addClass('last');
                        } else {
                            self.before(selected).removeClass('drag-active');
                        }
                        self.removeClass('drag-active drag-active-last');
                    }

                    $.product_dragndrop._unactivatePhotoListItem.call(this);
                    $.product_dragndrop._unactivatePhotoListItem.call(ui.draggable);

                    selected.trigger('select', false);

                    var product_ids = selected.map(function() {
                        return $(this).attr('data-product-id');
                    }).toArray();
                    $.product_dragndrop.trigger('move_product', {
                        product_ids: product_ids, before_id: before_id,
                        error: function(r) {
                            if (r && console) {
                                console.log(typeof r.errors !== 'undefined' ? r.errors : r);
                            }
                            // TODO: restore
                        }
                    });
                }
            });
        },

        initDragCollections: function() {
            var containment = $('#wa-app .sidebar:first');
            var containment_pos = containment.position();
            var containment_metrics = { width: containment.width(), height: containment.height() };

            $(".s-collection-list li.dr").liveDraggable({
                containment: [
                      containment_pos.left,
                      containment_pos.top,
                      containment_pos.left + containment_metrics.width * 1.25,
                      containment_pos.top + containment_metrics.height * 1.25
                ],
                refreshPositions: true,
                revert: 'invalid',
                helper: function() {
                    var self = $(this);
                    var parent = self.parents('.s-collection-list:first').find('ul:first');
                    var clone = self.clone().addClass('ui-draggable dr-helper').css({
                        position: 'absolute'
                    }).prependTo(parent);
                    clone.find('a:first').append('<i class="icon10 no-bw" style="margin-left: 0; margin-right: 0; display:none;"></i>');
                    return clone;
                },
                cursor: 'move',
                cursorAt: { left: 5 },
                opacity: 0.75,
                zIndex: 9999,
                distance: 5,
                start: function(event, ui) {
                    document.ondragstart = function() {
                        return false;
                    };
                },
                stop: function() {
                    document.ondragstart = null;
                }
            });
        },

        initDropCollections: function() {
            this.initDropBetweenCollections();
            this.initDropInsideCollections();
        },

        initDropBetweenCollections: function() {
            $('.s-collection-list li.drag-newposition').liveDroppable({
                greedy: true,
                tolerance: 'pointer',
                over: function(event, ui) {
                    var self = $(this);
                    if (ui.draggable.attr('data-type') != self.attr('data-type')) {
                        return false;
                    }
                    self.addClass('active').parent().parent().addClass('drag-active');
                },
                out: function(event, ui) {
                    var self = $(this);
                    if (ui.draggable.attr('data-type') != self.attr('data-type')) {
                        return false;
                    }
                    self.removeClass('active').parent().parent().removeClass('drag-active');
                },
                deactivate: function(event, ui) {
                    var self = $(this);
                    if (ui.draggable.attr('data-type') != self.attr('data-type')) {
                        return false;
                    }
                    if (self.is(':animated') || self.hasClass('dragging')) {
                        self.stop().animate({ height: '2px' }, 300, null,
                                function() {
                                    self.removeClass('dragging');
                                }
                        );
                    }
                    self.removeClass('active').parent().parent().removeClass('drag-active');
                },
                drop: function(event, ui) {
                    var self = $(this);
                    var dr = ui.draggable;
                    var type = dr.attr('data-type');
                    if (type != self.attr('data-type')) {
                        return false;
                    }

                    var getRawId = function(id) {
                        var parts = id.split('-');
                        parts.shift();
                        return parts.join('-');
                    };


                    var id = getRawId(dr.attr('id'));
                    var prev = self.prev('li');
                    var sep  = dr.next();
                    var home = dr.prev();

                    if (prev.length && prev.attr('id') == 'category-'+id && !prev.hasClass('dr-helper')) {
                        return false;
                    }
                    if (this == dr.next().get(0)) {
                        return false;
                    }

                    var parent_list = dr.parent('ul');
                    var li_count = parent_list.children('li.dr[id!=category-'+id+']').length;
                    var old_parent_id = parseInt(getRawId(parent_list.parent().attr('id')), 10) || 0;

                    self.after(sep).after(dr);

                    var parent = dr.parent().parent();
                    if (parent.is('li.dr') || parent.is('.s-collection-list')) {
                        var parent_id = 0;
                        if (!parent.is('.s-collection-list')) {
                            parent_id = parseInt(getRawId(parent.attr('id')), 10) || 0;
                        }
                        var next = dr.nextAll('li.dr:first');
                        var before_id = null;
                        if (next.length) {
                            before_id = getRawId(next.attr('id')) || null;
                        }

                        if (!li_count && old_parent_id !== parent_id) {
                            parent_list.parent('li').children('i').hide();
                            parent_list.hide();
                        }

                        $.product_dragndrop.trigger('move_list', {
                            id: id, type: type, before_id: before_id, parent_id: parent_id,
                            success: function(r) {
                                if (!li_count && old_parent_id !== parent_id) {
                                    parent_list.parent('li').children('i').remove();
                                    parent_list.remove();
                                    $.categories_tree.setCollapsed(old_parent_id);
                                }
                            },
                            error: function(r) {
                                if (r && console) {
                                    console.log(typeof r.errors !== 'undefined' ? r.errors : r);
                                }
                                // restore
                                home.after(dr.next()).after(dr);
                                if (!li_count) {
                                    // parent_list.parent('li').children('i').show();
                                    parent_list.show();
                                }
                            }
                        });
                    }
                }
            });
        },

        initDropInsideCollections: function() {
            $('.s-collection-list li.dr a').liveDroppable({
                tolerance: 'pointer',
                greedy: true,
                out: function(event, ui) {
                    var dr = ui.draggable;
                    var self = $(this).parent();
                    if (!dr.hasClass('product') && self.attr('data-type') != dr.attr('data-type')) {
                        return false;
                    }
                    if (dr.hasClass('product')) {
                        ui.helper.find('span').show().end().find('i').hide();       // show 'circle'-icon
                    }
                    self.removeClass('drag-newparent');
                },
                over: function(event, ui) {
                    var dr = ui.draggable;
                    var self = $(this).parent();
                    var type = dr.attr('data-type');
                    if (!dr.hasClass('product') && type != self.attr('data-type')) {
                        return false;
                    }
                    if (type != 'set') {
                        self.addClass('drag-newparent');
                    }
                    if (dr.hasClass('product')) {
                        if (self.hasClass('dynamic')) {
                            ui.helper.find('span').hide().end().find('i').show();   // show 'cross'-icon
                        } else {
                            ui.helper.find('span').show().end().find('i').hide();   // show 'circle'-icon
                        }
                        return false;
                    }

                    if (!dr.hasClass('dynamic') && self.hasClass('dynamic')) {
                        ui.helper.find('i.no-bw').show();
                        return false;
                    } else {
                        ui.helper.find('i.no-bw').hide();
                    }

                    var drSelector = '.dr[id!="'+dr.attr('id')+'"]';
                    var nearby = $();

                    // helper to widen all spaces below the current li and above next li (which may be on another tree level, but not inside current)
                    var addBelow = function(nearby, current) {
                        if (!current.length) {
                            return nearby;
                        }
                        nearby = nearby.add(current.nextUntil(drSelector).filter('li.drag-newposition'));
                        if (current.nextAll(drSelector).length > 0) {
                            return nearby;
                        }
                        return addBelow(nearby, current.parent().closest('li'));
                    };

                    // widen all spaces above the current li and below the prev li (which may be on another tree level)
                    var above = self.prevAll(drSelector+':first');
                    if(above.length > 0) {
                        var d = above.find(drSelector);
                        if (d.length > 0) {
                            nearby = addBelow(nearby, d.last());
                        } else {
                            nearby = addBelow(nearby, above);
                        }
                    } else {
                        nearby = nearby.add(self.prevUntil(drSelector).filter('li.drag-newposition'));
                    }

                    // widen all spaces below the current li and above the next li (which may be on another tree level)
                    if (self.children('ul').children(drSelector).length > 0) {
                        nearby = nearby.add(self.children('ul').children('li.drag-newposition:first'));
                    } else {
                        nearby = addBelow(nearby, self);
                    }

                    var old = $('.drag-newposition:animated, .drag-newposition.dragging').not(nearby);

                    old.stop().animate({height: '2px'}, 300, null, function() {
                        old.removeClass('dragging');
                    });
                    nearby.stop().animate({height: '10px'}, 300, null, function() {
                        nearby.addClass('dragging');
                    });
                },
                drop: function(event, ui) {
                    var dr = ui.draggable;
                    var self = $(this).parent();
                    var type = dr.attr('data-type');
                    if (!dr.hasClass('product')) {
                        if (type == 'set') {
                            return false;
                        }
                        if (self.attr('id') == dr.attr('id')) {
                            return false;
                        }
                        if (type != self.attr('data-type')) {
                            return false;
                        }
                    }
                    self.removeClass('drag-newparent');

                    // coping product to category section
                    if (dr.hasClass('product')) {
                        if (self.hasClass('dynamic')) {
                            return false;
                        }
                        var product_list = $('#product-list');

                        var data = {};
                        if (product_list.find('.s-select-all').is(':checked')) {
                            data.whole_list = true;
                        } else {
                            var products = product_list.find('.product.selected');
                            data.product_ids = products.map(function() {
                                return $(this).attr('data-product-id');
                            }).toArray();
                        }

                        $.product_dragndrop.trigger('add_to_list', $.extend(data, {
                            collection_param: self.attr('id').replace('-', '_id='),
                            success: function(r) {
                                if (data.whole_list) {
                                    product_list.find('.s-select-all').trigger('select', false);
                                } else if (data.product_ids && data.product_ids.length) {
                                    products.trigger('select', false);
                                }
                                if (r.data) {
                                    self.find('>.counters .count:not(.subtree)').text(r.data.count);
                                    self.find('>.counters .subtree').text(r.data.total_count);
                                }
                            }
                        }));
                        return false;
                    } else {
                        if (!dr.hasClass('dynamic') && self.hasClass('dynamic')) {
                            return false;
                        }
                    }

                    // sorting categories
                    var id = dr.attr('id').split('-')[1];
                    if (self.attr('id') == 'category-'+id) {
                        return false;
                    }

                    if (dr.hasClass('product')) {
                        var selected = $('#product-list').find('.product.selected');
                        selected.trigger('select', false);
                        return false;
                    }

                    var parent_id = parseInt(self.attr('id').split('-')[1], 10) || 0;

                    var list = null;
                    var sep  = dr.next();
                    var home = dr.prev();

                    // for tracking situation when list acceptor has no children
                    // and inserted item will be first
                    var first_child = false;

                    if (self.hasClass('drag-newposition')) {
                        list = self.parent('ul');
                    } else {
                        // has loaded (via ajax) children items
                        if (self.children('ul').length) {
                            list =  self.children('ul');
                        } else if (!self.find('>i.collapse-handler-ajax').length) { // no children

                            list = $(
                                '<ul class="menu-v with-icons dr unapproved">' +
                                    '<li class="drag-newposition unapproved" data-type="'+type+'"></li>' +
                                '</ul>'
                            ).appendTo(self);
                            list.find('.drag-newposition').mouseover(); // init droppable
                            $('<i class="icon16 darr overhanging collapse-handler-ajax unapproved" id="' +
                                    type + '-' + parent_id + '-handler' +
                                '"></i>').insertBefore(self.children('a'));

                            first_child = true;
                        }
                    }

                    var parent_list = dr.parent('ul');
                    var li_count = parent_list.children('li.dr[id!=category-'+id+']').length;
                    var old_parent_id = parseInt(parent_list.parent().attr('id').split('-')[1], 10) || 0;

                    if (list) {
                        list.append(dr).append(sep);
                    }

                    if (!li_count && old_parent_id !== parent_id) {
                        parent_list.parent('li').children('i').hide();
                        parent_list.hide();
                    }

                    var parent = self;
                    if (parent.is('li.dr')) {
                        $.product_dragndrop.trigger('move_list', {
                            id: id, type: type, parent_id: parent_id,
                            success: function(r) {
                                if (!li_count && old_parent_id !== parent_id) {
                                    parent_list.parent('li').children('i').remove();
                                    parent_list.remove();
                                    $.categories_tree.setCollapsed(old_parent_id);
                                }
                                // has children, but not loaded yet
                                if (!list) {
                                    dr.remove();
                                    sep.remove();
                                    // Because children is not loaded yet, calling of count_subtree (see below)
                                    // will not have effect.
                                    // So counters is returned by server
                                    self.trigger('update_counters',
                                        r.data.count || {}
                                    );
                                } else {
                                    $('.s-collection-list .unapproved').removeClass('unapproved');
                                    if (first_child) {
                                        $.categories_tree.setExpanded(parent_id);
                                    } else {
                                        self.trigger('count_subtree');
                                    }
                                }
                            },
                            error: function(r) {
                                if (r && console) {
                                    console.log(typeof r.errors !== 'undefined' ? r.errors : r);
                                }
                                // restore
                                home.after(dr).after(sep);
                                if (!li_count) {
                                    // parent_list.parent('li').children('i').show();
                                    parent_list.show();
                                }
                                $('.s-collection-list .unapproved').remove();
                            }
                        });
                    }
                }
            });
        },

        // when scrolling page drag-n-drop helper must moving too with cursor
        _scrolHelper: function(e) {
            var helper = $('#products-helper'),
                prev_scroll_top = helper.data('scrollTop'),
                scroll_top = $(document).scrollTop(),
                shift = prev_scroll_top ? scroll_top - prev_scroll_top : 50;

            helper.css('top', helper.position().top + shift + 'px');
            helper.data('scrollTop', scroll_top);
        },

        // active/inactive drop-item both left and right
        _extDragActivate: function(e, self, className) {
            var classNameOfLast = className + '-last';
            if (!self.hasClass('last')) {
                self.addClass('drag-active');
                return;
            }
            var pageX = e.pageX,
                pageY = e.pageY,
                self_width = self.width(),
                self_height = self.height(),
                self_offset = self.offset();

            if ($.product_dragndrop.options.view == 'thumbs') {
                if (pageX > self_offset.left + self_width*0.5 && pageX <= self_offset.left + self_width) {
                    self.removeClass(className).addClass(classNameOfLast);
                    $.product_dragndrop._shiftToLeft(self);
                } else if (pageX > self_offset.left && pageX <= self_offset.left + self_width*0.5) {
                    self.removeClass(classNameOfLast).addClass(className);
                    $.product_dragndrop._shiftToRight(self);
                } else {
                    $.product_dragndrop._shiftAtPlace(self);
                }
            } else if ($.product_dragndrop.options.view == 'table') {
                if (pageY > self_offset.top + self_height*0.5) {
                    self.removeClass(className).addClass(classNameOfLast);
                } else if (pageY > self_offset.top) {
                    self.removeClass(classNameOfLast).addClass(className);
                }
            }
            if (pageY < self_offset.top || pageY > self_offset.top + self_height ||
                    pageX < self_offset.left || pageX > self_offset.left + self_width)
            {
                self.removeClass(className).removeClass(classNameOfLast);
            }
        },

        _bindExtDragActivate: function(item, className) {
            $(document).bind('mousemove.ext_drag_activate', function (e) {
                $.product_dragndrop._extDragActivate(
                    e,  item, className
                );
            });
        },

        _unbindExtDragActivate: function() {
            $(document).unbind('mousemove.ext_drag_activate');
        },

        _activatePhotoListItem: function() {
                var self = $(this);
                var sort_enable = $.product_dragndrop.trigger('is_product_sortable');
                var className = sort_enable ? 'drag-active' : 'drag-active-disabled';
                if (sort_enable && $.product_dragndrop.options.view == 'thumbs') {
                    $.product_dragndrop._shiftToRight(self);
                }
                if (self.hasClass('last')) {
                    $.product_dragndrop._bindExtDragActivate(self, className);
                } else {
                    self.addClass(className);
                }
        },

        // clear (unactive) action
        _unactivatePhotoListItem: function() {
            var self = $(this);
            var sort_enable = $.product_dragndrop.trigger('is_product_sortable');
            var className =  sort_enable ? 'drag-active' : 'drag-active-disabled';
            var classNameOfLast = className + '-last';
            if (self.hasClass('last')) {
                $.product_dragndrop._unbindExtDragActivate();
            }
            self.removeClass(className + ' ' + classNameOfLast);
            if (sort_enable && $.product_dragndrop.options.view == 'thumbs') {
                $.product_dragndrop._shiftAtPlace(self);
            }
        },

        _shiftToLeft: function(item) {
            if (item.data('shifted') !== 'left') {
                var wrapper = item.find('.p-wrapper');
                if (!wrapper.length) {
                    var children = item.children();
                    var wrapper = $("<div class='p-wrapper' style='position:relative;'></div>").appendTo(item);
                    wrapper.append(children);
                }
                wrapper.stop().animate({
                    left: -15
                }, 200);
                item.data('shifted', 'left');
            }
        },
        _shiftToRight: function(item) {
                if (item.data('shifted') !== 'right') {
                    var wrapper = item.find('.p-wrapper');
                    if (!wrapper.length) {
                        var children = item.children();
                        var wrapper = $("<div class='p-wrapper' style='position:relative;'></div>").appendTo(item);
                        wrapper.append(children);
                    }
                    wrapper.stop().animate({
                        left: 15
                    }, 200);
                    item.data('shifted', 'right');
                }
        },
        _shiftAtPlace: function(item) {
            if (item.data('shifted')) {
                var wrapper = item.find('.p-wrapper');
                if (wrapper.length) {
                    var children = wrapper.children();
                    wrapper.stop().css({
                        left: 0
                    });
                    item.append(children);
                    wrapper.remove();
                }
                item.data('shifted', '');
            }
        }

    };

    function showSortHint() {
        var sort_method = $.product_dragndrop.options.sort;
        if (sort_method) {
            var block = $('#hint-menu-block').show();
            block.children().hide();
            block.find('.' + sort_method).show();
        }
    }

    function hideSortHint() {
            var block = $('#hint-menu-block').hide();
            block.children().hide();
    }

})(jQuery);
;
(function($) {

    // private helper methods in closure

    var getId = function(el) {
        var regexp = /^category-(.*?)-handler$/;
        return regexp.test(el.attr('id')) ?
                el.attr('id').replace(regexp, function() {
                    return parseInt(arguments[1], 10) || 0;
                }) : 0;
    };

    var getContext = function(el) {
        if (!getId(el)) {
            var p = el.parent(), t = p.next(), u = t.find('ul:first');
        } else {
            var p = el.parents('li:not(.drag-newposition):first'), t = p.find('ul:first'), u = t;
        }
        return {
            parent: p,
            target: t,
            ul: u
        };
    };

    var onCollapse = function(el, func) {
        var context = getContext(el);
        if (context.parent.attr('data-type') == 'category' && !context.parent.hasClass('dynamic')) {
            context.parent.trigger('count_subtree', true);
        }
        el.removeClass('darr').addClass('rarr');
        context.target.hide();
        if (typeof func === 'function') {
            func(el);
        }
    };

    var onExpand = function(el, func) {
        var context = getContext(el);
        if (context.parent.attr('data-type') == 'category') {
            context.parent.trigger('count_subtree', false);
        }
        el.removeClass('rarr').addClass('darr');
        context.target.show();
        if (typeof func === 'function') {
            func(el);
        }
    };

    /**
     * @param context
     * @param {Boolean} status
     */
    var setLoadingIcon = function(context, status) {
        var icon = context.parent.find('.loading:first');
        var counters = context.parent.find('.counters');
        if (status) {
            icon.show();
            counters.hide();
        } else {
            icon.hide();
            counters.show();
        }
    };

    var collapse = function(el, func) {
        onCollapse(el, func);
        $.get('?action=categoryExpand&id=' + getId(el) + '&collapsed=1');
    };

    var expand = function(el, onExpandFunc, afterExpandFunc) {
        if (el.data('loading_content')) {
            return;
        }
        var context = getContext(el);
        if (!context.ul.length) {
            setLoadingIcon(context, true);
        } else {
            onExpand(el, onExpandFunc);
        }

        var loading_content = !context.ul.length;
        el.data('loading_content', loading_content);
        $.get('?action=categoryExpand&id=' + getId(el) + (loading_content ? '&tree=1' : ''),
            function(html) {
                if (loading_content) {
                    if (context.target.length) {
                        context.target.append(html);
                    } else {
                        context.parent.append(html);
                    }
                    setLoadingIcon(context, false);
                    onExpand(el, onExpandFunc);
                    el.data('loading_content', false);
                    if (typeof afterExpandFunc === 'function') {
                        afterExpandFunc();
                    }
                } else {
                    if (typeof afterExpandFunc === 'function') {
                        afterExpandFunc();
                    }
                }
            }
        );
    };

    $.categories_tree = {

        init: function() {
            $('#s-category-list-block').off('click', '.collapse-handler-ajax').on('click', '.collapse-handler-ajax', function() {
                var self = $(this);
                if (self.hasClass('darr')) {
                    collapse(self);
                } else {
                    expand(self);
                }
            });
            $('#s-category-list-block .heading').off('click').click(function(e) {
                var $collapse_handler = $(this).find('.collapse-handler-ajax');
                if (!$collapse_handler.is(e.target)) {
                    $collapse_handler.click();
                }
            });
        },

        collapse: function(handler, func) {
            handler = $(handler);
            if (handler.hasClass('darr')) {
                collapse(handler, func);
            } else if (typeof func === 'function') {
                func(handler);
            }
        },

        expand: function(handler, onExpand, afterExpand) {
            handler = $(handler);
            if (handler.hasClass('rarr')) {
                expand(handler, onExpand, afterExpand);
            } else {
                if (typeof onExpand === 'function') {
                    onExpand(handler);
                }
                if (typeof afterExpand === 'function') {
                    afterExpand(handler);
                }
            }
        },

        isCollapsed: function(handler) {
            return $(handler).hasClass('rarr');
        },

        setExpanded: function(category_id) {
            $.get('?action=categoryExpand&id=' + category_id);
        },

        setCollapsed: function(category_id) {
            $.get('?action=categoryExpand&id=' + category_id + '&collapsed=1');
        },

        getHandlerByCategoryId: function(category_id) {
            var handler = $();
            category_id = parseInt(category_id, 10) || 0;
            if (!category_id) {
                handler = $('#s-category-list-handler');
            } else {
                handler = $('#category-' + category_id + '-handler');
            }
            return handler;
        }
    };
})(jQuery);
;
(function ($) {
    $.product_sidebar = {
        options: {},
        init: function () {
            var sidebar = $('#s-sidebar');

            $.product_dragndrop.init({
                collections: true
            }).bind('move_list', function (options) {
                if (!options.type) {
                    if (typeof options.error === 'function') {
                        options.error('Unknown list type');
                    }
                    return;
                }
                var data = {
                    id: options.id,
                    type: options.type,
                    parent_id: options.parent_id || 0
                };
                if (options.before_id) {
                    data.before_id = options.before_id;
                }
                $.products.jsonPost('?module=products&action=moveList', data, options.success, function(response) {
                    if (response.errors && response.errors.length) {
                        $.each(response.errors, function(i, error) {
                            var text = null;
                            if (typeof error === "string") { text = error; }
                            if (typeof error.text === "string") { text = error.text; }
                            if (text) { renderError(text); }
                        });
                    }
                    return (typeof options.error === "function" ? options.error(response) : options.error);
                });

                function renderError(text) {
                    var dialog_html = "<div class=\"dialog width650px height250px small\">\n" +
                        "    <div class=\"dialog-background\"></div>\n" +
                        "        <div class=\"dialog-window\">\n" +
                        "        <div class=\"dialog-content\">\n" +
                        "            <div class=\"dialog-content-indent\">\n" +
                        "                <p>%text%</p>\n" +
                        "            </div>\n" +
                        "        </div>\n" +
                        "        <div class=\"dialog-buttons\">\n" +
                        "            <div class=\"dialog-buttons-gradient\">\n" +
                        "                <input class=\"button gray cancel\" type=\"button\" value=\"%button_text%\">\n" +
                        "            </div>\n" +
                        "        </div>\n" +
                        "    </div>\n" +
                        "</div>";

                    dialog_html = dialog_html
                        .replace("%text%", text)
                        .replace("%button_text%", $.wa.locale["Close"]);

                    var $dialog = $(dialog_html);

                    $dialog.waDialog({
                        onClose: function() {
                            $dialog.remove();
                        }
                    });
                }
            });

            // SIDEBAR CUSTOM EVENT HANDLERS

            sidebar.off('add', '.s-collection-list ul').
                on('add', '.s-collection-list ul',
                /**
                 * @param {Object} e jquery event
                 * @param {Object} item describes inserting item. Will be passed to template
                 * @param {String} type 'category', 'set'
                 * @param {Boolean} replace if item exists already replace it or not?
                 */
                function (e, item, type, replace) {
                    var self = $(this), parent = self.parents('.s-collection-list:first');
                    var tmp = $('<ul></ul>');
                    tmp.append(tmpl('template-sidebar-list-item', {
                        type: type,
                        item: item
                    }));

                    var new_item = tmp.children(':not(.drag-newposition):first');
                    var id = new_item.attr('id');
                    var old_item = self.find('#' + id);
                    var children = tmp.children();

                    if (old_item.length) {
                        if (replace) {
                            old_item.replaceWith(new_item);
                        }
                    } else {
                        self.prepend(children).show();
                    }

                    children.each(function () {
                        var item = $(this);
                        if (item.hasClass('dr')) {
                            item.find('a').mouseover();
                        } else {
                            item.mouseover();
                        }
                    });
                    self.find('.drag-newposition').css({
                        height: '2px'
                    }).removeClass('dragging');

                    parent.find('.s-empty-list').hide();

                    tmp.remove();

                    return false;
                }
            );

            sidebar.unbind('update').bind('update', function (e, lists) {
                for (var type in lists) {
                    if (type == 'all') {
                        $('#s-all-products').find('.count:first').text(lists[type].count);
                        continue;
                    }
                    var prefix = '#' + type + '-';
                    for (var id in lists[type]) {
                        $(prefix + id).find('.count:first').text(lists[type][id].count);
                    }
                }
                return false;
            });

            $('#s-tag-cloud').unbind('update').bind('update', function (e, tag_cloud) {
                // redraw tag cloud
                var html = '<ul class="tags">' +
                    '<li class="block align-center">';
                for (var tag_id in tag_cloud) {
                    var tag = tag_cloud[tag_id];
                    html +=
                        '<a href="' + '#/products/tag=' + tag.uri_name +
                        '/" style="font-size: ' + tag.size +
                        '%; opacity: ' + tag.opacity +
                        '"  data-id="' + tag.id +
                        '"  class="s-product-list">' + tag.name +
                        '</a> ';
                }
                html += '</li></ul>';
                $('#s-tag-cloud').html(html).parents('.block:first').show();
                return false;
            });

            sidebar.off('count_subtree', '.s-collection-list li').
                on('count_subtree', '.s-collection-list li',
                function (e, collapsed) {
                    var item = $(this);
                    if (typeof collapsed === 'undefined') {
                        collapsed = item.find('i.collapse-handler-ajax').hasClass('rarr');
                    }

                    // see update_counters also
                    var counter = item.find('>.counters .count:not(.subtree)');
                    var subtree_counter = item.find('>.counters .subtree');
                    if (!subtree_counter.length) {
                        subtree_counter = counter.clone().addClass('subtree').hide();
                        counter.after(subtree_counter);
                    }
                    if (collapsed) {
                        counter.hide();
                        subtree_counter.show();
                    } else {
                        subtree_counter.hide();
                        counter.show();
                    }
                    return false;
                }
            );

            sidebar.off('update_counters', '.s-collection-list li').
                on('update_counters', '.s-collection-list li',
                function (e, counts) {
                    var item = $(this);
                    // see count_subtree also
                    var counter = item.find('>.count:not(.subtree)');
                    var subtree_counter = item.find('>.subtree');
                    if (!subtree_counter.length) {
                        subtree_counter = counter.clone().addClass('subtree').hide();
                        counter.after(subtree_counter);
                    }

                    // update counters if proper key exists
                    if (typeof counts.item !== 'undefined') {
                        counter.text(parseInt(counts.item, 10) || 0);
                    }
                    if (typeof counts.subtree !== 'undefined') {
                        subtree_counter.text(parseInt(counts.subtree, 10) || 0);
                    }

                    return false;
                }
            );

            var arrows_panel = sidebar.find('#s-category-list-widen-arrows');
            arrows_panel.find('a.arrow').unbind('click').
                bind('click', function () {
                    var max_width = 1000;
                    var min_width = 200;
                    var cls = sidebar.attr('class');
                    var width = 0;

                    var m = cls.match(/left([\d]{2,3})px/);
                    if (m && m[1] && (width = parseInt(m[1]))) {
                        var new_width = width + ($(this).is('.right') ? 50 : -50);
                        new_width = Math.max(Math.min(new_width, max_width), min_width);

                        if (new_width != width) {

                            arrows_panel.css({'width': new_width.toString() + 'px'});

                            var replace = ['left' + width + 'px', 'left' + new_width + 'px'];
                            sidebar.attr('class', cls.replace(replace[0], replace[1]));
                            sidebar.css('width', '');

                            var content = $('#s-content');
                            cls = content.attr('class');
                            content.attr('class', cls.replace(replace[0], replace[1]));
                            content.css('margin-left', '');

                            if ($.product) {
                                $.product.setOptions({
                                    'sidebar_width': new_width
                                });
                            }

                            $.shop.jsonPost('?action=sidebarSaveWidth', {width: new_width});
                            sidebar.trigger('change_width', [new_width]);

                        }
                    }

                    return false;
                });

            sidebar.off('click', '#s-forcesort-by-name').on('click', '#s-forcesort-by-name', function () {
                $.product_sidebar.sortCategoryDialog();
                return false;
            });

            sidebar.off('click', '.s-new-list').on('click', '.s-new-list', function () {
                var self = $(this);
                var id = self.attr('id');
                var parent_id = 0;
                var type;
                if (id) {
                    type = id.replace('s-new-', '');
                } else {
                    var splited = self.parents('li.dr:first').attr('id').split('-');
                    type = splited[0];
                    parent_id = splited[1];
                }

                if (type === 'category') {
                    shopDialogProductsCategory.staticDialog($.product_list.collection_hash[1], parent_id, 'new');
                } else {
                    shopDialogProductsSet.staticDialog($.product_list.collection_hash[1], 'new');
                }

                return false;
            });
        },

        updateItemInCategoryList: function(r, hash) {

            var li = $('#category-' + r.data.id);

            li.find('.name:first').html(r.data.name);

            if ($.isArray(r.data.routes) && r.data.routes.length) {
                li.find('.routes:first').html(' ' + r.data.routes.join(' '));
            } else {
                li.find('.routes:first').html(' ');
            }

            if (r.data.subcategories_updated) {
                if (r.data.status == '0') {
                    li.find('a').addClass('gray');
                } else if (r.data.status == '1') {
                    li.find('a').removeClass('gray');
                }
            } else {
                if (r.data.status == '0') {
                    li.children('a').addClass('gray');
                } else if (r.data.status == '1') {
                    li.children('a').removeClass('gray');
                }
            }
            li.find('.id:first').html(r.data.id);
            li.attr('id', 'category-' + r.data.id);
            li.find('a').attr('href', hash);

            return null;
        },

        createNewElementInList: function (new_item, type) {
            var ctnr = $('#s-' + type + '-list');
            var list = ctnr.find('ul:first');
            if (!list.length) {
                ctnr.prepend(
                    '<ul class="menu-v with-icons"><li class="drag-newposition" data-type="' + type + '"></li></ul>'
                );
                ctnr.find('.drag-newposition').mouseover();  // init droppable
                list = ctnr.find('ul:first');
            }

            var parent_id = parseInt(new_item.parent_id, 10) || 0;
            var handler = $.categories_tree.getHandlerByCategoryId(parent_id);

            var add = function () {
                if (parent_id) {
                    var parent = list.find('#' + type + '-' + new_item.parent_id);
                    if (!parent.find('>.collapse-handler-ajax').length) {
                        parent.append('<ul class="menu-v with-icons dr"><li class="drag-newposition" data-type="' + type + '"></li></ul>');
                        parent.find('.drag-newposition').mouseover(); // init droppable
                        parent.find('>a').before(
                            '<i class="icon16 darr overhanging collapse-handler-ajax" id="' +
                            type + '-' + parent_id + '-handler' +
                            '"></i>'
                        );
                        $.categories_tree.setExpanded(parent_id);
                    }
                    list = parent.find('ul:first');
                }
                list.trigger('add', [new_item, type]);
            };

            if (type == 'category') {
                $.categories_tree.expand(handler, function () {
                    add();
                });
            } else {
                add();
            }

        },

        sortCategoryDialog: function () {
            $('#s-products-sort-categories').waDialog({
                disableButtonsOnSubmit: true,

                onSubmit: function (d) {
                    var form = $(this);

                }
            });
        },

        initCategoryDescriptionWysiwyg: function (d) {
            var field = d.find('.field.description');
            field.find('i').hide();
            field.find('.s-editor-core-wrapper').show();
            var height = (d.find('.dialog-window').height() * 0.8) || 350;
            var $textarea = $('#s-category-description-content');
            $textarea.waEditor({
                lang: wa_lang,
                toolbarFixed: false,
                maxHeight: height,
                minHeight: height,
                modification_wysiwyg_msg: $textarea.data('modification-wysiwyg-msg'),
                uploadFields: d.data('uploadFields')
            });
        }
    };
})(jQuery);;
(function ($) {

    // This should probably be somewhere else...
    if (!Array.prototype.filter) {
        Array.prototype.filter = function (fun /*, thisp*/) {
            var len = this.length;
            if (typeof fun != "function")
                throw new TypeError();

            var res = [];
            var thisp = arguments[1];
            for (var i = 0; i < len; i++) {
                if (i in this) {
                    var val = this[i]; // in case fun mutates this
                    if (fun.call(thisp, val, i, this))
                        res.push(val);
                }
            }

            return res;
        };
    }

    // init
    $(function () {
        $("#s-content").on('click', '.s-alert-close', function () {
            var alerts = $.storage.get('shop/alerts');
            if (!alerts) {
                alerts = [];
            }
            alerts.push($(this).parent().data('alert'));
            $.storage.set('shop/alerts', alerts);
            $(this).parent().remove();
            return false;
        });
    });

    $.storage = new $.store();
    $.products = {
        hash: '',
        list_hash: '', // hash of last list
        list_params: {}, // params of last list
        random: '',
        init: function (options) {
            $.extend(this.options, options);
            this.initRouting();
            this.initSearch();
            $.product_sidebar.init();
            $.categories_tree.init();
            this.initCollapsible();
            this.tagsHandler();
        },

        data: {
            'prev_action': null
        },

        initRouting: function () {
            if (typeof($.History) != "undefined") {
                $.History.bind(function () {
                    $.products.dispatch();
                });
            }
            $.wa.errorHandler = function (xhr) {
                if ((xhr.status === 403) || (xhr.status === 404)) {
                    var text = $(xhr.responseText);
                    console.log(text);
                    if (text.find('.dialog-content').length) {
                        text = $('<div class="block double-padded"></div>').append(text.find('.dialog-content *'));

                    } else {
                        text = $('<div class="block double-padded"></div>').append(text.find(':not(style)'));
                    }
                    $("#s-content").empty().append(text);
                    return false;
                }
                return true;
            };
            var hash = window.location.hash;
            if (hash === '#/' || !hash) {
                this.dispatch();
            } else {
                $.wa.setHash(hash);
            }
        },

        // Set hash without triggering dispatch
        skip_dispatch: 0,
        forceHash: function(hash) {
            if (hash != location.hash) {
                $.products.skip_dispatch++;
                $.wa.setHash(hash);
            }
        },

        dispatch: function (hash) {
            if ($.products.skip_dispatch > 0) {
                $.products.skip_dispatch--;
                return;
            }
            if (hash === undefined) {
                hash = window.location.hash;
            }

            hash = hash.replace(/(^[^#]*#\/*|\/$)/g, '');

            var beforeDispatchEvent = new $.Event('shop_before_dispatched');
            $(window).trigger(beforeDispatchEvent);
            if (beforeDispatchEvent.isDefaultPrevented()) {
                $.products.skip_dispatch = 1;
                window.location.hash = $.products.list_hash;
                return false;
            }

            /* fix syntax highlight */
            this.hash = hash;
            try {
                if (hash) {
                    hash = hash.split('/');
                    if (hash[0]) {
                        var actionName = "";
                        var attrMarker = hash.length;
                        for (var i = 0; i < hash.length; i++) {
                            var h = hash[i];
                            if (i < 2) {
                                if (i === 0) {
                                    actionName = h;
                                } else if (actionName == 'product' || actionName == 'tag' || actionName == 'search' || actionName == 'plugins'
                                    || actionName == 'pages' || actionName == 'stocks') {
                                    attrMarker = i;
                                    break;
                                } else if (parseInt(h, 10) != h && h.indexOf('=') == -1) {
                                    actionName += h.substr(0, 1).toUpperCase() + h.substr(1);
                                } else {
                                    attrMarker = i;
                                    break;
                                }
                            } else {
                                attrMarker = i;
                                break;
                            }
                        }
                        var attr = hash.slice(attrMarker);
                        this.preExecute(actionName, attr);
                        if (typeof(this[actionName + 'Action']) == 'function') {
                            $.shop.trace('$.products.dispatch', [actionName + 'Action', attr]);
                            this[actionName + 'Action'].apply(this, attr);
                        } else {
                            $.shop.error('Invalid action name:', actionName + 'Action');
                        }
                    } else {
                        this.preExecute();
                        this.defaultAction();
                    }
                } else {
                    this.preExecute();
                    this.defaultAction();
                }
            } catch (e) {
                $.shop.error(e.message, e);
            }
        },

        load: function (url, callback) {
            var r = Math.random();
            this.random = r;
            var self = this;
            $.get(url, function (result) {
                if (self.random != r) {
                    // too late: user clicked something else.
                    return;
                }
                $("#s-content").removeClass('bordered-left').html(result);
                $('html, body').animate({
                    scrollTop: 0
                }, 200);
                if (callback) {
                    try {
                        callback.call(this);
                    } catch (e) {
                        $.shop.error('$.products.load callback error: ' + e.message, e);
                    }
                }
            });
        },

        addOptions: function (options) {
            this.options = $.extend(this.options, options || {});
        },

        preExecute: function (action, args) {
            try {
                if (this.data.prev_action && (this.data.prev_action != action)) {
                    var actionName = this.data.prev_action + 'Termination';
                    $.shop.trace('$.products.preExecute', [actionName, action]);
                    if (typeof(this[actionName]) == 'function') {
                        this[actionName].apply(this, []);
                    }
                }
                this.data.prev_action = action;

                // Clear "min-width" fix /  $.product_list.rubberTable();
                ( function() {
                    var wrapper = $("#wa"),
                        old_style = wrapper.data("style");

                    if ( old_style ) {
                        wrapper.attr("style", old_style);
                    } else {
                        wrapper.removeAttr("style");
                    }

                    $(window).resize();

                })();

                $('body > .dialog').trigger('close').remove();

            } catch (e) {
                $.shop.error('preExecute error: ' + e.message, e);
            }
        },

        defaultAction: function () {
            this.productsAction();
        },

        welcomeAction: function () {
            this.load('?module=products&action=welcome');
        },

        paramsFromSession: function(params) {
            if (!window.sessionStorage || !window.JSON || !window.JSON.stringify || !window.JSON.parse) {
                return params;
            }

            if (params.category_id) {
                storage = sessionStorage.getItem('shop/list_categories') || '{}';
                try {
                    storage = JSON.parse(storage);
                } catch (e) {
                    storage = {};
                }

                var prms = storage[params.category_id] = storage[params.category_id] || {};
                $.each(['sort', 'order'], function(i, key) {
                    if (params[key] === undefined) {
                        params[key] = prms[key];
                    } else {
                        prms[key] = params[key];
                    }
                });

                try {
                    sessionStorage.setItem('shop/list_categories', JSON.stringify(storage));
                } catch (e) { }
            }

            return params;

            // Note that list view (thumbs or table) is stored server-side in PHP,
            // as well as sort and order for 'All Products' view. Mostly for legacy reasons.
        },

        buildProductsUrlComponent: function (params) {

            params = this.paramsFromSession(params);

            return ((params.view ? '&view=' + params.view : '')
                + (params.category_id ? '&category_id=' + params.category_id : '')
                + (params.set_id ? '&set_id=' + params.set_id : '')
                + (params.tag ? '&tag=' + params.tag : '')
                + (params.sort ? '&sort=' + params.sort : '')
                + (params.order ? '&order=' + params.order : '')
                + (params.text ? '&text=' + params.text : '')
                + (params.edit ? '&edit=' + params.edit : '')
                + (params.hash ? '&hash=' + params.hash : '')
                + (params.page ? '&page=' + params.page : '')
                + (params.type_id ? '&type_id=' + params.type_id : '')).
                slice(1) // cut of first '&'
            ;
        },

        productsAction: function () {
            var params = Array.prototype.join.call(arguments, '/');
            params = $.shop.helper.parseParams(params || '');
            this.list_hash = this.hash;
            this.list_params = params;

            if ($.product_list !== undefined && $.product_list.fixed_blocks !== undefined) {
                if ($.product_list.fixed_blocks.set) {
                    $.product_list.fixed_blocks.set.unsetFixed();
                }
                if ($.product_list.fixed_blocks.category) {
                    $.product_list.fixed_blocks.category.unsetFixed();
                }
            }
            this.load('?module=products&' + this.buildProductsUrlComponent(params), this.checkAlerts);
        },

        checkAlerts: function () {
            var alerts = $.storage.get('shop/alerts');
            $('.s-alert').each(function () {
                if ($.inArray($(this).data('alert'), alerts) == -1) {
                    $(this).show();
                }
            });
        },

        productAction: function (id, action, tab) {
            if (typeof tab !== 'undefined' && tab === 'force-old') {
                tab = 'main/'+ tab;
            }
            var path = Array.prototype.slice.call(arguments).filter(function (chunk) {
                return chunk.length;
            }).join('/');
            $.shop.trace('$.products.productAction', [path, arguments]);
            var url = '?module=product';
            if (id) {
                url += '&id=' + id;
            }
            if (typeof($.product) != 'undefined') {
                $.product.dispatch(path);
            } else {
                this.load(url, function (response) {
                    $.product.dispatch(path);
                });
            }
        },

        productTermination: function () {
            if (typeof($.product) != 'undefined') {
                $.product.termination();
            }
        },

        reviewsAction: function(params_string, callback) {
            var request_uri = "?module=reviews" + (params_string ? "&" + params_string : "");

            this.load(request_uri);
        },

        stocksAction: function (order) {
            var sort = '';
            if (!order || order === 'desc' || order === 'asc') {
                sort = 'count';
            } else {
                order = '' + (order || '');
                var m = order.match(/stock_count_(\d*)_*(desc|asc)*/);
                if (m) {
                    sort = 'stock_count_' + m[1];
                    order = m[2] === 'desc' ? 'desc' : 'asc';
                }
            }
            if (!$('#s-stocks-container').length) {
                this.load('?module=stocks' + (order ? '&order=' + order : '') + (sort ? '&sort=' + sort : '') + '&tab=balance');
            } else {
                $('#s-stocks-container').trigger('load', [ 'balance', (order ? 'order=' + order : '')  + (sort ? '&sort=' + sort : '') ]);
            }
        },

        stockslogAction: function (params) {
            if (!$('#s-stocks-container').length) {
                this.load('?module=stocks' + (params ? '&' + params : '') + '&tab=log');
            } else {
                $('#s-stocks-container').trigger('load', ['log', (params ? params : '')]);
            }
        },

        /*transfersAction: function (params) {
            this.load('?module=stocks' + (params ? '&' + params : '') + '&tab=transfers');
            //this.load('?module=transferList' + (params ? '&' + params : ''));
        },*/

        servicesAction: function (id) {
            this.load('?module=services' + (id ? '&id=' + id : ''), function () {
                $("#s-content").addClass('bordered-left');
                if (typeof $.products.afterServicesAction === 'function') {
                    $.products.afterServicesAction();
                }
            });
        },

        tagsHandler:function () {
                $('#s-products-all-tags').autocomplete({
                    source: '?module=product&action=tagsAutocomplete&type=search',
                    minLength: 1,
                    delay: 300,
                    select: function(event, ui) {
                        $.wa.setHash('#/products/tag=' + ui.item.value);
                        return false;
                    }
                });
        },

        initCollapsible: function () {
            var key_prefix = 'shop/products/';
            var collapse = function (el, not_save) {
                $(el).removeClass('darr').addClass('rarr');
                target(el).hide();
                if (!not_save) {
                    $.storage.set(key_prefix + el.id + '/collapse', 1);
                    if (not_save !== false) {
                        var id = el.id.replace(/\-handler$/, '');
                        var $container = $(el).parents('div.block:first').find('#' + id + ':first');
                        if ($container.length) {
                            var url = $container.data('on-collapse-url');
                            if (url) {
                                $.get(url);
                            }
                        }
                    }
                }
            };
            var expand = function (el) {
                target(el).show();
                var $el = $(el);
                $el.removeClass('rarr').addClass('darr');
                $.storage.del(key_prefix + el.id + '/collapse');
                var id = el.id.replace(/\-handler$/, '');
                var $placeholder = $el.parents('div.block:first').find('#' + id + '-placeholder:first');
                if ($placeholder.length) {
                    var $counter = $(el).parents('div.block:first').find('.count:first');
                    $counter.find('i.icon16.loading').remove()
                    $counter.find('i.icon16').hide();
                    $counter.prepend('<i class="icon16 loading"></i>');

                    $.get($placeholder.data('url'), function (result) {
                        $placeholder.replaceWith($(result));
                        $counter.find('i.icon16.loading').remove();
                        $counter.find('i.icon16').show();
                        $placeholder.remove();
                    });
                } else {
                    var $container = $(el).parents('div.block:first').find('#' + id + ':first');
                    if ($container.length) {
                        var url = $container.data('on-expand-url');
                        if (url) {
                            $.get(url);
                        }
                    }
                }
            };
            var target = function (el) {
                var parent = $(el).parent();
                return parent.is('li') ? parent.find('ul:first') : parent.next();
            };
            $(".collapse-handler").die('click').live('click',function () {
                var self = $(this);
                if (self.hasClass('darr')) {
                    collapse(this);
                } else {
                    expand(this);
                }
            }).each(function () {
                var key = key_prefix + this.id + '/collapse';
                var force = $(this).hasClass('rarr');
                if ($.storage.get(key) || force) {
                    collapse(this, !force);
                }
            });
            $(".collapse-handler").closest('.heading').off('click').on('click', function(e) {
                $collapse_handler = $(this).find('.collapse-handler');
                if (!$collapse_handler.is(e.target)) {
                    $collapse_handler.click();
                }
            });
        },

        initSearch: function () {
            var search = function () {
                // encodeURIComponent ?..
                $.wa.setHash('#/products/'+($.products.list_params && $.products.list_params.view ? 'view='+$.products.list_params.view+'&' : '')+'text='+encodeURIComponent(this.value));
            };

            var $products_search = $('#s-products-search');

            // HTML5 search input search-event isn't supported
            $products_search.unbind('keydown').bind('keydown', function (event) {
                if (event.keyCode == 13) { // 'Enter'
                    search.call(this);

                    var self = $(this);
                    self.autocomplete("close");
                    // sometimes "close" has done earlier than list has shown
                    setTimeout(function () {
                        self.autocomplete("close");
                    }, 300);

                    return false;
                }
            });

            $products_search.unbind('search').bind('search', function () {
                search.call(this);
                return false;
            });

            $products_search.autocomplete({
                source: '?action=autocomplete',
                minLength: 3,
                delay: 300,
                select: function (event, ui) {
                    $products_search.val('');
                    $.wa.setHash('#/product/' + ui.item.id);
                    return false;
                }
            });
        },

        jsonPost: function (url, data, success, error) {
            $.shop.jsonPost(url, data, success, error);
        },

        _iframePost: function (form, success, error) {
            var form_id = form.attr('id');
            var iframe_id = form_id + '-iframe';

            // add hidden iframe if need
            if (!$('#' + iframe_id).length) {
                form.after("<iframe id=" + iframe_id + " name=" + iframe_id + " style='display:none;'></iframe>");
            }

            var iframe = $('#' + iframe_id);
            form.attr('target', iframe_id);

            iframe.one('load', function () {
                var r;
                try {
                    var data = $(this).contents().find('body').html();
                    r = $.parseJSON(data);
                } catch (e) {
                    error(data);
                    return;
                }
                if (r.status == 'ok') {
                    success(r);
                } else {
                    error(r);
                }
            });
        }

    };
})(jQuery);
;
editClick:(function ($) {
    $.product = {
        options: {
            'duration': 200,
            'container_selector': '#shop-productprofile',
            'message_selector': '#product-save-message',
            'form_selector': '#s-product-save',
            'update_delay': 100
        },
        message: {
            'submit': '<i class="icon16 loading"></i>',
            'success': '<i class="icon16 yes"></i>',
            'error': '<i class="icon16 no"></i>'
        },

        path: {
            'id': null, /* new or int product ID */
            'mode': null, /* null|profile|edit */
            'tab': null,
            'tail': null,
            'raw': null,
            'params': {}
            /* main */
        },
        ajax: {
            random: null,
            target: null,
            link: null,
            save: false,
            cached: {}

        },
        data: {
            'main': {}
        },

        $edit_forms: $(),

        getData: function (section, name) {
            return (this.data[section] || {})[name];
        },
        setData: function (section, name, value) {
            this.data[section] = this.data[section] || {};
            this.data[section][name] = value;
        },

        /** this tabs will be saved on blur action on it's **/
        standalone_tabs: [
            'images',
            'services',
            'pages',
            'reviews'
        ],

        /**
         * Setup options
         *
         * @param {object} options
         * @param {String} tab
         */
        init: function (options, tab) {
            this.setOptions(options, tab);
            this.initFeatureDate();
            this.deleteDivider();
        },

        setOptions: function (options, tab) {
            if (tab) {
                this[tab + '_options'] = $.extend(
                    this[tab + '_options'] || {}, options || {}
                );
            } else {
                this.options = $.extend(this.options, options || {});
            }
            this.options.sidebar_width = this.options.sidebar_width || 250;
        },

        get: function (type) {
            if (this.options[type + '_selector']) {
                return $(this.options[type + '_selector']);
            } else {
                throw new exception('');
            }
        },

        deleteDivider: function () {
            $('.js-delete-divider').click(function () {
                $(this).parent().find('input').val('');
                $(this).parent().hide();
                $.product.helper.updateSubmitButton(true);
            })
        },

        initFeatureDate: function() {
            var $wrapper = $($.product.options.form_selector).find('.js-datepicker-wrapper'),
                $input = $wrapper.find(".js-datepicker");

            $input.each(function() {
                $(this).datepicker({
                    altField: $(this).siblings('.js-datepicker-hidden'),
                    altFormat: "yy-mm-dd",
                    changeMonth: true,
                    changeYear: true,
                    onSelect: checkDate
                })

                .on('blur', checkDate)

                .on("keydown keypress keyup", function(event) {
                    if ( event.which === 13 ) {
                        event.preventDefault();
                    }
                });
            });

            $wrapper.on("click", ".js-focus-on-field", function () {
                $input.focus();
            });

            function checkDate() {
                var $input = $(this),
                    $altField = $input.siblings('.js-datepicker-hidden');

                if (!$input.val()) {
                    $altField.val('');
                }

                try {
                    $.datepicker.parseDate($.datepicker._defaults.dateFormat, $input.val());
                    $input.data('last-correct-value', $input.val());
                    $altField.data('last-correct-value', $altField.val());
                } catch(e) {
                    $input.val($input.data('last-correct-value') || '');
                    $altField.val($altField.data('last-correct-value') || '');
                }
            }
        },
        /**
         * @param {String} path
         * @return {{id:number,mode:string,tab:string,tail:string,raw:string,params:{}}}
         */
        parsePath: function (path) {
            path = path.replace(/^.*#\//, '').replace(/(^\/|\/$)/, '');

            var matches = path.split('/');
            var tail = matches.pop();
            var params = {};

            if (tail.match(/^[\w_\-]+=/)) {
                params = $.shop.helper.parseParams(tail);
            } else {
                matches.push(tail);
            }
            return {
                id: matches[0] || 'new',
                mode: matches[1] || 'profile',
                tab: matches[1] ? matches[2] || 'main' : false,
                tail: matches.slice(3).join('/') || '',
                raw: path,
                params: params
            };
        },

        /**
         *
         * @param {String} path
         */
        dispatch: function (path) {
            if (typeof (path) == 'string') {
                path = this.parsePath(path);
            }
            var queue = [];
            $.shop.trace('$.product.dispatch', [this.path, path, path.raw]);

            if (path.tab) {
                switch (path.tab) {
                    case "main":
                        $(document).trigger("wa_product_section_change", "product-general");
                        break;
                    case "descriptions":
                        $(document).trigger("wa_product_section_change", "product-seo");
                        break;
                    case "images":
                        $(document).trigger("wa_product_section_change", "product-media");
                        break;
                    case "features":
                        $(document).trigger("wa_product_section_change", "product-sku");
                        break;
                    case "services":
                        $(document).trigger("wa_product_section_change", "product-services");
                        break;
                    case "related":
                        $(document).trigger("wa_product_section_change", "product-related");
                        break;
                    case "pages":
                        $(document).trigger("wa_product_section_change", "product-pages");
                        break;
                    default:
                        $(document).trigger("wa_product_section_change", "product");
                        break;
                }
            } else {
                $(document).trigger("wa_product_section_change", "product");
            }

            if (!this.path.id) {
                var container = this.get('container');
                if (container.length) {
                    this.path.id = container.data('product-id');
                    queue.push('load');
                }
            }
            if (this.path.id != path.id) {
                if (this.path.id) {
                    queue.push('blur');

                }
                queue.push('load');

            } else {
                var tab = 'undefined';
                if (this.path.mode != path.mode) {
                    $.shop.trace('$.product.dispatch mode', this.path.mode + '->' + path.mode);
                    if (this.path.mode && this.path.tab) {
                        $.shop.trace('$.product.dispatch tabBlur', this.path.tab + '->' + path.tab);
                        tab = this.path.tab.substr(0, 1).toUpperCase() + this.path.tab.substr(1);
                        queue.push(this.path.mode + 'Tab' + tab + 'Blur');
                        queue.push(this.path.mode + 'TabBlur');
                        queue.push(this.path.mode + 'Blur');
                    } else {
                        queue.push('focus');
                    }
                    queue.push(path.mode + 'Init');
                    queue.push(path.mode + 'Focus');
                } else if (this.path.tab && (path.tab != this.path.tab)) {
                    $.shop.trace('$.product.dispatch tabBlur', this.path.tab + '->' + path.tab);
                    tab = this.path.tab.substr(0, 1).toUpperCase() + this.path.tab.substr(1);
                    queue.push(path.mode + 'Tab' + tab + 'Blur');
                    queue.push(path.mode + 'TabBlur');
                }
                queue.push(path.mode + 'Action');
                var loaded = this.tabIsLoaded(path);
                if (path.tab) {
                    tab = path.tab.substr(0, 1).toUpperCase() + path.tab.substr(1);
                }

                if (path.tab && (path.tab != this.path.tab)) {
                    $.shop.trace('$.product.dispatch tabFocus', this.path.tab + '->' + path.tab);

                    if (loaded) {
                        queue.push(path.mode + 'TabShow');
                        queue.push(path.mode + 'TabInit');
                        queue.push(path.mode + 'Tab' + tab + 'Init');
                        queue.push(path.mode + 'TabFocus');
                        queue.push(path.mode + 'Tab' + tab + 'Focus');
                    } else {
                        // Check if it need save
                        queue.push(path.mode + 'TabFocus');
                        var loader = path.mode + 'Tab' + tab + 'Load';
                        if (this.isCallable(loader)) {
                            queue.push(loader);
                        } else {
                            queue.push(path.mode + 'TabLoad');
                        }
                    }

                }
                if (path.tab && loaded) {
                    queue.push(path.mode + 'Tab' + tab + 'Action');
                }
            }
            for (var i = 0; i < queue.length; i++) {
                // standard convention: if method return false than stop bubble up
                if (this.call(queue[i], [path]) === false) {
                    return false;
                }
            }
        },

        termination: function () {
            var queue = [];
            if (this.path.mode && this.path.tab) {
                var tab = this.path.tab.substr(0, 1).toUpperCase() + this.path.tab.substr(1);
                queue.push(this.path.mode + 'Tab' + tab + 'Blur');
                queue.push(this.path.mode + 'TabBlur');
                queue.push(this.path.mode + 'Blur');
            }
            queue.push('blur');

            for (var i = 0; i < queue.length; i++) {
                this.call(queue[i], []);
            }
        },

        isCallable: function (name) {
            return (typeof (this[name]) == 'function');
        },
        tabIsLoaded: function (path) {
            var $tab = $('#s-product-edit-forms').find('.s-product-form.' + path.tab);
            return ($tab.length ? true : false);
        },

        call: function (name, args, callback) {
            var result = null;
            var callable = this.isCallable(name);
            args = args || [];
            $.shop.trace('$.product.call', [name, args, callable]);
            if (callable) {
                try {
                    result = this[name].apply(this, args);
                } catch (e) {
                    $.shop.error(
                        "Error at method $.product." + name +
                        ". Original message: " + e.message,
                        e
                    );
                }
            }
            return result;
        },
        load: function (path) {
            var $container = this.get('container');
            if (!$container.length || ($container.data('product-id') != path.id)) {
                var self = this;
                var url = '?module=product&id=' + path.id;
                if (path.hasOwnProperty('tail') && path.tail === 'force-old') {
                    url += '&force-old=1';
                }
                $.shop.trace('$.product.load product', url);
                $.products.load(url, function () {
                    self.dispatch(path);
                });
            }

            this.editTabMainData.sku_id = (path.id == 'new') ? -1 : 0;
            this.editTabMainData.stocks = {};
        },

        focus: function () {
            $('*').off('.product');
            this.helper.init();
            // var self = this;
            /**
             * @todo use generic error handler for ajax pages
             */
            // $.wa.errorHandler = function(xhr) {
            // if ($.product.ajax.target && xhr.responseText) {
            // $.shop.trace('errorHandler', self.ajax.target);
            // $.product.ajax.target.empty().append($(xhr.responseText).find(':not(style)'));
            // }
            // if ($.product.ajax.link) {
            // $.product.ajax.link.find('.s-product-edit-tab-status').html('<i class="icon10 exclamation"></i>');
            // }
            // $.product.ajax.target = null;
            // $.product.ajax.link = null;
            // $.shop.error('ajax error', xhr);
            // return false;
            // };
        },

        blur: function () {
            this.path.id = null;
            this.path.mode = null;
            this.path.tab = null;
            this.path.tail = null;
            $('*').off('.product');
            $('#mainmenu').find('.s-level2').show();
            $('#s-product-edit-menu, #s-product-edit-save-panel').hide();
            var duration = 'fast';

            $('#s-sidebar').show().animate({
                width: $.product.options.sidebar_width
            }, duration).queue(function () {
                $(this).dequeue();
            });
            $('#s-toolbar').show().animate({
                width: '200px'
            });
            $('#maincontent').animate({
                'margin-top': '84px'
            }, duration);
            $('#s-content').animate({
                'margin-left': $.product.options.sidebar_width
            }, duration);
        },

        saveData: function (mode, tab, callback) {
            var self = this;
            var form = self.get('form');
            var sku_type;

            var sku_type_input_type = 'radio';
            var sku_type_input = form.find('input[name="product[sku_type]"]:first');
            if (sku_type_input.is(':radio')) {
                sku_type = form.find('input[name="product[sku_type]"]:checked').val();
                sku_type_input = form.find('input[name="product[sku_type]"]');
            } else {
                sku_type_input_type = 'hidden';
                sku_type = form.find('input[name="product[sku_type]"]:not(:disabled)').val();
            }
            if (sku_type == '1') {
                var any_checked = $('#s-product-feature-superposition').find('input:checked:first').length;
                if (!any_checked) {
                    if (sku_type_input_type == 'radio') {
                        sku_type_input.filter('[value=0]').attr('checked', true);
                        $.product.onSkuTypeChange(0);
                        return false;
                    }
                }
            }

            if (self.ajax.save) {
                setTimeout(function () {
                    self.saveData(mode, tab, callback);
                }, 100);
                return false;
            }

            //XXX add preSave
            if (this.path.tab) {
                var save_method = 'editTab' + this.path.tab.substr(0, 1).toUpperCase() + this.path.tab.substr(1) + 'Save';
                if (this.call(save_method) === false) {
                    return false;
                }
            }
            self.ajax.save = true;

            if ($('#s-product-description-content').length) {
                $('#s-product-description-content').waEditor('sync');
            }

            // cut out all spaces for prices
            form.find('.s-price').find('input').each(function () {
                /** @this HTMLInputElement */
                this.value = this.value.replace(/\s+/g, '');
            });

            $.shop.trace('$.product.saveData(mode=' + mode + ', tab=' + tab + ')');

            var $tags_input = $('#product-tags_tag');
            if ($tags_input.length) {
                var e = jQuery.Event("keypress", {
                    which: 13
                });
                $tags_input.trigger(e);
            }
            /* disable not changed data */
            $(form).find(':input[name^="product\\["]:not(:disabled)').each(function () {
                var type = $(this).attr('type');
                if ((type != 'text') && (type != 'textarea')) {
                    return true;
                }

                if (this.defaultValue == this.value) {
                    $(this).attr('disabled', true).addClass('js-ajax-disabled');
                } else if ($(this).hasClass('js-ajax-disabled')) {
                    $(this).removeAttr('disabled').removeClass('js-ajax-disabled');
                }
            });

            this.refresh('submit');

            this.clearValidateErrors();

            $.ajax({
                'url': $(form).attr('action'),
                'data': $(form).serializeArray(),
                'dataType': 'json',
                'type': 'post',
                success: function (response) {

                    if (response.status == 'fail') {
                        var is_shown = self.showValidateErrors(response.errors);
                        if (!is_shown) {
                            self.refresh('error', response.errors);
                        }
                    } else if (response.data.redirect) {
                        $.shop.trace('$.product.saveData redirect', response.data.redirect);
                        //$.product.helper.options.defaultChangedStatus = false;
                        window.location.href = response.data.redirect;
                    } else {
                        //$.product.helper.options.defaultChangedStatus = false;
                        self.refresh('success', response.data.message || '');
                        $.shop.trace('$.product.saveData updateData', [mode, tab]);
                        self.updateData(response.data, mode, tab);
                        if (callback && (typeof (callback) == 'function')) {
                            callback();
                        }

                        if (self.path.tab) {
                            var post_save_method = 'editTab' + self.path.tab.substr(0, 1).toUpperCase() + self.path.tab.substr(1) + 'Saved';
                            if (self.call(post_save_method) === false) {
                                return false;
                            }
                        }

                        $.each(self.standalone_tabs, function (index, tab) {
                            if (self.path.tab != tab) {
                                var post_save_method = 'editTab' + tab.substr(0, 1).toUpperCase() + tab.substr(1) + 'Saved';
                                self.call(post_save_method);
                            }
                        });
                    }
                    self.ajax.save = false;
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    self.ajax.save = false;
                    self.refresh('error', textStatus);
                }
            });

            return false;
            // force reload data
            // this.container.data('product-id',this.path.id + '-edited');
        },

        showValidateErrors: function(all_errors) {
            all_errors = all_errors || {};
            if ($.isEmptyObject(all_errors)) {
                return false;
            }

            var that = this,
                is_shown = false,
                $edit_forms = that.$edit_forms;

            // special case for GTIN feature validation
            if (all_errors.features && all_errors.features.gtin) {
                var $features_form = $edit_forms.find('.s-product-form.features'),
                    input_name = 'product[features][gtin]',
                    $input = $features_form.find('input[name="' + input_name + '"]');

                if ($input.length) {
                    $input.addClass('error js-validate-error-input');
                    var $error = $('<div class="errormsg js-validate-error-msg"></div>').text(all_errors.features.gtin);
                    $input.after($error);
                    is_shown = true;

                    that.refresh('error', $_('Cannot save the value of the “GTIN” feature for this product.'));
                }
            }

            // special case for gtin validation for each skus
            if (all_errors.skus) {

                var $skus_table = $edit_forms.find('.s-product-form.main table.s-product-skus tbody');

                $.each(all_errors.skus, function(sku_id, errors) {
                    if (sku_id === 'status') {
                        is_shown = true;
                        that.refresh('error', $_(errors));
                    } else if (errors.features && errors.features.gtin) {
                        var $sku_settings = $skus_table.find('.js-sku-settings[data-id="' + sku_id + '"]'),
                            input_name = 'skus[' + sku_id + '][features][gtin]',
                            $input = $sku_settings.find('input[name="' + input_name + '"]');

                        if ($input.length) {
                            $input.addClass('error js-validate-error-input');
                            var $error = $('<div class="errormsg js-validate-error-msg"></div>').text(errors.features.gtin);
                            $input.after($error);
                            is_shown = true;

                            that.refresh('error', $_('Cannot save the value of the “GTIN” feature for an SKU of this product.'));
                        }
                    }
                });
            }

            return is_shown;
        },

        clearValidateErrors: function() {
            var that = this,
                $edit_forms = that.$edit_forms,
                $skus_table = $edit_forms.find('.s-product-form.main table.s-product-skus tbody'),
                $features_form = $edit_forms.find('.s-product-form.features');

            $skus_table.find('.js-validate-error-input').removeClass('error');
            $skus_table.find('.js-validate-error-msg').remove();

            $features_form.find('.js-validate-error-input').removeClass('error');
            $features_form.find('.js-validate-error-msg').remove();
        },

        updateData: function (data, mode, tab) {

            $.shop.trace('$.product.updateData(' + mode + ',' + tab + ')', data);
            var tab_content = $('#s-product-edit-forms .s-product-form.main');

            var old_id = this.path.id;

            if (!this.path.id || (this.path.id == 'new')) {
                this.path.id = data.id;
                $(this.options.container_selector).data('product-id', this.path.id);
                var hash = '/product/' + this.path.id + '/';
                if ((mode !== null) && (mode = mode || this.path.mode || 'profile')) {
                    if (mode != 'profile') {
                        hash += mode + '/';
                    }
                    if ((tab !== null) && (tab = tab || this.path.tab || '')) {
                        if (tab.toLowerCase() != 'main') {
                            hash += tab + '/';
                        }
                    }
                }
                $.shop.trace('update location.hash=' + hash);
                var pattern = /#\/product\/new\//;
                var replace = '#/product/' + this.path.id + '/';
                $('#shop-productprofile, #s-product-edit-menu, #s-product-edit-forms, #s-product-profile-page').find('[href*="#/product/new/"]').each(
                    function () {
                        $(this).attr('href', $(this).attr('href').replace(pattern, replace));
                    });
                $('#s-product-edit-forms').find(':input[name="product\\[id\\]"]').val(this.path.id);

                window.location.hash = hash;
            } else if (this.path.id != data.id) {
                $.shop.error('Abnormal product ID change', [this.path.id, data]);
            }

            var h1 = $('#shop-productprofile h1');
            h1.find('.s-product-name:first').text(data.name);
            h1.find('.s-product-id').show().text('id: ' + data.id);

            var $new_edit_button = h1.find('.s-new-product-editor-button');
            if ($new_edit_button.length) {
                var href = $new_edit_button.attr("href");
                if (href.indexOf("/new/") >= 0) {
                    $new_edit_button
                        .attr("data-href", $new_edit_button.attr("data-href").replace("/new/", "/" + data.id + "/"))
                        .attr("href", href.replace("/new/", "/" + data.id + "/"));
                }
                $new_edit_button.show();
            }

            document.title = data.name + $.product.options.title_suffix;

            $('#product-stock-stat').html(tmpl('template-product-stock-stat', data.raw));

            var $container = tab_content.find(':input[name="product\\[type_id\\]"]').parents('.value');
            $container.data('type', data.type_id);

            if (!$.isEmptyObject(data.frontend_urls)) {
                // update frontend url widget in product edit page
                var frontend_url = $('#s-product-frontend-url');
                frontend_url.text(data.url);

                var frontend_url_input = $('#s-product-frontend-url-input');
                frontend_url_input.val(data.url);

                frontend_url.trigger('readable');

                var frontend_url_link = frontend_url.parent();
                frontend_url_link.attr('href', data.frontend_urls[0].url);

                frontend_url_link.find('span:first').text(data.frontend_urls[0].base);

                // update other frontend url
                frontend_url.closest('div.value').find('.s-product-frontend-url').each(function (i) {
                    if (data.frontend_urls[i + 1]) {
                        $(this).attr('href', data.frontend_urls[i + 1].url).text(data.frontend_urls[i + 1].url);
                    }
                });

                $('.s-product-frontend-url-not-empty').show();
                $('.s-product-frontend-url-empty').hide();

                // update fronted url in product profile page
                var html = '';
                for (var i = 0, len = data.frontend_urls.length; i < len; i += 1) {
                    html += ' <span class="s-product-frontend-url-not-empty">' +
                        '<a href="' + data.frontend_urls[i].url + '" target="_blank">' + data.frontend_urls[i].url + '</a><i class="icon10 new-window"></i>' +
                        '</span> ';
                }
                if (html) {
                    $('#s-product-frontend-links').find('.s-product-frontend-url-not-empty').wrapAll('<div></div>').closest('div').replaceWith(html);
                }


            } else {
                $('.s-product-frontend-url-not-empty').hide();
                $('.s-product-frontend-url-empty').show();
            }

            /*
             * $($.product.options.form_selector).on('change.product, keyup.product', ':input', function(e) {
             * self.onChange($(this).parents('div.s-product-form')); });
             */
            // XXX extract it into editTab%Tab%Update(data)
            this.editTabMainUpdate(
                data.raw || {},
                data.features_selectable_strings,
                old_id
            );

            // category select items
            tab_content.find('select.s-product-categories').each(function () {
                var item = $(this);
                var parent = item.parent();
                var val = item.val();
                if (val == 'select' || val == '---') {
                    var categories = $('#s-product-edit-forms .s-product-form.main select.s-product-categories');
                    if (categories.length > 1) {
                        parent.remove();
                    } else {
                        parent.find('.s-product-delete-from-category').hide();
                    }
                } else if (val == 'create') {
                    var prev_val = parent.find('input.val').val();
                    if (prev_val == '0') {
                        var categories = $('#s-product-edit-forms .s-product-form.main select.s-product-categories');
                        if (categories.length > 1) {
                            parent.remove();
                        } else {
                            item.val(prev_val); // restore previous value
                            item.show().attr('disabled', false);
                            parent.find('input.val').attr('disabled', true);
                            parent.find('.s-new-category').hide();
                            parent.find('.s-product-delete-from-category').hide();
                        }
                    } else {
                        item.val(prev_val); // restore previous value
                        item.show().attr('disabled', false);
                        parent.find('input.val').attr('disabled', true);
                        parent.find('.s-new-category').hide();
                        parent.find('.s-product-delete-from-category').show();
                    }
                }

                // storefront links
                var category_id = parseInt(val, 10);
                if (!$.isEmptyObject(data.storefront_map[category_id])) {
                    var html = '';
                    var storefront_links = data.storefront_map[category_id];
                    for (var i = 0; i < storefront_links.length; i += 1) {
                        html += '<a class="hint" href="' + storefront_links[i] + '" target="_blank">' + storefront_links[i] + '</a> ';
                    }
                    parent.find('.s-storefront-map').html(html);
                }

            });

            $('#s-product-categories').html(tmpl('template-product-categories', {
                categories: data.categories || []
            }));

            $('#s-product-tags').html(tmpl('template-product-tags', {
                tags: data.tags || []
            }));

            $('#s-product-save table.s-product-skus > tbody > tr').each(function () {
                var sku_id = $(this).data('id');
                $(this).find('td.s-stock .s-product-stock-icon').each(function () {
                    var stock_id = $(this).data('stock');
                    if (data.raw && data.raw.skus && data.raw.skus[sku_id] && data.raw.skus[sku_id].stock_icon[stock_id]) {
                        $(this).html(data.raw.skus[sku_id].stock_icon[stock_id]);
                    }
                });
            });

            // skus setttings
            tab_content.find('tr.js-sku-settings').each(function () {
                var self = $(this);
                var sku_id = self.attr('data-id');
                var sku = data.raw.skus[sku_id];
                if (sku) {
                    if (sku.file_name !== undefined && !sku.file_name) {
                        self.find('.s-sku-attachment').hide();
                        self.find('.fileupload').show();
                    }
                }
            });

            this.helper.checkChanges(this.get('form'), true);
            /*, data.raw || {}*/
            $('#s-product-edit-menu li a i.icon10.status-yellow-tiny').remove();

            this.helper.updateSubmitButton(false);

            // if sku type is flat (0) blank selectable features info
            if (data.raw.sku_type == '0') {
                var feature_superposition = $('#s-product-feature-superposition');

                // blank values
                feature_superposition.find('input[type=checkbox]').attr('checked', false);

                // blank features
                var feature_li = feature_superposition.find('ul.features li');
                feature_li.find('.count').text('');
                feature_li.find('i').removeClass('status-blue-tiny status-gray-tiny').addClass('status-gray-tiny');

                // blank counter
                var counters = feature_superposition.find('.superposition-count');
                counters.find('.options').text('');
                counters.find('.skus').text('');

                // hidden link
                //tab_content.find('.s-product-skus .all-skus').text('').hide();
            }

            $('#s-product-meta-title').attr('placeholder', data.default_meta_title);
            $('#s-product-meta-keywords').attr('placeholder', data.default_meta_keywords);
            $('#s-product-meta-description').attr('placeholder', data.default_meta_description);

            $('#s-product-profile-tabs .s-tab-block[data-tab="stock-logs"]').trigger('refresh');

            this.setData('main', 'category_name', data.category_name);

            // TODO update name/description/etc fields
        },

        refresh: function (status, message) {
            /* enable previos disabled inputs */
            $(this.options.form_selector).find(':input[name^="product\\["]:disabled.js-ajax-disabled').each(function () {
                $(this).removeAttr('disabled').removeClass('js-ajax-disabled');
            });

            var $container = $(this.options.message_selector);
            $container.removeClass('errormsg successmsg status').empty().show();

            if (this.timer) {
                clearTimeout(this.timer);
            }
            var timeout = null;
            $container.append(this.message[status] || '');
            switch (status) {
                case 'submit': {
                    $container.addClass('status');
                    break;
                }
                case 'error': {
                    $container.addClass('errormsg');
                    for (var i = 0; i < message.length; i++) {
                        $container.append(message[i][0]);
                    }
                    timeout = 20000;
                    break;
                }
                case 'success': {
                    if (message) {
                        $container.addClass('successmsg').append(message);
                    }
                    timeout = 3000;
                    this.helper.updateSubmitButton(false);
                    break;
                }
            }
            if (timeout) {
                this.timer = setTimeout(function () {
                    $container.removeClass('errormsg successmsg status').empty().show();
                }, timeout);
            }
        },

        editTabLoad: function (path, force) {
            var self = this;
            var $tab = $('#s-product-edit-forms .s-product-form.' + path.tab);
            if ((force === true) || (!$tab.length && (path.id == 'new'))) {
                $.shop.trace('product.editTabLoad: create', [path.tab + ' — create', path, force]);
                this.saveData(this.path.mode, path.tab, function () {
                    if (path.tab) {
                        self.call(path);
                    }
                });
            } else {
                this.editTabLoadContent(path);
            }
        },

        editTabLoadContent: function (path, post) {
            var self = this;
            path = path || this.path;
            var url = '?module=product&action=' + path.tab + '&id=' + path.id;
            if (path.tail) {
                url += '&param[]=' + path.tail.split('/').join('&param[]=');
            }
            var r = Math.random();
            this.ajax.random = r;
            var $tab = $('#s-product-edit-forms .s-product-form.' + path.tab);
            if ($tab.length) {
                $tab.remove();
            }
            $('#s-product-edit-forms > form').append(tmpl('template-productprofile-tab', {
                id: path.tab
            }));
            $tab = $('#s-product-edit-forms .s-product-form.' + path.tab);
            this.ajax.target = $tab;
            this.ajax.link = $('#s-product-edit-menu li.' + path.tab);
            $.shop.trace('$.product.editTabLoadContent', [path, url, path.params]);
            if (path.params && post) {
                var type = typeof (path.params);
                switch (type) {
                    case 'String':
                        url += path.params;
                        break;
                    case 'Array':
                        url += path.params.serialize();
                        break;
                    default:
                        $.shop.error('unexpected type ' + type, path.params);
                }
            }
            $.ajax({
                url: url,
                type: post ? 'POST' : 'GET',
                data: post ? (post || {}) : (path.params || {}),
                success: function (data, textStatus) {
                    $.shop.trace('$.product.loadTab status=' + textStatus);
                    if (self.ajax.random != r) {
                        // too late: user clicked something else.
                        return;
                    }
                    $tab.empty().append(data);
                    self.ajax.target = null;
                    self.ajax.link = null;
                    var hash = '#/product/' + path.id + '/edit/';
                    if (path.tab) {
                        hash += path.tab + '/';
                    }
                    if (path.tail) {
                        hash += path.tail + '/';
                    }
                    if (path.params) {
                        if (!$.isEmptyObject(path.params)) {
                            var ar = [];
                            for (var k in path.params) {
                                if (path.params.hasOwnProperty(k)) {
                                    ar.push(k + '=' + path.params[k]);
                                }
                            }
                            hash += ar.join('&');
                        }
                    }
                    window.location.hash = hash;
                    self.dispatch(path);
                }
            });

        },

        editTabInit: function (path) {
            var that = this;

            $('html, body').animate({
                scrollTop: 0
            }, 200);
            $('#shop-productprofile').find('.s-product-name').removeClass('editable');

            that.$edit_forms = $('#s-product-edit-forms');
        },

        editTabFocus: function (path) {
            var $tab_link = $('#s-product-edit-menu li.' + path.tab);
            $tab_link.addClass('selected');
            this.refresh();
        },

        editTabBlur: function (path) {
            if (!path) {
                return;
            }

            $('#s-product-edit-forms .s-product-form').hide();
            $('#s-product-edit-menu li.selected').removeClass('selected');

            var tab = path.tab;

            if (this.standalone_tabs.indexOf(tab) !== -1) {
                var self = this;
                this.helper.checkChanges(this.get('form'), true, function (changed) {
                    if (changed) {
                        $.shop.trace('$.product.editTabBlur: save standalone tab [' + tab + ']', self.standalone_tabs);
                        self.saveData(self.path.mode, tab, function () {
                            if (tab) {
                                self.call(self.path);
                            }
                        });
                    }
                });
            }

            this.path.tab = null;
            this.path.tail = null;
        },

        editTabShow: function (path) {
            var $tab = $('#s-product-edit-forms .s-product-form.' + path.tab);
            if ($tab.length) {
                $tab.show();
                $.shop.trace('$.product.showTab', path);
                this.path.tab = path.tab;
            } else {
                $.shop.error('$.product.showTab', path);
            }
        },

        editClick: function ($el) {
            // #/product/{$product.id}/edit/stock/{$sku_id}/
            var args = $el.attr('href').replace(/.*#\/product\/(\d+|new)\/edit\//, '').replace(/\/$/, '').split('/');
            var params = [];
            var action;

            if (args.length) {
                $.shop.trace('$.product.editClick', args);
                var actionNameChunk, callable, actionName = 'editTab';
                while (actionNameChunk = args.shift()) {
                    actionName += actionNameChunk.substr(0, 1).toUpperCase() + actionNameChunk.substr(1);
                    callable = (typeof (this[actionName]) == 'function');
                    $.shop.trace('$.settings.featuresClick try', [actionName, callable, args]);
                    if (callable === true) {
                        action = actionName;
                        params = args.slice(0);
                    }
                }
            }
            if (action) {
                $.shop.trace('$.product.editClick', [action, params]);
                if (!$el.hasClass('js-confirm') || confirm($el.attr('title') || 'Are you sure?')) {
                    params.push($el);
                    try {
                        this[action].apply(this, params);
                    } catch (e) {
                        $.shop.error(
                            "Error at method $.product." + action +
                            ". Original message: " + e.message,
                            e
                        );
                    }
                }
            } else {
                $.shop.error('Not found js handler for link', [action, $el]);
            }
            return false;
        },

        switchSubMenu: function (menu) {
            menu = menu || 'default';
            $('#mainmenu .s-submenu > *').hide();
            $('#mainmenu .s-submenu .s-submenu-' + menu).show();
        },

        profileFocus: function () {
            var duration = this.options.duration;
            var self = this;

            // back to product profile view
            $('#s-product-edit-menu, #s-product-edit-save-panel').hide();
            self.switchSubMenu();

            $('#s-sidebar').show().animate({
                width: $.product.options.sidebar_width
            });

            $('#s-toolbar').show().animate({
                width: '200px'
            }, duration).queue(function () {
                $(this).dequeue();
                $('#s-product-edit-forms').hide();
                $('#s-product-profile-page, h1 .s-product-edit-link, #mainmenu .s-level2, #s-product-frontend-links').show();
                self.get('container').find('.back').attr('href', '#/' + $.products.list_hash);
            });
            $('#maincontent').animate({
                'margin-top': '84px'
            }, duration);
            $('#s-content').animate({
                'margin-left': $.product.options.sidebar_width
            }, duration);

            $('#shop-productprofile').off('click.edit-product', 'a.js-action').on('click.edit-product', 'a.js-action', function () {
                return self.editClick($(this));
            });

        },

        profileAction: function () {
            this.path.mode = 'profile';
        },

        disableSkus: function (virtual, disabled) {
            var target = $(this.options.form_selector).find('.s-sku-list');
            if (virtual) {
                if (disabled) {
                    target.find('.s-sku-virtual').hide().find(':input').attr('disabled', true);
                } else {
                    target.find('.s-sku-virtual').show().find(':input').attr('disabled', false);
                }
            } else {
                if (disabled) {
                    target.hide();
                } else {
                    target.show();
                }
                target.find(':input').attr('disabled', disabled);
            }
        },

        /**
         *
         * @param {Number} type_id
         * @param {object=} data
         */
        skuTypeFeaturesSelectableLoad: function (type_id, data) {
            var self = this;
            // ajax for features selectable
            var url = '?module=product&action=featuresSelectable&id=' + this.path.id;
            var post = {
                type_id: type_id,
                sku_type: 1
            };

            $('#s-product-feature-superposition-field-group').load(url, post, function () {
                //TODO XXX update base price & currency from data
                var $this = self.featureSelectableInit();
                if (data) {
                    if (data.base_price_selectable) {
                        $this.find(':input[name="product[base_price_selectable]"]').val(data.base_price_selectable);
                    }
                    if (data.currency) {
                        $this.find('select.s-product-currency').val(data.currency);
                    }
                }
                self.onSkuTypeEnabled(type_id);
            });
        },

        onSkuTypeEnabled: function (type_id) {
            var $features = $('#s-product-feature-superposition-field-group');


            if (type_id) {
                $features.data('type', type_id);
            }
            $features.show(400, function () {
                // show warning message on change selling mode (case:  if not select the parameters that will be available to customers)
                $.product.checkFeatureValidation();
            });

            $features.find('input').attr('disabled', false);
            if ($.product.path.id == 'new') {
                $.product.disableSkus(false, true);
            } else {
                $.product.disableSkus(true, false);
            }

            //copy prices if target are empty
            var fields = ['compare_price', 'purchase_price'];
            var $target, $source;
            for (var i = 0; i < fields.length; i++) {
                $target = $features.find(':input[name="product[' + fields[i] + '_selectable]"]:first');
                if ($target.length && !parseInt($target.val())) {
                    $source = $(':input[name^="skus"][name$="[' + fields[i] + ']"]:first');
                    if ($source.length) {
                        $target.val($source.val());
                    }
                }
            }
        },

        checkFeatureValidation: function () {
            var $features = $('#s-product-feature-superposition-field-group'),
                $features_li = $features.find('ul.features li'),
                $message_block = $("#product-save-message");

            if (!$features_li.find('.status-blue-tiny').length) {
                $message_block.addClass('errormsg').empty().html($_('Select parameters to be available to customers for ordering this product in the storefront.')).show();
            } else {
                $message_block.removeClass('errormsg').empty();
            }

        },

        onSkuTypeChange: function (sku_type) {
            var $features = $('#s-product-feature-superposition-field-group');
            $.shop.trace('onSkuTypeChange', {sku_type: sku_type});

            // selectable features case
            if (sku_type == '1') {

                var product_type = $(this.options.form_selector + ' :input[name="product[type_id]"]').val();
                if ($features.data('type') != product_type) {
                    var data = {
                        base_price_selectable: $features.find(':input[name="product[base_price_selectable]"]').val(),
                        currency: $features.find('select.s-product-currency').val()
                    };
                    if (!parseInt(data.base_price_selectable)) {
                        data.base_price_selectable = $(':input[name^="skus"][name$="[price]"]:first').val();
                    }
                    $.product.skuTypeFeaturesSelectableLoad(product_type, data);
                } else {
                    $.product.onSkuTypeEnabled();
                }

                // flat sku case
            } else {
                $features.hide(400, function () {
                    //empty warning message on change selling mode
                    $("#product-save-message").removeClass('errormsg').empty();
                });
                $features.find('input').attr('disabled', true);
                //product_skus.find('.alist .all-skus').hide();

                var $scope = $(this.options.form_selector).find('.s-product-skus');

                if ($.product.path.id == 'new') {
                    $.product.disableSkus(false, false);
                } else {

                    var $product_skus = $scope.find('tbody');
                    $.product.disableSkus(true, true);
                    // empty skus - emulate add new sku
                    if (!$product_skus.find('>tr:not(.s-sku-virtual)').length) {
                        $.product.editTabMainSkuAdd();
                        // make default
                        $product_skus.find('>tr:not(.s-sku-virtual):first').find('input[name="product[sku_id]"]').attr('checked', true);
                    }
                }
                $scope.closest('.field').find('.name').show();
            }
        },

        // feature superposition (selectable features) handlers
        featureSelectableInit: function () {
            var form = $(this.options.form_selector);
            var $this = $('#s-product-feature-superposition');
            var product_skus = form.find('.s-product-skus');
            var base_price_selectable = form.find(':input[name="product[base_price_selectable]"]');
            var self = this;

            // change salling mode (sku type)

            // click to feature item
            $this.on('click', 'ul.features>li', function () {
                // make selected
                var li = $(this);
                li.parent().find('li.selected').removeClass('selected');
                li.addClass('selected');

                // show proper div with values
                var feature_id = li.attr('data-feature-id');
                var feature_values = $this.find('.feature-values[data-feature-id=' + feature_id + ']');
                $this.find('.feature-values').hide();
                feature_values.show();

                return false;
            });

            // click to feature value checkbox
            $this.on('change', 'ul.values>li input', function () {

                var $self = $(this);
                var li = $self.parents('li:first');
                var ul = li.parent();
                var count = ul.find('>li input:checked').length;

                // update count
                var feature_li = $this.find('ul.features li.selected');
                feature_li.find('.count').text(count || '');

                // update icon
                var icon_class = count ? 'status-blue-tiny' : 'status-gray-tiny';
                feature_li.find('i').removeClass('status-blue-tiny status-gray-tiny').addClass(icon_class);

                self.featureSelectableCount($this);

                // Show warning message (case:  if not select the parameters that will be available to customers)
                $.product.checkFeatureValidation();
            });


            $.shop.changeListener(base_price_selectable, function () {
                product_skus.find('.s-sku-virtual .s-price input').val($(this).val());
            });

            // if at least one input of sku is changed this sku turn into not virtual
            $.shop.changeListener(product_skus, function () {
                var self = $(this);
                // ignore defulat sku ID
                if (self.attr('name') == 'product[sku_id]') {
                    return;
                }
                var sku_tr = self.parents('tr:first');
                if (!sku_tr.length) {
                    return;
                }
                var sku_id = parseInt(sku_tr.attr('data-id'), 10);
                if (!sku_id) {
                    return;
                }
                if (sku_tr.hasClass('js-sku-settings')) {
                    sku_tr = product_skus.find('tr[data-id=' + sku_id + ']:first');
                    if (!sku_tr.length) {
                        return;
                    }
                }
                sku_tr.find('input.s-input-virtual').val(0);
                sku_tr.removeClass('s-sku-virtual');

                $('#s-product-view').find('tr[data-id=' + sku_id + ']').removeClass('s-sku-virtual');
            }, 'input, textarea');

            $this.find('i.status-blue-tiny:first').parents('li').trigger('click');
            return $this;
        },

        // update superposition count texts helper
        featureSelectableCount: function ($this) {
            if (!$this) {
                $this = $('#s-product-feature-superposition');
            }
            var factors = [];
            var $features_tab = $('#s-product-edit-forms .s-product-form.features');
            $this.find('ul.features>li').each(function () {
                var $li = $(this);
                var cnt = parseInt($li.find('.count').text(), 10);
                if (cnt) {
                    factors.push(cnt);
                }

                if ($features_tab.length) {
                    var $values_container = $features_tab.find('div[data-code="' + $li.data('feature-code') + '"] div.value');

                    if (cnt) {
                        var id = $li.data('feature-id');
                        var $selected_values = $this.find('div.feature-values[data-feature-id="' + id + '"] ul.values input:checked');

                        $values_container.each(function () {
                            var $value = $(this);

                            var checked = $selected_values.filter('[value="' + $value.data('value-id') + '"]').length;
                            var $checkbox = $value.find('input:checkbox');
                            $checkbox.attr('checked', checked ? 'checked' : null).attr('disabled', 'disabled');
                            if (checked) {
                                $value.show();
                            } else {
                                $value.hide();
                            }
                        });
                    } else {
                        $values_container.show();
                        $values_container.find('input:checkbox').each(function (index, el) {
                            el.checked = el.defaultChecked;
                            el.disabled = null;
                        });
                        //TODO fire event?
                    }
                }
            });

            var counter = $this.find('.superposition-count');
            if (factors.length) {
                counter.find('.options').text($_('Parameters: %s').replace('%s', factors.join(' x ')));

                var count = 1;
                for (var i = 0, n = factors.length; i < n; i += 1) {
                    count *= factors[i];
                }
                counter.find('.skus').html(
                    '<span class="highlighted">' + $_('SKUs: %d').replace('%d', count) + '</span>'
                );

            } else {
                counter.find('.options').text('');
                counter.find('.skus').html('');
            }
        },

        editInit: function () {

            // Ctrl+S hotkey handler
            $('#s-product-edit-forms').unbind('keydown.product').bind('keydown.product', function (e) {
                if ($(e.target).is(':input') && (e.ctrlKey || e.metaKey) && e.keyCode == 83) {
                    $('#s-product-save-button').click();
                    return false;
                }
            });

            $.shop.makeFlexibleInput('s-product-meta-title');

            // check rights
            if (!this.options.edit_rights) {
                window.location.hash = '#/product/' + this.path.id + '/';
                return false;
            }
            var $form = $(this.options.form_selector);
            $form.bind('submit.product', function (e) {
                return $.product.saveData('profile', null);
            });
            $form.on('change.product, keyup.product', 'div.s-product-form:not(.ajax) :input', function (e) {
                $.product.helper.onChange($(this).parents('div.s-product-form'));
            });
            $form.on('change.product, keyup.product, keypress.product', ':input[name="product[name]"]', function (e) {
                $.product.helper.onNameChange($(this), false, $.product.options.update_delay || 500);
            });
            $.shop.changeListener($form, ':input[name="product[url]"]', function () {
                var $elem = $(this);
                $.getJSON('?module=product&action=checkUrlInUse', {id: $.product.path.id, url: $elem.val() || ''},
                    function (r) {
                        $.product.informAboutUrlInUse(r.status === 'ok' && r.data.url_in_use);
                    }
                );
            });

            var product_tags = $('#product-tags');
            if (!product_tags.data('tags_input_init')) {
                product_tags.tagsInput({
                    autocomplete_url: '?module=product&action=tagsAutocomplete',
                    height: 120,
                    onChange: function () {
                        $.product.updateMetaFields();
                    },
                    defaultText: ''
                }).data('tags_input_init', true);

                $('#s-product-popular-tags').off('click.product', 'a').on('click.product', 'a', function () {
                        var name = $(this).text();
                        product_tags.removeTag(name);
                        product_tags.addTag(name);
                    }
                );

            }

            $form.on('change.product', '.s-product-currency', function () {
                var $self = $(this), val = $self.val();
                $form.find('.s-product-currency').val(val);
                $form.find('.s-product-currency-readonly').text(val);
                $('#s-product-currency-code').val(val);
            });

            $form.on('change.product', ':input[name="product\[type_id\]"]', function () {
                return $.product.editTabMainTypeChange($(this));
            });

            $form.on('change', 'select[name="product[status]"]', function () {
                if ($(this).val() == '1') {
                    $(this).prev().removeClass('no-bw').addClass('yes');
                    $('.s-product-status-text').hide();
                } else {
                    $(this).prev().removeClass('yes').addClass('no-bw');
                    $('.s-product-status-text').show();
                }
            });

            $form.on('change', 'input[name="product[sku_type]"]', function () {
                $.product.onSkuTypeChange(this.value);
            }).change();

            $.product.featureSelectableInit();

            //Refresh the "Parameter Selector" after the page loads
            $.product.editTabMainTypeChange($('.js-shop-product-set-type'));
        },

        informAboutUrlInUse: function (url_in_use) {
            if (url_in_use) {
                $('#s-product-url-in-use-block').show().find('.s-text').html(url_in_use);
            } else {
                $('#s-product-url-in-use-block').hide();
            }
        },

        editFocus: function () {
            var duration = this.options.duration;
            var self = this;
            $('h1 .s-product-edit-link, #mainmenu .s-level2, #s-product-frontend-links').hide();

            $('#s-sidebar, #s-toolbar').animate({
                width: 0
            }, duration).queue(function () {
                $(this).hide();
                $(this).dequeue();
                // show product navigation menu
                $('#s-product-edit-menu, #s-product-edit-forms, #s-product-edit-save-panel').show();
                if (self.path.id != 'new') {
                    self.get('container').find('.back').attr('href', '#/product/' + self.path.id + '/');
                } else {
                    self.get('container').find('.back').attr('href', '#/' + $.products.list_hash);
                }
                // hide profile page and show editing forms
                $('#s-product-profile-page').hide();
                self.switchSubMenu('productprofile');
            });

            // stretch product page for the entire width
            $('#maincontent').animate({
                'margin-top': '40px'
            }, duration);
            $('#s-content').animate({
                'margin-left': 0
            }, duration);

            $('#shop-productprofile').off('click.edit-product', 'a.js-action').on('click.edit-product', 'a.js-action', function () {
                return self.editClick($(this));
            });
        },

        editBlur: function () {
            this.path.tab = false;
            this.path.mode = false;
            $($.product.options.form_selector).off('submit.product');
            $(this.options.form_selector).off('change.product, keyup.product');
            $('#s-product-edit-forms').off('click.edit-product');
        },

        /**
         *
         * @param {{id:number,mode:{String},tab:{String}}} path
         */
        editAction: function (path) {
            this.path.mode = path.mode;
        },

        /**
         *
         * @method edit%Tab%Init after first loading or force reloaded content
         * @method edit%Tab%Focus Tab get focus
         * @method edit%Tab%Action Tab interactions (provide extra params into tab)
         * @method edit%Tab%Blur Tab leave focus
         * @method edit%Tab%* Tab "namespace" for internal purpose functions
         *
         */

        editTabMainData: {
            'sku_id': -1,
            'stocks': {}
        },

        editTabMainInit: function (path) {
            $('#s-product-type').each(function () {
                if ($(this).parent().get(0) != document.body) {
                    $('body > #s-product-type').remove();
                    $(document.body).append($(this));
                }
            });

            var main_tab_content = $('#s-product-edit-forms .s-product-form.main');
            var self = this;
            var $table = main_tab_content.find('table.s-product-skus:last > tbody');
            $table.sortable({
                distance: 5,
                helper: 'original',
                items: '> tr',
                handle: 'i.sort',
                opacity: 0.75,
                tolerance: 'pointer',
                update: function (event, ui) {
                    var id = parseInt($(ui.item).data('id'), 10);
                    var after_id = $(ui.item).prev().data('id');
                    if (after_id === undefined) {
                        after_id = 0;
                    } else {
                        after_id = parseInt(after_id, 10);
                    }
                    self.editTabMainSkuSort(id, after_id, $(this));
                    var $s = $table.find('> tr.js-sku-settings[data-id="' + id + '"]');
                    if ($s.length) {
                        var $settings = $s.detach();
                        $.shop.trace('detach', $settings);
                        if ($settings) {
                            $.shop.trace('detach', $table.find('> tr[data-id="' + id + '"]').length);
                            $table.find('> tr[data-id="' + id + '"]:first').after($settings);
                        }
                    }
                },
                start: function (event, ui) {
                    $table.find('> tr.js-sku-settings').hide();
                },
                stop: function (event, ui) {
                    $table.find('> tr.js-sku-settings').show();
                }
            });

            var frontend_url = $('#s-product-frontend-url');
            frontend_url.inlineEditable({
                editLink: '#s-product-frontend-url-edit-link',
                editOnItself: false,
                minSize: {
                    height: 15,
                    width: 100
                },
                makeReadableBy: [],
                beforeMakeEditable: function (input) {
                    var self = $(this);
                    var parent = self.closest('span.s-product-frontend-url-not-empty');
                    var slash = parent.find('span.slash');
                    var new_window = parent.find('i.new-window');
                    $(input).after(slash);
                    new_window.hide();

                    parent.find('a.s-frontend-base-url').hide()
                    parent.find('span.s-frontend-base-url').show();
                },
                beforeBackReadable: function (input, data) {
                    var self = $(this);
                    var parent = self.closest('span.s-product-frontend-url-not-empty');
                    var slash = parent.find('span.slash');
                    var new_window = parent.find('i.new-window');
                    new_window.show();

                    parent.find('span.s-frontend-base-url').hide();
                    parent.find('a.s-frontend-base-url').show().append(slash);
                }
            });
            if (!parseInt(path.id, 10)) {
                frontend_url.trigger('editable');
            }

            // select last static category on create new product
            if (path.id == 'new') {
                if ($.product_list && $.isArray($.product_list.collection_hash)) {
                    if ($.product_list.collection_hash[0] == 'category') {
                        main_tab_content.find('select.s-product-categories').val(
                            $.product_list.collection_hash[1]
                        );
                    } else if ($.product_list.collection_hash[0] == 'set') {
                        main_tab_content.find('.add-set-button').click().closest('.field').find('select:first').val($.product_list.collection_hash[1]);
                    }
                }
            }

            main_tab_content.off('change.product', 'select.s-product-categories').on('change.product', 'select.s-product-categories', function (e) {
                var self = $(this);
                var val = self.val();
                var parent = self.parent();
                var del_button = parent.find('.s-product-delete-from-category');

                var category_id = parseInt(val, 10) || 0;
                if (!category_id) {
                    del_button.hide();
                } else {
                    del_button.show();
                }

                // create new category functionality
                if (val == 'create') {
                    parent.find('.s-new-category').show();
                    parent.find('input.val').attr('disabled', false);
                    self.hide().attr('disabled', true).addClass('js-ignore-change');
                } else {
                    parent.find('input.val').val(category_id);
                }
            });

            // Enter-press handler when foucus on input
            main_tab_content.off('keydown.product', 'input.new-category').on('keydown.product', 'input.new-category', function (e) {
                if (e.keyCode == 13) {
                    $(this).parent().find('input[type=button]').click();
                    return false;
                }
            });

            // saving new category
            main_tab_content.off('click.product', '.s-new-category input[type=button]').on('click.product', '.s-new-category input[type=button]', function (e) {
                var self = $(this).parent();
                var parent = self.parent();
                var input = self.find('input[name=new_category]');
                var value = input.val();
                $.shop.jsonPost('?module=category&action=save&category_id=0&parent_id=0', {
                    name: value
                }, function (r) {
                    var select = parent.find('select');
                    var place = select.find('option.separator:first').show();
                    $.when(place.after('<option class="category" value="' + r.data.id + '">' + r.data.name + '</option>')).then(function () {
                        select.find('option:first').text($_('Please select a category'));
                        select.val(r.data.id).attr('disabled', false).show().removeClass('js-ignore-change');
                        self.find('input.val').val(r.data.id).attr('disabled', true);
                        self.hide();
                        parent.find('.s-product-delete-from-category').show();
                        input.val('');
                        $.product.helper.onTabChanged('main', {'saving new category': true});
                        //XXX fix it using defaultSeleted
                        $('#s-category-list>ul').trigger('add', [r.data, 'category']);
                    });
                });
            });

            // delete category
            main_tab_content.off('click.product', '.s-product-delete-from-category').on('click.product', '.s-product-delete-from-category',
                function () {
                    var self = $(this);
                    var parent = self.parent('div');
                    var select = parent.find('select');

                    if (select.length) {
                        var categories = $('#s-product-edit-forms .s-product-form.main select.s-product-categories');
                        if (categories.length > 2) {
                            select.attr('disabled', true);
                            var deleted = parent.parents('div.field:first').find('input[name="product\[categories\.deleted\]"]');
                            if (parseInt(select.val()) > 0) {
                                var deleted_list = deleted.val().split(',');
                                deleted_list.push(select.val());
                                deleted_list.sort();
                                deleted.val(deleted_list.join(','));
                                $.product.helper.onChange($.product.get('form').find('div.main:first'));
                            }
                            parent.remove();
                        } else {
                            select.val('selected').attr('disabled', false);
                            parent.find('input.val').val(0).attr('disabled', true).parent().hide();
                            parent.find('.s-storefront-map').html('');
                            parent.find('.s-product-delete-from-category').hide();
                        }
                    } else {
                        var deleted = parent.parents('div.field:first').find('input[name="product\[categories\.deleted\]"]');
                        select = self.parents('.value:first').find(':input:first');
                        if (parseInt(select.val()) > 0) {
                            var deleted_list = deleted.val().split(',');
                            deleted_list.push(select.val());
                            deleted_list.sort();
                            deleted.val(deleted_list.join(','));
                            $.product.helper.onChange($.product.get('form').find('div.main:first'));
                        }
                        self.parents('.value:first').remove();
                    }
                    return false;
                }
            );
        },
        editTabMainAction: function (path) {
            var selector = false;
            var name = null;
            if (path && path.params && path.params.focus) {
                name = path.params.name || '';
                if (!name.length) {
                    if (path.params.sku) {
                        name = 'product[skus][' + parseInt(path.params.sku, 10) + ']';
                        if (path.params.focus) {
                            name += '[' + path.params.focus + ']';
                        }
                        if (path.params.focus == 'stock') {
                            name += '[' + (parseInt(path.params.stock, 10) || 0) + ']';
                        }
                    }
                }
                selector = ':input[name$="' + name.replace(/(\[|\]|\|\-)/g, '\\$1') + '"]:first';
            } else if (path && path.id == 'new') {
                selector = ':input[name$="\[name\]"]:first';
            }
            if (selector) {
                $.shop.trace('$.product.editTabMainFocus', [name, $(selector).length]);
                setTimeout(function () {
                    $(selector).focus();
                    window.location.hash = '#/product/' + path.raw.replace(/\/focus=.*$/, '/');
                }, 100);
            }
        },
        editTabMainBlur: function () {
        },
        editTabMainSave: function () {
            if (this.call('editTabMainSkuEproductSave') === false) {
                return false;
            }
        },

        helper: {
            options: {
                tab_changed: '<i class="icon10 status-yellow-tiny"></i>',
                defaultChangedStatus: false
            },

            data: {
                url_helper: {
                    url: '',
                    name: '',
                    timer: null
                }
            },
            init: function () {
                this.data.url_helper = {
                    url: '',
                    name: '',
                    timer: null
                };
            },
            onTabChanged: function (tab, changed) {
                $.shop.trace('$.product.onTabChanged id=' + tab + ' changed=' + !!changed, changed);
                $('#s-product-edit-menu li.' + tab + ' .s-product-edit-tab-status').html(changed ? this.options.tab_changed : '');
                if (changed) {
                    this.updateSubmitButton(true);
                }
            },

            /**
             * Get current product type id
             *
             * @param {} type
             * @return {}
             */
            type: function (type) {
                return parseInt(type, 10) || parseInt($('#s-product-edit-forms .s-product-form.main :input[name="product\\[type_id\\]"]').val(), 10) || 0;
            },

            onNameChange: function (element, animate, delay) {
                if (this.data.url_helper.timer) {
                    clearTimeout(this.data.url_helper.timer);
                }
                var target = $($.product.options.form_selector).find(':input[name="product\\[url\\]"]');
                var parent = target.parent();
                if (($.product.path.id && ($.product.path.id != 'new')) || (target.val() != this.data.url_helper.url)) {
                    $.shop.trace('$.product.onNameChange stop ' + this.data.url_helper.url + ' != ' + target.val());
                    $($.product.options.form_selector).off('.product', ':input[name="product\\[name\\]"]');
                    parent.find('.js-url-helper').hide();
                } else {
                    if (animate) {
                        if (!parent.find('.js-url-helper').length) {
                            parent.append('<i class="icon16 loading js-url-helper"></i>');
                        } else {
                            parent.find('.js-url-helper').show();
                        }
                    }
                    var self = this;
                    this.data.url_helper.timer = setTimeout(function () {
                        self.urlHelper(element, target, delay);
                    }, delay || 500);

                }
            },

            onChange: function (container) {
                var id = this.getContainerId(container);
                var self = this;
                this.checkChanges(
                    container.parents('form'),
                    false,
                    function (changed) {

                        /*Update submit button*/
                        self.updateSubmitButton(changed);

                        if (changed) {
                            self.checkChanges(container, false, function (changed) {
                                self.onTabChanged(id, changed);
                            });
                        } else {
                            self.onTabChanged(id, changed);
                        }
                    }
                );
            },
            urlHelper: function (element, target) {
                if (this.data.url_helper.timer) {
                    clearTimeout(this.data.url_helper.timer);
                }
                var data = {'name': $(element).val()};
                $.shop.trace('$.product.urlHelper ', data);
                if (data.url != this.data.url_helper.name) {
                    var self = this;
                    this.data.url_helper.url = data.url;
                    $.getJSON('?module=product&action=suggestUrl', data, function (r) {
                        if (r.status === 'ok') {

                            // save current url, for track is it was changed
                            self.data.url_helper.url = r.data.url;
                            target.val(r.data.url);
                            target.parent().find('.js-url-helper').hide();

                            // inform about url in use by show message or hide it
                            $.product.informAboutUrlInUse(r.data.in_use);
                        }
                    });
                } else {
                    target.parent().find('.js-url-helper').hide();
                }
            },
            getValueByName: function (data, name) {
                var value = data;
                var chunk, chunks = name.replace(/\]/, '').split('[');
                while (chunk = chunks.shift()) {
                    if (value[name] !== undefined) {
                        value = value[name];
                    } else {
                        value = '';
                        break;
                    }
                }
                $.shop.trace('$.product.helper.getValueByName', [value, name, data]);
                return value;
            },

            checkChangesStack: {},

            /**
             *
             * @param {jQuery} $container
             * @param {Boolean} update
             */
            checkChanges: function ($container, update, onChange) {
                var id = $container.attr('id');
                if (this.checkChangesStack[id]) {
                    clearTimeout(this.checkChangesStack[id]);
                    this.checkChangesStack[id] = null;
                }
                var self = this;
                this.checkChangesStack[id] = setTimeout(function () {
                    var changed = self.checkChangesDelayed($container, update);
                    $.shop.trace('$.product.helper.checkChanges[' + id + ']', [$container, update, changed, onChange ? 'callback' : 'none']);
                    if (onChange) {
                        onChange(changed);
                    }
                }, update ? 50 : 500);
            },
            checkChangesDelayed: function ($container, update) {
                /**
                 * @todo add update relataed text tags
                 * @todo extract it into separate plugin
                 */
                var changed = this.options.defaultChangedStatus;
                var self = this;
                var selector = ':input:not(.js-ignore-change)';
                if ($container.hasClass('s-product-form')) {
                    if ($container.hasClass('ajax')) {
                        return false;
                    }
                } else if (!$container.hasClass('s-product-form-chunk')) {
                    selector = '.s-product-form:not(.ajax) ' + selector;
                }
                $container.find(selector).each(function () {
                    /** @this HTMLInputElement */
                    var $this = $(this);
                    var type = ($this.attr('type') || this.tagName).toLowerCase();
                    switch (type) {
                        case 'input':
                        case 'text':
                        case 'textarea':
                            if ($this.hasClass('ace_text-input')) {
                                break;
                            }
                            if (this.defaultValue != this.value) {
                                changed = true;
                                if (update) {
                                    this.defaultValue = this.value;
                                    self.updateInput(this.name, this.value, type == 'textarea');
                                }
                            }
                            break;
                        case 'radio':
                        case 'checkbox':
                            if (this.defaultChecked != this.checked) {
                                changed = true;
                                if (update) {
                                    this.defaultChecked = this.checked;
                                }
                            }
                            break;
                        case 'select':
                            if (this.length) {
                                $(this).find('option').each(function () {
                                    if (this.defaultSelected != this.selected) {
                                        changed = true;
                                        if (update) {
                                            this.defaultSelected = this.selected;
                                        }
                                    }
                                });
                            }
                            break;
                        case 'file':
                            if (this.value) {
                                changed = true;
                                if (update) {
                                    this.value = null;
                                }
                            }
                            break;
                        case 'reset':
                        case 'button':
                        case 'submit':
                            // ignore it
                            break;
                        case 'hidden':
                            if ($this.hasClass('js-check-change') && ($this.attr('data-value') !== undefined)) {
                                defaultValue = $this.attr('data-value');
                                if (this.disabled) {
                                    if (update) {
                                        var name_selector = $.shop.helper.escape(this.name);
                                        var $value = $container.find(':input[name="' + name_selector + '"]:enabled');
                                        if ($value.length) {
                                            $this.attr('data-value', $value.val());
                                        }
                                    }
                                } else if (defaultValue != this.value) {
                                    changed = true;
                                    if (update) {
                                        $this.attr('data-value', this.value);
                                    }
                                }
                            }
                            break;
                        default:
                            $.shop.error('$.product.checkChangesDelayed unsupported type ' + type, [type, this]);
                            break;
                    }
                    if (!update && changed) {
                        $.shop.trace('$.product.helper.checkChangesDelayed', [this, changed, this.defaultValue, this.value]);
                        changed = $this;
                    }
                    return update || !changed;
                });
                return changed;
            },

            getContainerId: function (container) {
                var c = ($(container).attr('class') || '').split(' ');
                var id = false;
                for (var i in c) {
                    if (c[i] != 's-product-form') {
                        id = c[i];
                        break;
                    }
                }
                return id;
            },
            updateInput: function (name, value, html, id) {
                if (name) {
                    var selector = '.s-' + name.replace(/\[(.+?)\]/g, '-$1') + '-input';
                    $.shop.trace('update field: ' + name + ' ' + selector, value);
                    var el = $(selector);
                    if (el.is('input,textarea')) {
                        el.val(value);
                    } else if (html) {
                        if (name === "product[summary]") {
                            el.text(value);     // escaped
                        } else {
                            el.html(value);     // not escaped
                        }
                    } else {
                        el.text(value);
                    }
                    if (id) {
                        var input_name = $(selector).attr('name');
                        input_name = input_name.replaceAll(/\[-[\d]+\]/, '[' + id + ']');
                        $.shop.trace('$.product.helper.updateInput name', [input_name]);
                    }
                }
            },
            updateSubmitButton: function (changed) {
                $('#s-product-edit-save-panel :submit')
                    .removeClass(changed ? 'green' : 'yellow')
                    .addClass(changed ? 'yellow' : 'green')
                ;
            },
            count: function (obj) {
                var size = 0;
                for (var key in obj) {
                    if (obj.hasOwnProperty(key))
                        size++;
                }
                return size;
            }
        },

        /**
         * @param {Number} count
         * @param {Boolean?} use_focus
         * */
        multiSkus: function (count, use_focus) {
            use_focus = (typeof use_focus === "boolean" ? use_focus : true);

            var table = $('#s-product-edit-forms .s-product-form.main table.s-product-skus:first');
            if (count > 1) {
                table.find('thead tr th.s-sku-sort').show();
                table.find('.s-name,.s-sku-sort').show('slow');
                table.find('.delete').parent('a').show();
                if (use_focus) {
                    if (count === 2) {
                        table.find('> tbody:first > tr:first .s-name :input').focus();
                    } else {
                        table.find('> tbody:first > tr:last .s-name :input').focus();
                    }
                }
            } else {
                table.find('thead tr th.s-sku-sort').hide();
                table.find('.s-name,.s-sku-sort').hide();
                table.find('.delete').parent('a').hide();
                //Reduce the width of the article field (case in one sku in product)
                table.find('.s-sku-big').removeClass('s-sku-big');
            }
        },

        editTabMainSkuAdd: function () {
            try {
                var $table = $('#s-product-edit-forms .s-product-form.main table.s-product-skus:first');
                var $skus = $table.find('tbody:first');

                var price = 0;
                var price_loc = '0';     // price in light of l18n (with ',' or '.')

                $skus.find(':input[name$="\[price\]"]').each(function () {
                    var self = $(this);
                    var v = self.val() ? self.val().replace(',', '.') : 0;
                    var p = parseFloat(v);
                    if (p > price) {
                        price = p;
                        price_loc = self.val() || '0';
                    }
                });
                var purchase_price = 0;
                $skus.find(':input[name$="\[purchase_price\]"]').each(function () {
                    purchase_price = Math.max(purchase_price, parseFloat($(this).val()) || 0);
                });

                $.product.multiSkus($skus.find('tr:not(.js-sku-settings)').length + 1);

                //$skus.parents('table').find('tr:hidden').show();
                var sku = {
                    'id': --$.product.editTabMainData.sku_id,
                    'product_id': $('input:hidden[name="product[id]"]').val() || 'new',
                    'sku': '',
                    'available': 1,
                    'status': 1,
                    'name': '',
                    'price': '' + price,
                    'price_loc': price_loc,
                    'purchase_price': '' + purchase_price,
                    'stock_icon': {
                        0: "<i class='icon10 status-green' ></i>"
                    },
                    'stock': {},
                    'count': null
                };
                $.shop.trace('$.product.editTabMainSkuAdd', [$.product.editTabMainData.sku_id, sku]);

                $skus.append(tmpl('template-sku-edit', {
                    'sku_id': $.product.editTabMainData.sku_id,
                    'sku': sku,
                    'stocks': this.getData('main', 'stocks'),
                    'stock_ids': this.getData('main', 'stock_ids')
                }, true));
                $skus.find('.s-product-currency').trigger('change');

                //Increase the width of the article field
                $skus.find('td.s-sku').addClass('s-sku-big');

            } catch (e) {
                $.shop.error(e.message, e);
            }
            return false;
        },

        editTabMainSkuSort: function (id, after_id, $list) {
            try {
                $.post('?module=product&action=skuSort', {
                    product_id: this.path.id,
                    sku_id: id,
                    after_id: after_id
                }, function (response) {
                    $.shop.trace('$.product.editTabMainSkuSort result', response);
                    if (response.error) {
                        $.shop.error('Error occurred while sorting product SKUs', 'error');
                        $list.sortable('cancel');
                    }
                }, function (response) {
                    $.shop.trace('$.product.editTabMainSkuSort cancel', {
                        'data': response
                    });
                    $list.sortable('cancel');
                    $.shop.error('Error occurred while sorting product SKUs', 'error');
                });
            } catch (e) {
                $.shop.error(e.message, e);
            }
            return false;
        },

        editTabMainProductDelete: function (el) {
            var showDialog = function () {
                $('#s-product-list-delete-products-dialog').waDialog({
                    disableButtonsOnSubmit: true,
                    onLoad: function () {
                        $(this).find('.dialog-buttons i.loading').hide();
                    },
                    onSubmit: function (d) {
                        $(this).find('.dialog-buttons i.loading').show();
                        $.shop.jsonPost('?module=products&action=deleteList', {
                            product_id: [$.product.path.id],
                            get_lists: 1
                        }, function (r) {
                            if ($.product_list) {
                                $('#s-sidebar').trigger('update', r.data.lists);
                            }
                            d.trigger('close');
                            window.location.hash = '#/products/';
                        });

                        return false;
                    }
                });
            };
            var d = $('#s-product-list-delete-products-dialog');
            var p = d.parent();
            if (!d.length) {
                p = $('<div></div>').appendTo('body');
            }
            p.load('?module=dialog&action=productsDelete', { product_id: [$.product.path.id] }, showDialog);
            return false;
        },

        /**
         *
         * @param {Number} sku_id
         * @param {jQuery} $el
         */
        editTabMainSkuDelete: function (sku_id, $el) {
            var $table = $('#s-product-edit-forms .s-product-form.main table.s-product-skus:first');
            var $skus = $table.find('tbody:first');

            var $sku = $el.parents('tbody').find('> tr[data-id="' + sku_id + '"]');
            var self = this;
            if (sku_id > 0) {
                var skus_count = $el.parents('tbody').find('tr[data-id]:not(.js-sku-settings):not([data-id^="-"])').length;
                var skus_total_count = $el.parents('tbody').find('tr[data-id]:not(.js-sku-settings)').length;
                if (skus_count > 1) {
                    $.ajax({
                        'url': '?module=product&action=skuDelete',
                        'data': {
                            'sku_id': sku_id,
                            'product_id': this.path.id
                        },
                        'dataType': 'json',
                        'type': 'post',
                        success: function (response) {
                            if (response.status == 'fail') {
                                self.refresh('error', response.errors);
                            } else if (response.data.redirect) {
                                window.location.href = response.data.redirect;
                            } else {
                                self.refresh('success', response.data.message || 'Success');
                                $sku.hide('normal', function () {
                                    $sku.remove();
                                    $('#s-product-view table.s-product-skus > tbody > tr[data-id="' + sku_id + '"]').remove();
                                    $.product.multiSkus($skus.find('tr:not(.js-sku-settings)').length, false);
                                });
                                $('#s-product-edit-forms .s-product-form.main').find('input[name=product\\[sku_id\\]][value=' + response.data.sku_id + ']')
                                    .attr('checked', true);
                            }
                        },
                        error: function (jqXHR, textStatus, errorThrown) {
                            self.refresh('error', textStatus);
                        }
                    });
                } else if (skus_total_count > 1) {
                    $sku.after('<input type="hidden" name="skus[' + sku_id + ']" value="%deleted%">');
                    $sku.hide('normal', function () {
                        $sku.remove();
                        $('#s-product-view table.s-product-skus > tbody >tr[data-id="' + sku_id + '"]').remove();
                        $.product.multiSkus($skus.find('tr:not(.js-sku-settings)').length, false);
                    });
                } else {
                    self.refresh('error', $_('A product must have at least one SKU.'));
                }

            } else {
                $sku.hide('normal', function () {
                    $sku.remove();
                    $('#s-product-view table.s-product-skus > tbody >tr[data-id="' + sku_id + '"]').remove();
                    $.product.multiSkus($skus.find('tr:not(.js-sku-settings)').length, false);
                });
            }
        },

        editTabMainCategoriesAdd: function () {
            var control = $('#s-product-edit-forms .s-product-form.main select.s-product-categories:last').parent('div');
            var clone = control.clone(false);
            clone.find('select').val('select').attr('disabled', false).show();
            clone.find('input.val').val(0).attr('disabled', true).parent().hide();
            clone.find('.s-product-delete-from-category').hide();
            clone.find('.s-storefront-map').html('');
            clone.show();
            control.after(clone);
        },

        editTabMainSkuStock: function (sku_id, $el) {
            var $container = $('#s-product-sku-' + sku_id);
            $container.hide().find(':input:enabled').attr('disabled', true);

            var $stock_container = $('#s-product-sku-stock-' + sku_id);
            $stock_container.show().find(':input:disabled').removeAttr('disabled');
            $stock_container.find(':input:first').val($container.find(':input:first').val());
        },

        editTabMainSkuSettings: function (sku_id, $el) {
            $el.hide();
            var $sku = $el.parents('tr');
            var sku = $sku.data();
            var self = this;
            $.when($sku.after(tmpl('template-sku-settings', {
                'sku_id': sku_id,
                'sku': sku
            }))).done(function () {
                var url = '?module=product&action=skuSettings';
                url += '&product_id=' + self.path.id;
                url += '&sku_id=' + sku_id;
                url += '&type_id=' + self.helper.type();
                var $target = $('#s-product-edit-forms .s-product-form.main tr.js-sku-settings[data-id="' + sku_id + '"] > td:first');
                $target.load(url, function () {
                    $sku.find(':input[name$="\[available\]"], :input[name$="\[status\]"]').remove();
                    $.product_images && $.product_images.options && $.product_images.options.enable_2x && $.fn.retina && $target.find('.s-product-image-crops img').retina();
                    $.product.initFeatureDate();

                    if (sku_id > 0) {
                        $.shop.trace('fileupload', [$target.find('.fileupload').length, typeof ($target.find('.fileupload').fileupload)]);
                        try {
                            var matches = document.cookie.match(new RegExp("(?:^|; )_csrf=([^;]*)"));
                            var csrf = matches ? decodeURIComponent(matches[1]) : '';

                            $target.find('.fileupload:first').fileupload({
                                dropZone: null,
                                url: '?module=product&action=skuEproductUpload',
                                acceptFileTypes: /(\.|\/)(gif|jpe?g|png)$/i,
                                start: function () {
                                    $target.find('.fileupload:first').hide();
                                },
                                progress: function (e, data) {
                                    $.shop.trace('fileupload progress', data);
                                    var $progress = $target.find('.js-progressbar-container');
                                    $progress.show();
                                    $progress.find('.progressbar-inner:first').css('width', Math.round((100 * data.loaded / data.total), 0) + '%');

                                },
                                done: function (e, data) {
                                    $.shop.trace('fileupload done', [data.result, typeof (data.result)]);
                                    var file = (data.result.files || []).shift();
                                    $target.find('.js-progressbar-container').hide();
                                    if (!file || file.error) {
                                        $target.find('.error-message').text(file.error).show();
                                        $target.find('.fileupload:first').addClass('error').show();
                                    } else {
                                        var attachment_block = $target.find('.s-sku-attachment');
                                        attachment_block.find('input.s-input-file-name').val(file.name);
                                        attachment_block.find('.s-file-name').text(file.name);
                                        attachment_block.find('.s-file-size').text(file.size);
                                        attachment_block.find('.s-file-description').val('');
                                        attachment_block.find('input[type=checkbox]').attr('checked', true);
                                        attachment_block.show();

                                        $sku.find('input.s-input-virtual').val(0);
                                        /*
                                         $target.find('.value .hint').text(file.name + ' ' + file.size);
                                         $target.find('.value :checkbox[name$="\[eproduct\]"]').attr('checked', true);
                                         */

                                    }

                                },
                                fail: function (e, data) {
                                    $.shop.trace('fileupload fail', [data.textStatus, data.errorThrown]);
                                    $target.find('.error-message').text('error').show().text(data.errorThrown || 'error');
                                    $target.find('.js-progressbar-container').hide();
                                    $target.find('.fileupload:first').addClass('error').show();
                                },
                                formData: {
                                    'product_id': $.product.path.id,
                                    'sku_id': sku_id,
                                    '_csrf': csrf
                                }
                            });
                        } catch (e) {
                            $.shop.error('Exception ' + e.message, e);
                        }
                    }
                });

            });
        },

        editTabMainSkuImageSelect: function (sku_id, image_id, $el) {
            var li = $el.parents('li:first');
            var selected = li.hasClass('selected');
            var parent = $el.parents('div.value:first');

            parent.find('ul.s-product-image-crops li.selected').removeClass('selected');
            if (!selected) {
                li.addClass('selected');
                parent.find('input[name$="\[image_id\]"]').val(image_id);
            } else {
                parent.find('input[name$="\[image_id\]"]').val(0);
            }

            $.shop.trace('$.product.editTabMainSkuImageSelect', [parent, parent.find(':input[name$="\[image_id\]"]')]);
            $.product.helper.onChange($el.parents('div.s-product-form'));
        },

        editTabMainSkuEproductSave: function (sku_id) {
            // upload eproduct files for existing skus
            var $sku_files = $('#s-product-edit-forms .s-product-form.main tr.js-sku-settings' + ((sku_id && sku_id > 0) ? ('[data-id="' + sku_id + '"]') : '')
                + ' > td:first .fileupload');
            $.shop.trace('$.product.editTabMainSkuEproductSave', $sku_files.length);
            if ($sku_files.length) {
                $sku_files.fileupload('start');
            }

        },

        editTabMainSkuEproductDelete: function (sku_id) {

        },

        editTabMainLinkEdit: function ($el) {
            return false;
        },

        /**
         * Show select input for change product type
         */
        editTabMainTypeSelect: function ($el) {
            var $container = $el.parents('form').find(':input[name="product\[type_id\]"]').parents('.value');
            if (this.path.tab == 'main') {
                $el.hide();
            } else {
                $container.find('.js-action').hide();
                window.location.hash = '/product/' + this.path.id + '/' + this.path.mode + '/';
            }
            $container.find('.js-type-name').hide();
            $container.find(':input').show().focus();
            setTimeout(function () {
                $container.find(':input').focus();
            }, 100);
        },

        editTabMainTypeChange: function ($el) {
            var $container = $el.parents('.value');
            var $type = $el.find(':selected:first');
            var type = $type.val();
            var sku_type = parseInt($type.data('sku-type'));
            var tab = 'features';
            var $tab_link;
            var href;
            $container.find('.js-type-icon').html($type.data('icon'));
            $container.find('.js-type-name').text($type.text());
            if (type != $container.data('type')) {
                var $tab = $('#s-product-edit-forms .s-product-form.' + tab);
                if ($tab.length && typeof (this.editTabFeaturesReload) != 'undefined') {
                    this.editTabFeaturesReload(type);
                } else {
                    $tab_link = $('#s-product-edit-menu > li.' + tab + ' > a');
                    href = '/features/' + type + '/';
                    $tab_link.attr('href', $tab_link.attr('href').replace(/\/features\/.*$/, href));
                }
            } else {
                $tab_link = $('#s-product-edit-menu > li.' + tab + ' > a');
                href = '/features/';
                $tab_link.attr('href', $tab_link.attr('href').replace(/\/features\/.*$/, href));
            }

            var $sku_type = $(this.options.form_selector + ' :input[name="product[sku_type]"]');
            $.shop.trace('sku_type', [sku_type, $sku_type]);
            $sku_type.filter('[value="1"]').trigger('disabled', [sku_type ? null : true]);

            var $sku_type_container = $sku_type.parents('ul');

            if (!sku_type) {
                $sku_type.filter('[value="0"]').trigger('checked', true).change();
                $sku_type_container.find('[data-sku-type="1"]').show();
            } else {
                $sku_type.filter(':checked').change();
                $sku_type_container.find('[data-sku-type="1"]').hide();
            }

        },

        editTabMainUpdate: function (data, features_selectable_strings, old_id) {
            var $skus = $('#s-product-edit-forms .s-product-form.main table.s-product-skus tbody');
            var $skus_view = $('#s-product-view table.s-product-skus tbody');
            $skus.find('tr[data-id^="\-"]').remove();
            $skus_view.find('tr[data-id^="\-"]').remove();
            $skus.parents('table').find('tr:hidden').show();

            // take into account sort field of skus
            var skus = [];
            for (var sku_id in data.skus || {}) {
                skus.push($.extend({id: sku_id}, data.skus[sku_id]));
            }
            skus = skus.sort(function (a, b) {
                return a.sort - b.sort;
            });

            var stocks = this.getData('main', 'stocks');
            var stock_ids = this.getData('main', 'stock_ids');

            var html = '';

            // render skus in edit tab
            tmpl.cache['template-sku-edit'] = tmpl(tmpl.load('template-sku-edit')); // reset template cache
            for (var i = 0, n = skus.length; i < n; i += 1) {
                html += tmpl('template-sku-edit', {
                    'sku_id': skus[i].id,
                    'sku': skus[i],
                    'hide_sort_column': n <= 1,
                    'stocks': stocks,
                    'stock_ids': stock_ids,
                    'checked': skus[i].id == data.sku_id
                });
            }
            $skus.html(html);
            $skus.find('select.s-product-currency').val(data.currency);
            $skus.parent().show();
            $skus.closest('.s-sku-list').show();
            this.multiSkus($skus.find('tr:not(.js-sku-settings)').length);

            // render skus in profile page
            html = '';
            for (var i = 0, n = skus.length; i < n; i += 1) {
                html += tmpl('template-sku', {
                    'sku_id': skus[i].id,
                    'sku': skus[i],
                    'stocks': stocks,
                    'stock_ids': stock_ids,
                    'runout': data.runout || {}
                });
            }
            $skus_view.html(html);

            if (!old_id || old_id == 'new') {
                $skus.parents('div.field-group:first').after(
                    $('#s-sku-type-field-group')
                );
            }

            if (features_selectable_strings) {
                var counter = $('#s-product-feature-superposition .superposition-count');
                counter.find('.options').text(features_selectable_strings.options);
                counter.find('.skus').html('<span class="highlighted">' + features_selectable_strings.skus + '</span>');
            }

            var pattern = /#\/product\/new\//;
            var replace = '#/product/' + data.id + '/';
            $('#s-product-edit-forms .s-product-form.main table.s-product-skus tbody, #s-product-view table.s-product-skus tbody')
                .find('[href*="#/product/new/"]').each(function () {
                $(this).attr('href', $(this).attr('href').replace(pattern, replace));
            });
        },

        editTabDescriptionsBlur: function () {
            var $description = $('#s-product-description-content');
            if ($description.length && $description.data('redactor')) {
                $description.waEditor('sync');
            }
        },
        editTabDescriptionsAction: function () {
            var $description = $('#s-product-description-content');

            if ($description.length && !$description.data('redactor')) {
                var $container = $description.parents('div.s-product-form');
                $description.waEditor({
                    lang: wa_lang,
                    modification_wysiwyg_msg: $description.data('modification-wysiwyg-msg'),
                    toolbarFixedTopOffset: $('#mainmenu').length ? $('#mainmenu').height() : 0,
                    imageUploadFields: $description.data('uploadFields'),
                    saveButton: $('#s-product-save-button'),
                    callbacks: {
                        change: function () {
                            if ($description.length) {
                                $description.waEditor('sync');
                                $.product.helper.onChange($container);
                            }
                        },
                        keydown: function (e) {
                            //Ctrl+S
                            if ((e.which == '115' || e.which == '83') && (e.ctrlKey || e.metaKey)) {
                                e.preventDefault();
                                $('#s-product-save-button').click();
                                return false;
                            } else {
                                $.product.helper.onChange($container);
                            }
                        }
                    }
                });
            }
        },

        profileInit: function () {

            if ($.product_list !== undefined && $.product_list.fixed_blocks !== undefined) {
                if ($.product_list.fixed_blocks.set) {
                    $.product_list.fixed_blocks.set.unsetFixed();
                }
                if ($.product_list.fixed_blocks.category) {
                    $.product_list.fixed_blocks.category.unsetFixed();
                }
            }

            if (this.options.edit_rights) {

                var $product_name = $('#shop-productprofile').find('.s-product-name');
                if (parseInt(this.path.id, 10)) {
                    $product_name.addClass('editable');
                } else {
                    $product_name.removeClass('editable');
                }

                var form = this.get('form');

                $product_name.inlineEditable({
                    minSize: {
                        width: 150
                    },
                    maxSize: {
                        width: 550
                    },
                    inputClass: 's-title-h1-edit',
                    beforeMakeEditable: function () {
                        $('#s-edit-product').hide();
                    },
                    afterBackReadable: function (input, data) {
                        $('#s-edit-product').show();
                        if (!data.changed) {
                            return false;
                        }
                        $.shop.jsonPost('?module=product&action=save&id=' + $.product.path.id, {
                            update: {
                                name: $(input).val()
                            }
                        }, function (r) {
                            var input_val = $(input).val();
                            document.title = input_val + $.product.options.title_suffix;
                            if (r.status === 'ok' && r.data) {
                                $('#s-product-meta-title').attr('placeholder', r.data.default_meta_title);
                            }
                            form.find('input[name="product[name]"]').val(input_val);
                        });
                    },
                    hold: function () {
                        return !$(this).hasClass('editable');
                    }
                });
            }
            var self = this;

            self.call('profileLazyInit', []);
        },
        profileLazyInit: function () {
            var $salesChart = $('#product-sales-plot');

            if (window.sales_data && sales_data.length) {
                if (!$salesChart.data('graph_rendered')) {

                    var renderChart = function () {
                        var is_rendered = ($salesChart.length && $salesChart.width() > 0);
                        if (is_rendered) {
                            //Render graph
                            showSalesGraph(sales_data, typeof cash_type == 'undefined' ? null : cash_type);
                            $salesChart.data('graph_rendered', 1);
                        } else {
                            setTimeout(renderChart, 1000);
                        }
                    };
                    renderChart();
                }

            } else {
                $salesChart.remove();
            }

            if (sku_plot_data && sku_plot_data.length && sku_plot_data[0] && sku_plot_data[0].length) {

                if (!$('#product-sku-plot').data('graph_rendered')) {
                    var data_array = [];
                    $.each(sku_plot_data[0], function (i, el) {
                        data_array.push({
                            label: el[0],
                            value: el[1]
                        });
                    });
                    showPieGraph(data_array, {
                        color_type: "products"
                    });
                    $('#product-sku-plot').data('graph_rendered', 1);
                }

            } else {
                $('#product-sku-plot').remove();
            }
        },
        updateMetaFields: function () {
            var product_name = $('.s-product-name-input').val();
            $('#s-product-meta-title').attr('placeholder', product_name);
            var keywords = [
                product_name
            ];

            var max = 5;
            $('.s-sku-name-input').each(function () {
                if (max <= 0) {
                    return false;
                }
                var val = $.trim($(this).val());
                if (val) {
                    keywords.push(val);
                }
                max -= 1;
            });

            var category_name = this.getData('main', 'category_name');
            if (category_name !== null) {
                keywords.push(category_name);
            }

            var all_tags = $('#product-tags').val().split(',');
            var max = 5;
            for (var i = 0; i < all_tags.length; i += 1) {
                if (max <= 0) {
                    break;
                }
                var val = $.trim(all_tags[i]);
                if (val) {
                    keywords.push(val);
                }
                max -= 1;
            }
            $('#s-product-meta-keywords').attr('placeholder', keywords.join(', '));
            $('#s-product-meta-description').attr('placeholder', $('#s-product-summary').val());
        },

        getId: function () {
            return this.path.id;
        }

    };
})(jQuery);
;
(function($) {
    $.fn.rateWidget = function(options, ext, value) {

        var supportsTouch = !!('ontouchstart' in window || navigator.msMaxTouchPoints);

        var settings;
        var self = this;
        if (!this || !this.length) {
            return;
        }

        if (typeof options == 'string') {
            if (options == 'getOption') {
                if (ext == 'rate') {
                    return parseInt(this.attr('data-rate'), 10);
                }
            }
            if (options == 'setOption') {
                if (ext == 'rate') {
                    update.call(this, parseInt(value, 10));
                    ext = {
                        rate: value
                    };
                }
                if (typeof ext === 'object' && ext) {
                    settings = this.data('rateWidgetSettings') || {};
                    $.extend(settings, ext);
                    if (typeof ext.hold !== 'undefined' && typeof ext.hold !== 'function') {
                        settings.hold = _scalarToFunc(settings.hold);
                    }
                }
            }
            return this;        // means that widget is installed already
        }

        this.data('rateWidgetSettings', $.extend({
            onUpdate: function() {},
            rate: null,
            hold: false,
            withClearAction: true
        }, options || {}));

        if (this.data('inited')) {  // has inited already. Don't init again
            return;
        }

        settings = this.data('rateWidgetSettings');
        if (typeof settings.hold !== 'function') {
            settings.hold = _scalarToFunc(settings.hold);
        }
        init.call(this);

        function init() {
            if (!self.attr('id')) {
                self.attr('id', (''+Math.random()).substr(2));
            }
            if (settings.rate !== null) {
                self.attr('data-rate', settings.rate);
            }
            self.find('i:lt(' + self.attr('data-rate') + ')').removeClass('star-empty').addClass('star');

            if (!supportsTouch) {
                self.mouseover(function(e) {
                    if (settings.hold.call(self)) {
                        return;
                    }
                    var target = e.target;
                    if (target.tagName == 'I') {
                        target = $(target);
                        target.prevAll()
                            .removeClass('star star-empty').addClass('star-hover').end()
                            .removeClass('star star-empty').addClass('star-hover');
                        target.nextAll().removeClass('star star-hover').addClass('star-empty');
                    }
                }).mouseleave(function() {
                    if (settings.hold.call(self)) {
                        return;
                    }
                    update.call(self, self.attr('data-rate'));
                });
            }

            self.click(function(e) {
                if (settings.hold.call(self)) {
                    return;
                }
                var item = e.target;
                var root = this;
                while (item.tagName != 'I') {
                    if (item == root) {
                        return;
                    }
                }
                var prev_rate = self.attr('data-rate');
                var rate = 0;
                self.find('i')
                    .removeClass('star star-hover')
                    .addClass('star-empty')
                    .each(function() {
                        rate++;
                        $(this).removeClass('star-empty').addClass('star');
                        if (this == item) {
                            if (prev_rate != rate) {
                                self.attr('data-rate', rate);
                                settings.onUpdate(rate);
                            }
                            return false;
                        }
                });
                return false;
            });
            // if withClearAction is setted to true make available near the stars link-area for clear all stars (set rate to zero)
            if (settings.withClearAction) {
                var clear_link_id = 'clear-' + $(this).attr('id'),
                    clear_link = $('#' + clear_link_id);
                if (!clear_link.length) {
                    self.after('<a href="javascript:void(0);" class="inline-link rate-clear" id="'+clear_link_id+'" style="display:none;"><b><i>'+$_('clear')+'</b></i></a>');
                    clear_link = $('#' + clear_link_id);
                }
                clear_link.click(function() {
                    if (settings.hold.call(self)) {
                        return;
                    }
                    var prev_rate = self.attr('data-rate');
                    update.call(self, 0);
                    if (prev_rate !== 0) {
                        settings.onUpdate(0);
                    }
                });
                var timer_id;
                self.parent().mousemove(function() {
                    if (settings.hold.call(self)) {
                        return;
                    }
                    if (timer_id) {
                        clearTimeout(timer_id);
                    }
                    clear_link.show(0);
                }).mouseleave(function() {
                    timer_id = setTimeout(function() {
                        if (settings.hold.call(self)) {
                            return;
                        }
                        clear_link.hide(0);
                    }, 150);
                });
            }
            this.unbind('clear').bind('clear', function() {
                update.call(self, 0);
            });
            this.data('inited', true);

            self[0].addEventListener("touchend", function(event) {
                $(event.target).trigger("click");
            }, false);
        }

        function update(new_rate) {
            var rate = 0;
            this.find('i')
                .removeClass('star star-hover')
                .addClass('star-empty').each(function() {
                    if (rate == new_rate) {
                        return false;
                    }
                    rate++;
                    $(this).removeClass('star-empty').addClass('star');
                });
            this.attr('data-rate', new_rate);
        }

        function _scalarToFunc(scalar) {
            return function() {
                return scalar;
            };
        }

        return this;

    };
})(jQuery);;
(function($) {
    $.product_reviews = {
        container: null,
        sidebar_counter: null,
        statuses: {},
        form: null,
        hotkeys: {
            'alt+enter': {
                ctrl:false, alt:true, shift:false, key:13
            },
            'ctrl+enter': {
                ctrl:true, alt:false, shift:false, key:13
            },
            'ctrl+s': {
                ctrl:true, alt:false, shift:false, key:17
            }
        },

        /**
         * {Object}
         * */
        options: {},

        init: function(options) {
            this.options  = options;
            this.statuses = options.statuses;
            if (options.product_id) {
                this.product_id = options.product_id;
            }
            this.form = $('#s-review-add-form');
            this.sidebar_counter = $('#s-all-reviews').find('.count');
            if (options.container) {
                if (typeof options.container === 'object') {
                    this.container = options.container;
                } else {
                    this.container = $(options.container);
                }
                this.container.find('.s-reviews')
                   .off('click', '.s-review-reply, .s-review-delete, .s-review-restore, .js-review-publish')
                    .on('click', '.s-review-reply, .s-review-delete, .s-review-restore, .js-review-publish',
                        function() {
                            var self = $(this),
                                li = self.parents('li:first'),
                                parent_id = parseInt(li.attr('data-id'), 10) || 0;
                            if (self.hasClass('s-review-reply')) {
                                if ($.product_reviews.options.reply === 'ignore') {
                                    return;
                                }
                                $.product_reviews.prepareAddingForm.call(self, $.product_reviews.form, parent_id);
                            } else if (self.hasClass('s-review-delete')) {
                                $.product_reviews.deleteReview(parent_id, options.afterDelete);
                            } else if (self.hasClass('s-review-restore')) {
                                $.product_reviews.restoreReview(parent_id, options.afterRestore);
                            } else if (self.hasClass('js-review-publish')) {
                                $.product_reviews.publishReview(parent_id);
                            }
                            return false;
                        }
                    );
            }

            if (this.product_id) {
                this.container.addClass('ajax');
            }

            var addReview = function() {
                $.product_reviews.addReview('backend', options.afterAdd);
            };
            this.addHotkeyHandler('textarea', 'ctrl+enter', addReview);
            this.form.find('input.save').unbind('click').bind('click', addReview);

            this.initView();

//            $.product_reviews.form.find('a:first').rateWidget({
//                onUpdate: function(rate) {
//                    $.product_reviews.form.find('input[name=rate]').val(rate);
//                }
//            });

            if (this.options.lazy_loading) {
                this.initLazyLoad(this.options.lazy_loading);
            }

            if ($.product) {
                $.product.editTabReviewsAction = function(path) {
                    if (path.tail) {
                        setTimeout(function() {
                            $.product_reviews.activeReplyToForm(path.tail);
                        }, 200);
                    }
                };
            }
        },

        activeReplyToForm: function(id) {
            var li = this.container.find('.s-reviews li[data-id='+id+']');
            if (li.length) {
                var reply_link = li.find('.s-review-reply:first');
                this.prepareAddingForm.call(reply_link, this.form, id);
                $(document).scrollTop(li.offset().top);
            }
        },

        initView: function() {
            if ($.products.hash.substr(0, 7) == 'reviews') {
                var sidebar = $('#s-sidebar');
                sidebar.find('li.selected').removeClass('selected');
                sidebar.find('#s-all-reviews').addClass('selected');
            }
        },

        initReview: function(options) {
            var $document = $(document),
                $review = options["$wrapper"];

            var review_id = $review.data("id"),
                locales = options["locales"],
                urls = options["urls"];

            var delete_locked = false;

            $review.on("click", ".js-show-image", function(event) {
                event.preventDefault();

                var $image = $(this),
                    images = [];

                $review.find(".js-show-image").each(function () {
                    var $_image = $(this);
                    images.push({
                        href: $_image.attr("href"),
                        title: escape($_image.attr("title"))
                    });
                });

                var k = $image.closest(".s-image-wrapper").prevAll('.s-image-wrapper').length;
                if (k) { images = images.slice(k).concat(images.slice(0, k)); }

                $.swipebox(images, {
                    useSVG : false,
                    hideBarsDelay: false,
                    afterOpen: function() {
                        $document.on("scroll", closeSwipe);
                        function closeSwipe() {
                            var $closeButton = $("#swipebox-close");
                            if ($closeButton.length) {
                                $closeButton.trigger("click");
                            }
                            $document.off("scroll", closeSwipe);
                        }
                    }
                });
            });

            $review.on("click", ".js-delete-image", function(event) {
                event.preventDefault();

                var $image_w = $(this).closest(".s-image-wrapper"),
                    image_id = $image_w.data("image-id");

                if (!delete_locked && confirm(locales["confirm"]) ) {
                    delete_locked = true;

                    var href = urls["delete"],
                        data = {
                            review_id: review_id,
                            image_id: image_id
                        };

                    $.post(href, data, "json")
                        .always( function() {
                            delete_locked = false;
                        })
                        .done( function() {
                            $image_w.remove();
                        });
                }
            });

            function escape(string) {
                return $("<div />").text(string).html();
            }
        },

        initLazyLoad: function(options) {
            var count = options.count;
            var offset = count;
            var total_count = options.total_count;
            var url = options.url || '?module=reviews';
            var target = $(options.target || '.s-reviews:first ul:first');

            $(window).lazyLoad('stop');  // stop previous lazy-load implementation

            if (offset < total_count) {
                $(window).lazyLoad({
                    container: target,
                    state: (typeof options.auto === 'undefined' ? true: options.auto) ? 'wake' : 'stop',
                    load: function() {
                        $(window).lazyLoad('sleep');
                        $('.lazyloading-link').hide();
                        $('.lazyloading-progress').show();
                        $.get(
                            url+'&lazy=1&offset='+offset+'&total_count='+total_count,
                            function (html) {
                                var data = $('<div></div>').html(html);
                                var children = data.find('.s-reviews').children();
                                offset += children.length;
                                target.append(children);
                                $('.lazyloading-progress-string').replaceWith(data.find('.lazyloading-progress-string'));
                                $('.lazyloading-progress').replaceWith(data.find('.lazyloading-progress'));
                                if (offset >= total_count) {
                                    $(window).lazyLoad('stop');
                                    $('.lazyloading-link').hide();
                                } else {
                                    $('.lazyloading-link').show();
                                    $(window).lazyLoad('wake');
                                }
                                data.remove();
                            },
                            "html"
                        );
                    }
                });
                $('.lazyloading-link').unbind('click').bind('click', function(){
                    $(window).lazyLoad('force');
                    return false;
                });
            }
        },

        prepareAddingForm: function(form, review_id)
        {
            var self = this; // clicked link
            if (review_id) {
                self.after(form);
                form.find('.rate a:first').hide();
            } else {
                var acceptor = $('#s-review-add li:first');
                if (!acceptor.find('form').length) {
                    acceptor.append(form);
                }
                form.find('.rate a:first').show();
            }
            $.product_reviews.clear(false);
            $('input[name=parent_id]', form).val(review_id);
        },

        addHotkeyHandler: function(item_selector, hotkey_name, handler) {
            var hotkey = this.hotkeys[hotkey_name];
            this.form.off('keydown', item_selector).on('keydown', item_selector,
                function(e) {
                    if (e.keyCode == hotkey.key &&
                        e.altKey  == hotkey.alt &&
                        e.ctrlKey == hotkey.ctrl &&
                        e.shiftKey == hotkey.shift)
                    {
                        return handler();
                    }
                }
            );
        },

        addReview: function(env, success) {
            var sidebar_counter = this.sidebar_counter;
            $.post(
                (env == 'backend' || !env) ? '?module=reviews&action=add' : '#',
                $.product_reviews.form.serialize(),
                function (r) {
                    if (r.status == 'fail') {
                        $.product_reviews.clear(false);
                        $.product_reviews.showErrors(r.errors);
                        return;
                    }
                    if (r.status != 'ok' || !r.data.html) {
                        if (console) {
                            console.log('Error occured.');
                        }
                        return;
                    }
                    var parent_id_input = $('input[name=parent_id]', $.product_reviews.form);
                    var parent_li = $.product_reviews.form.parents('.s-review:first').parent('li');
                    var html = r.data.html;
                    var ul = $('ul:first', parent_li);
                    var reviews_block = $.product_reviews.container;

                    if (!parent_li.length) {
                        reviews_block.show();
                        ul = $('ul:first', reviews_block).show();
                    }
                    if (!ul.length) {
                        ul = $('<ul class="menu-v with-icon"></ul>');
                        parent_li.append(ul);
                    }
                    ul.append($('<li data-id="'+r.data.id+'" data-parent-id="'+r.data.parent_id+'"></li>').append(html));

                    // back form to 's-review-add' place and clear
                    $('textarea', $.product_reviews.form).val('');
                    var acceptor = $('#s-review-add');
                    if (!acceptor.find('form').length) {
                        acceptor.append($.product_reviews.form);
                        parent_id_input.val(0);
                    }
                    if (sidebar_counter.length) {
                        sidebar_counter.text(parseInt(sidebar_counter.text(), 10) + 1);
                    }
                    if (typeof success === 'function') {
                        success(r);
                    }
                    $.product_reviews.clear();
                },
            'json')
            .error(function(r) {
                if (console) {
                    console.log(r.responseText ? 'Error occured: ' + r.responseText : 'Error occured.');
                }
            });
        },

        deleteReview: function(review_id, success)
        {
            var container = this.container;
            var sidebar_counter = this.sidebar_counter;
            $.post('?module=reviews&action=changeStatus',
                { review_id: review_id, status: this.statuses.deleted },
                function(r) {
                    if (r.status == 'ok') {
                        var review_li  = container.find('li[data-id='+review_id+']');
                        var review_div = review_li.find('div:first');
                        review_div
                            .removeClass("is-published")
                            .removeClass("is-unpublished")
                            .addClass('is-deleted');
                        review_div.find('.s-review-delete').hide();
                        review_div.find('.s-review-restore').show();
                        if (sidebar_counter.length) {
                            sidebar_counter.text(parseInt(sidebar_counter.text(), 10) - 1);
                        }
                        if (typeof success === 'function') {
                            success(r);
                        }
                    }
                },
            'json');
        },

        restoreReview: function(review_id)
        {
            var container = this.container;
            var sidebar_counter = this.sidebar_counter;
            $.post('?module=reviews&action=changeStatus',
                { review_id: review_id, status: this.statuses.published },
                function(r) {
                    if (r.status == 'ok') {
                        var review_li  = container.find('li[data-id='+review_id+']');
                        var review_div = review_li.find('div:first');
                        review_div
                            .addClass("is-published")
                            .removeClass("is-unpublished")
                            .removeClass('is-deleted');
                        review_div.find('.s-review-delete').show();
                        review_div.find('.s-review-restore').hide();
                        if (sidebar_counter.length) {
                            sidebar_counter.text(parseInt(sidebar_counter.text(), 10) + 1);
                        }
                        if (typeof success === 'function') {
                            success();
                        }
                    }
                },
            'json');
        },

        publishReview: function(review_id)
        {
            var container = this.container;
            var sidebar_counter = this.sidebar_counter;
            $.post('?module=reviews&action=changeStatus',
                { review_id: review_id, status: this.statuses.published },
                function(r) {
                    if (r.status == 'ok') {
                        var review_li  = container.find('li[data-id='+review_id+']');
                        var review_div = review_li.find('div:first');
                        review_div
                            .addClass("is-published")
                            .removeClass("is-unpublished")
                            .removeClass('is-deleted');
                        review_div.find('.s-review-delete').show();
                        review_div.find('.js-review-publish').remove();
                        if (sidebar_counter.length) {
                            sidebar_counter.text(parseInt(sidebar_counter.text(), 10) + 1);
                        }
                        if (typeof success === 'function') {
                            success();
                        }
                    }
                },
            'json');
        },

        clear: function(clear_inputs) {
            clear_inputs = typeof clear_inputs === 'undefined' ? true : clear_inputs;
            $('.errormsg', this.form).remove();
            $('.error',    this.form).removeClass('error');
            $('.wa-captcha-refresh', this.form).click();
            if (clear_inputs) {
                $('input[name=captcha], textarea', this.form).val('');
                $('input[name=rate]', this.form).val(0);
                $('.rate a:first', this.form).trigger('clear');
            }
        },

        showErrors: function(errors) {
            for (var i = 0, n = errors.length, errs = errors[i]; i < n; errs = errors[++i]) {
                for (var name in errs) {
                    $('[name='+name+']', this.form).
                        after($('<em class="errormsg"></em>').text(errs[name])).
                        addClass('error');
                }
            }
        }
    };
})(jQuery);;
(function ($) {
    $.product_images = {

        /**
         * {Number}
         */
        product_id: 0,

        /**
         * {Object}
         */
        image: null,

        /**
         * {Jquery Object}
         */
        product_image: null,

        /**
         * {Jquery Object}
         */
        image_list: null,

        /**
         * {Jquery Object}
         */
        photo_stream: null,

        /**
         * Dispatching tail
         * {String}
         */
        tail: null,

        /**
         * {Object}
         */
        options: {},

        init: function (options) {
            this.options = options;
            this.product_id = options.product_id || 0;
            this.image = options.image || null;
            this.options.placeholder = this.options.placeholder || null;

            var tab = $('#s-product-edit-menu .images');

            if (!this.image) {
                this.initImageList(options);
            } else {
                setTimeout(function () {
                    $.product_images.initImage();
                }, 200);
            }

            tab.find('.hint').text(options.count || (options.images && options.images.length) || 0);
            $('#s-product-edit-forms .s-product-form.images').addClass('ajax');

            $.product.editTabImagesAction = function (path) {
                if ($.product_images.tail !== null) {
                    var url = '?module=product&action=images&id=' + path.id;
                    if (path.tail) {
                        url += '&param[]=' + path.tail;
                        if ($.product_images.photo_stream && $.product_images.photo_stream.length) {
                            var ul = $.product_images.photo_stream.find('.s-stream-wrapper>ul');
                            url += '&ps[left]=' + parseInt(ul.css('left'), 10);
                            url += '&ps[width]=' + parseInt(ul.css('width'), 10);
                        }
                    }

                    $.get(url, function (html) {
                        $('#s-product-edit-forms .s-product-form.images').html(html);
                    });
                }
                $.product_images.tail = path.tail;
            };

            $.product.editTabImagesBlur = function (path) {
                $('#fileupload').fileupload('destroy');
            };

            var custom_badge = $('#s-product-set-custom-badge');

            $('.s-product-images-actions').off('click', 'li').on('click', 'li', function () {
                var self = $(this);
                var action = self.attr('data-action');
                switch (action) {
                    case 'set-badge':
                        $.product_images.setBadge(self.attr('data-type'));
                        break;
                    case 'set-custom-badge':
                        custom_badge.data('type', self.attr('data-type'));
                        custom_badge.show();
                        break;
                    case 'delete-badge':
                        $.product_images.deleteBadge();
                        break;
                }
                if (action != 'set-custom-badge') {
                    custom_badge.hide();
                }
                return false;
            });

            custom_badge.find('input[type=button]').unbind('click').bind('click', function () {
                var self = $(this).parent();
                custom_badge.show();
                $.product_images.setBadge(custom_badge.data('type'), self.find('textarea[name=code]').val());
                return false;
            });

        },

        initImageList: function (options) {
            this.image_list = $(options.image_list || '#s-product-image-list');
            this.image_list.html(tmpl('template-product-image-list', {
                images: options.images,
                placeholder: options.placeholder,
                type: options.type,
                product_id: this.product_id
            }));
            this.initListSortable();
            if (!options.type || options.type == 'thumbs') {
                this.initListEditable();
            }

            if (options.enable_2x) {
                $.fn.retina && this.image_list.find('img').retina();
            }
        },

        initImage: function () {
            var image_div = $('#s-product-one-image');
            var width = image_div.parent().width();
            this.photo_stream = $('#s-product-image-toolbar ul.s-photostream:first');
            var sizes = this.setImageDimensions();
            $(window).unbind('resize.product_images').bind('resize.product_images', function (e) {
                if (!$('#s-product-image').length) {
                    $(this).unbind('resize.product_images');
                    return;
                }
                if (!$.product_images.image) {
                    $(this).unbind('resize.product_images');
                    return;
                }
                var sizes = $.product_images.setImageDimensions();
                $.product_images.loupe.resize(sizes);
            });

            $('#s-product-image-description').inlineEditable({
                inputType: 'textarea',
                makeReadableBy: ['esc'],
                updateBy: ['ctrl+enter'],
                placeholderClass: 'gray',
                placeholder: $.product_images.options.placeholder,
                minSize: {
                    height: 50,
                    widht: 600
                },
                size: {
                    width: sizes.width
                },
                editLink: '#s-product-image-description-edit-link',
                allowEmpty: true,
                beforeMakeEditable: function (input) {
                    var self = $(this);
                    var button_id = this.id + '-button';
                    var button = $('#' + button_id);
                    if (!button.length) {
                        input.after('<br><input type="button" id="' + button_id + '" value="' + $_('Save') + '"> <em class="hint" id="' + this.id + '-hint">Ctrl+Enter</em>');
                        $('#' + button_id).click(function () {
                            self.trigger('readable');
                        });
                    }
                    $('#' + this.id + '-hint').show();
                    button.show().prev('br').hide();
                },
                afterBackReadable: function (input, data) {
                    var value = $(input).val();
                    var prefix = '#' + this.id + '-';

                    $(prefix + 'button').hide().prev('br').hide();
                    $(prefix + 'hint').hide();
                    if (data.changed) {
                        $.products.jsonPost('?module=product&action=imageSave', {
                            id: $.product_images.image.id,
                            data: {
                                description: value
                            }
                        });
                    }
                }
            });

            var photo_stream = this.photo_stream;
            var selected = photo_stream.find('li.selected');

            photo_stream.photoStreamSlider({
                backwardLink: '#s-product-image-toolbar .rewind',
                forwardLink: '#s-product-image-toolbar .ff',
                photoStream: 'ul',
                duration: 400
            });

            photo_stream.off('click', 'li.visible a').on('click', 'li.visible a', function () {
                var self = $(this);
                var href = self.attr('href');
                var li = $(this).parent();
                selected.removeClass('selected');
                selected = li.addClass('selected');
                photo_stream.trigger('home', [function () {
                    location.href = href;
                }]);
                return false;
            });

            this.photo_stream = photo_stream;
            this.product_image = $('#s-product-image');
            var custom_badge = $('#s-product-set-custom-badge');

            $('.s-product-image-actions').off('click', 'li').on('click', 'li', function () {
                var self = $(this);
                var action = self.attr('data-action');
                switch (action) {
                    case 'delete':
                        $.product_images.deleteImage();
                        break;
                    case 'rotate-right':
                        $.product_images.rotateImage('right');
                        break;
                    case 'rotate-left':
                        $.product_images.rotateImage('left');
                        break;
                    case 'set-badge':
                        $.product_images.setBadge(self.attr('data-type'));
                        break;
                    case 'set-custom-badge':
                        custom_badge.data('type', self.attr('data-type'));
                        custom_badge.show();
                        break;
                    case 'delete-badge':
                        $.product_images.deleteBadge();
                        break;
                }
                if (action != 'set-custom-badge') {
                    custom_badge.hide();
                }
                return false;
            });

            custom_badge.find('input[type=button]').unbind('click').bind('click', function () {
                var self = $(this).parent();
                custom_badge.show();
                $.product_images.setBadge(custom_badge.data('type'), self.find('textarea[name=code]').val());
                return false;
            });

            var image = this.image;
            if ($('#s-product-image-loupe').length) {
                $.product_images.loupe.init({
                    original: {
                        width: image.width,
                        height: image.height,
                        src: '?module=product&action=ImageDownload&id=' + image.id
                    },
                    image: {
                        width: this.product_image.width(),
                        height: this.product_image.height(),
                        src: image.url_big,
                        dom: this.product_image
                    },
                    animate: !!(image.dimensions.width && image.dimensions.height)
                });
            }

            var self = this;
            $('#s-restore-image-original').unbind('click').bind('click', function () {
                if (confirm($_('This will reset all changes you applied to the image after upload, and will restore the image to its original. Are you sure?'))) {
                    self.coverToggle();
                    $.products.jsonPost('?module=product&action=imageRestore', {id: self.image.id},
                        function (r) {
                            $('#s-product-view').find('li[data-image-id=' + self.image.id + '] img').attr('src', r.data.url_crop);
                            $('<img>').attr('src', r.data.url_big).load(
                                function () {
                                    $(this).remove();
                                    $.products.dispatch('#/product/' + self.product_id + '/edit/images/' + self.image.id + '/');
                                    self.coverToggle();
                                }
                            );
                        },
                        'json');
                }
            });

            if (this.options.enable_2x) {
                $.fn.retina && $('#s-product-image').retina();
            }

            var hold = false;
            $(document).unbind('keydown.product_images').
                bind('keydown.product_images', function (e) {
                    var target_type = $(e.target).prop('nodeName').toLowerCase();
                    var code = e.keyCode;
                    if (hold || target_type == 'text' || target_type == 'textarea' || (code != 37 && code != 39)) {
                        return;
                    }
                    // right
                    if (code == 39) {
                        var next = photo_stream.find('li.selected').next();
                        if (next.length && !next.hasClass('dummy')) {
                            hold = true;
                            location.href = next.find('a').attr('href');
                        }
                        return false;
                    }
                    // left
                    if (code == 37) {
                        var prev = photo_stream.find('li.selected').prev();
                        if (prev.length && !prev.hasClass('dummy')) {
                            hold = true;
                            location.href = prev.find('a').attr('href');
                        }
                        return false;
                    }
                });
        },

        setImageDimensions: function () {
            var image = $('#s-product-image');
            var image_div = $('#s-product-one-image');
            var width = image_div.parent().width();
            var dimensions = this.image.dimensions;
            dimensions.width = parseInt(dimensions.width, 10);
            dimensions.height = parseInt(dimensions.height, 10);

            var sizes = {width: '', height: ''};
            if (!isNaN(dimensions.width) && dimensions.width < width) {
                sizes.width = dimensions.width;
                if (!isNaN(dimensions.height)) {
                    sizes.height = dimensions.height;
                }
            } else {
                sizes.width = width;
            }
            image.css(sizes);
            return sizes;
        },

        deleteImage: function () {
            var self = this;
            var dialog = $('#s-product-image-delete-dialog');
            dialog.waDialog({
                onSubmit: function () {
                    dialog.trigger('close');
                    self.coverToggle();
                    var form = dialog.find('form');
                    $.shop.jsonPost(form.attr('action'), form.serialize(),
                        function (r) {
                            var href = '#/product/' + self.product_id + '/edit/images/';
                            var current = self.photo_stream.find('li.selected');
                            var near = current.next('li:not(.fishki)');
                            if (near.length) {
                                href = near.find('a').attr('href');
                            } else {
                                near = current.prev('li:not(.fishki)');
                                if (near.length) {
                                    href = near.find('a').attr('href');
                                }
                            }
                            $('.s-product-image-crops').find('li[data-image-id=' + r.data.id + ']').remove();
                            self.coverToggle();
                            location.href = href;
                        }
                    );
                    return false;
                }
            });
        },

        rotateImage: function (direction) {
            var self = this;
            self.coverToggle();
            $.products.jsonPost('?module=product&action=imageRotate&id=' + self.image.id, {direction: direction},
                function (r) {
                    $('#s-product-view').find('li[data-image-id=' + self.image.id + '] img').attr('src', r.data.url_crop);
                    $('<img>').attr('src', r.data.url_big).load(
                        function () {
                            $(this).remove();
                            $.products.dispatch('#/product/' + self.product_id + '/edit/images/' + self.image.id + '/');
                            self.coverToggle();
                        }
                    );
                }
            );
        },

        setBadge: function (type, code, fn) {
            var self = this;

            code = code || type;
            var organize_menu = $('#photo-organize-menu');
            var li = organize_menu.find('li[data-type=' + type + ']');
            li.find('a').append('<span class="count"><i class="icon16 loading"></i></span>');
            $.shop.jsonPost(
                '?module=product&action=badgeSet&id=' + self.product_id,
                {code: code},
                function (r) {
                    var image = $('#s-product-one-image');
                    image.find('.top.right').html(r.data);
                    var selected_li = organize_menu.find('li.selected');
                    selected_li.removeClass('selected').find('.small').text('');
                    li.addClass('selected');
                    li.find('span.count').remove();
                    if (!image.length) {
                        li.find('a').append('<span class="count"><i class="icon10 yes"></i></span>');
                        setTimeout(function () {
                            li.find('span.count').remove();
                        }, 1000);
                    }

                    if (type != 'custom') {
                        $('#s-product-set-custom-badge').hide();
                        li.find('.small').text(r.data);
                    } else {
                        $('#s-product-set-custom-badge').show();
                    }
                    if (typeof fn === 'function') {
                        fn(r);
                    }
                }
            );
        },

        deleteBadge: function () {
            var self = this;
            $.getJSON('?module=product&action=badgeDelete&id=' + self.product_id,
                function (r) {
                    $('#s-product-one-image').find('.top.right').html('');
                    $('#photo-organize-menu').find('li.selected').removeClass('selected').find('.small').text('');
                }
            );
        },

        initListSortable: function () {
            this.image_list.sortable({
                distance: 5,
                helper: 'clone',
                items: 'li',
                opacity: 0.75,
                tolerance: 'pointer',
                start: function () {
                    document.ondragstart = function () {
                        return false;
                    };
                },
                update: function (event, ui) {
                    document.ondragstart = null;
                    var self = $(this);
                    var li = $(ui.item);
                    var id = parseInt(li.attr('data-image-id'), 10);
                    var next = li.next(), before_id = null;
                    if (next.length) {
                        before_id = parseInt(next.attr('data-image-id'), 10);
                    }
                    $.products.jsonPost('?module=product&action=imageMove', {id: id, before_id: before_id},
                        function (r) {
                            if (typeof $.product_images.options.onSort === 'function') {
                                $.product_images.options.onSort(id, before_id);
                            }
                        },
                        function () {
                            self.sortable('cancel');
                        }
                    );
                }
            });
        },

        coverToggle: function () {
            var cover = $('#s-product-image-cover');
            if (cover.is(':hidden')) {
                var icon = cover.find('.loading');
                icon.css({
                    position: 'absolute',
                    left: parseInt((cover.width() - icon.width()) / 2, 10) + 'px',
                    top: parseInt((cover.height() - icon.height()) / 2, 10) + 'px'
                });
                cover.show();
            } else {
                cover.hide();
            }
        },

        initListEditable: function () {
            this.image_list.off('click', '.editable').on('click', '.editable', function () {
                $(this).inlineEditable({
                    inputType: 'textarea',
                    makeReadableBy: ['esc'],
                    updateBy: ['ctrl+enter'],
                    placeholderClass: 'gray',
                    placeholder: $.product_images.options.placeholder,
                    minSize: {
                        height: 40
                    },
                    allowEmpty: true,
                    beforeMakeEditable: function (input) {
                        var self = $(this);

                        input.css({
                            'font-size': self.css('font-size'),
                            'line-height': self.css('line-height')
                        }).width(
                            self.parents('li:first').find('img').width()
                        );

                        var button_id = this.id + '-button';
                        var button = $('#' + button_id);
                        if (!button.length) {
                            input.after('<br><input type="button" id="' + button_id + '" value="' + $_('Save') + '"> <em class="hint" id="' + this.id + '-hint">Ctrl+Enter</em>');
                            $('#' + button_id).click(function () {
                                self.trigger('readable');
                            });
                        }
                        $('#' + this.id + '-hint').show();
                        button.show();
                    },
                    afterBackReadable: function (input, data) {
                        var self = $(this);
                        var image_id = parseInt(self.parents('li:first').attr('data-image-id'), 10);
                        var value = $(input).val();
                        var prefix = '#' + this.id + '-';

                        $(prefix + 'button').hide();
                        $(prefix + 'hint').hide();
                        if (data.changed) {
                            $.products.jsonPost('?module=product&action=imageSave', {
                                id: image_id,
                                data: {
                                    description: value
                                }
                            });
                        }
                    }
                }).trigger('editable');
            });
        }
    };
})(jQuery);
;
( function($) {
    $.product_stocks = {
        /**
         * {Object}
         */
        options: {},

        container: null,

        products_ids: [],

        init: function(options) {
            this.options = options;
            this.stocks = options.stocks;
            this.container = $('#s-product-stocks');
            this.products_ids = [];

            this.initView();
            if (options.stocks && options.stocks.length > 1) {
                this.initDragndrop();
            }
            if (this.options.lazy_loading && this.options.product_stocks.length > 0) {
                this.initLazyLoad(this.options.lazy_loading);
            }
        },

        initLazyLoad: function(options) {
            var count = options.count,
                offset = count,
                total_count = options.total_count,
                sort = options.sort;

            $(window).lazyLoad('stop');  // stop previous lazy-load implementation
            if (offset < total_count) {
                var self = this;
                $(window).lazyLoad({
                    container: self.container,
                    state: (typeof options.auto === 'undefined' ? true: options.auto) ? 'wake' : 'stop',
                    hash: 'stocks',
                    load: function() {
                        $(window).lazyLoad('sleep');
                        $('.lazyloading-link').hide();
                        $('.lazyloading-progress').show();

                        var onError = function(r) {
                            if (console) {
                                if (r && r.errors) {
                                    console.error('Error when loading products: ' + r.errors);
                                } else if (r && r.responseText) {
                                    console.error('Error when loading products: ' + r.responseText);
                                } else {
                                    console.error(r);
                                }
                            }
                            $(window).lazyLoad('stop');
                        };

                        var params = [
                            "module=stocksBalance",
                            "offset=" + offset,
                            "total_count=" + total_count
                        ]

                        if (self.options.order) {
                            params.push('order=' + self.options.order);
                        }

                        if (sort) {
                            params.push("sort=" + sort);
                        }

                        $.get("?" + params.join("&"), function(r) {
                            if (r && r.status === 'ok') {
                                offset += r.data.count;

                                if (!self.append({ product_stocks: r.data.product_stocks, stocks: self.stocks })) {
                                    $(window).lazyLoad('stop');
                                    return;
                                }

                                $('.lazyloading-progress-string').text(r.data.progress.loaded + ' ' + r.data.progress.of);
                                $('.lazyloading-progress').hide();
                                $('.lazyloading-chunk').text(r.data.progress.chunk);

                                if (offset >= total_count) {
                                    $(window).lazyLoad('stop');
                                    $('.lazyloading-link').hide();
                                } else {
                                    $('.lazyloading-link').show();
                                    $(window).lazyLoad('wake');
                                }
                            } else {
                                onError(r);
                            }
                            },
                            'json'
                        ).error(onError);
                    }
                });
                $('.lazyloading-link').die('click').live('click',function(){
                    $(window).lazyLoad('force');
                    return false;
                });
            }
        },

        initView: function() {
            if (!this.append({ product_stocks: this.options.product_stocks, stocks: this.stocks })) {
                return this;
            }
        },

        initDragndrop: function() {
            this.container.find('td.s-stock-cell li.item').liveDraggable({
                containment: this.container,
                distance: 5,
                cursor: 'move',
                helper: function() {
                    return $(this).clone().append('<i class="icon10 no-bw" style="margin-left: 0; margin-right: 0; display: none;"></i>');
                },
                refreshPositions: true,
                start: function() {
                    $(this).parents('tr:first').find('td.s-stock-cell').addClass('drag-active').filter(':first').addClass('first');
                },
                stop: function() {
                    $(this).parents('tr:first').find('td.s-stock-cell').removeClass('drag-active').filter(':first').removeClass('first');
                }
            });
            this.container.find('td').liveDroppable({
                disabled: false,
                greedy: true,
                tolerance: 'pointer',
                over: function(event, ui) {
                    var self = $(this);
                    if (self.hasClass('drag-active')) {
                        ui.helper.find('.no-bw').hide();
                    } else {
                        ui.helper.find('.no-bw').show();
                    }
                },
                drop: function(event, ui) {
                    var self = $(this);
                    if (!self.hasClass('drag-active')) {
                        return false;
                    }
                    var dr = ui.draggable;
                    var td = dr.parents('td:first');
                    if (self.get(0) == td.get(0)) {
                        return false;
                    }
                    var src_item_id = dr.attr('id').replace('s-item-', '').split('-');
                    var src_stock_id = src_item_id[1];
                    var dst_stock_id = self.attr('data-stock-id');
                    var dst_item_id = [src_item_id[0], dst_stock_id];
                    var dst_item = $('#s-item-' + dst_item_id.join('-'));

                    // filter out item that marked as infinity
                    if (dst_item.length && dst_item.hasClass('infinity')) {
                        return false;
                    }

                    var d = $('#s-transfer-product-dialog');
                    if (d.length) {
                        d.parent().remove();
                    }
                    var p = $('<div></div>').appendTo('body');
                    p.load(
                        '?module=transfer',
                        {
                            sku_id: src_item_id[0],
                            from: src_stock_id,
                            to: dst_stock_id
                        }
                    );
                }
            });
        },

        append: function(data) {
            var that = this;

            data = formatData(data);

            try {
                this.container.append(tmpl('template-product-stocks', data));

            } catch (e) {
                console.error('Error: ' + e.message);
                return false;
            }

            return true;

            function formatData(result) {
                var products = [];

                $.each(result.product_stocks, function(i, product) {
                    if (that.products_ids.indexOf(product.id) < 0) {
                        products.push(product);
                        that.products_ids.push(product.id);
                    }
                });

                result.product_stocks = products;

                return result;
            }
        }
    };
})(jQuery);;
(function($) {
    $.product_stocks_log = {

        /**
         * Number
         */
        product_id: null,

        /**
         * Jquery object
         */
        container: null,

        /**
         * Object
         */
        options: {},

        init: function(options) {
            this.options = options;
            if (options.container) {
                this.container = $(options.container);
            } else {
                this.container = $('body');
            }

            if (this.options.lazy_loading) {
                this.initLazyLoad(this.options.lazy_loading);
            }
        },

        initLazyLoad: function(options) {
            var count = options.count;
            var offset = count;
            var total_count = this.options.total_count;
            var url = options.url;

            $(window).lazyLoad('stop'); // stop previous lazy-load implementation

            if (offset < total_count) {
                var self = this;
                $(window).lazyLoad({
                    container: self.container,
                    state: (typeof options.auto === 'undefined' ? true : options.auto) ? 'wake' : 'stop',
                    load: function() {

                        if (!self.container.is(':visible')) {
                            $(window).lazyLoad('sleep');
                            var timer_id = setInterval(function() {
                                if (self.container.is(':visible')) {
                                    $(window).lazyLoad('wake');
                                    clearInterval(timer_id);
                                }
                            }, 500);
                            return;
                        }

                        $(window).lazyLoad('sleep');
                        $('.lazyloading-link').hide();
                        $('.lazyloading-progress').show();
                        $.get(url + '&lazy=1&offset=' + offset + '&total_count=' + total_count, function(data) {

                            var html = $('<div></div>').html(data);
                            var list = html.find('table tr');

                            if (list.length) {
                                offset += list.length;
                                $('table', self.container).append(list);
                                if (offset >= total_count) {
                                    $(window).lazyLoad('stop');
                                    $('.lazyloading-progress').hide();
                                } else {
                                    $(window).lazyLoad('wake');
                                    $('.lazyloading-link').show();
                                }
                            } else {
                                $(window).lazyLoad('stop');
                                $('.lazyloading-progress').hide();
                            }

                            $('.lazyloading-progress-string', self.container).
                                    replaceWith(
                                        $('.lazyloading-progress-string', html)
                                    );
                            $('.lazyloading-chunk', self.container).
                                    replaceWith(
                                        $('.lazyloading-chunk', html)
                                    );

                            html.remove();

                        });
                    }
                });
                $('.lazyloading-link').die('click').live('click', function() {
                    $(window).lazyLoad('force');
                    return false;
                });
            }
        }
    };
})(jQuery);
;
(function($) {
    $.stocks_log = {
        
        /**
         * Jquery object
         */
        container: null,
        
        /**
         * Object
         */
        options: {},
        
        init: function(options) {
            this.options = options;
            this.container = options.container || $('#s-content');
            
            if (this.options.lazy_loading) {
                this.initLazyLoad(this.options.lazy_loading);
            }            
        },
        
        initLazyLoad: function(options) {
            var count = options.count;
            var offset = count;
            var total_count = this.options.total_count;
            var url = options.url;

            $(window).lazyLoad('stop'); // stop previous lazy-load implementation

            if (offset < total_count) {
                var self = this;
                $(window).lazyLoad({
                    container: self.container,
                    state: (typeof options.auto === 'undefined' ? true : options.auto) ? 'wake' : 'stop',
                    load: function() {
                        $(window).lazyLoad('sleep');
                        $('.lazyloading-link').hide();
                        $('.lazyloading-progress').show();
                        $.get(url + '&lazy=1&offset=' + offset + '&total_count=' + total_count, function(data) {

                            var html = $('<div></div>').html(data);
                            var list = html.find('table tr');

                            if (list.length) {
                                offset += list.length;
                                $('table', self.container).append(list);
                                if (offset >= total_count) {
                                    $(window).lazyLoad('stop');
                                    $('.lazyloading-progress').hide();
                                } else {
                                    $(window).lazyLoad('wake');
                                    $('.lazyloading-link').show();
                                }
                            } else {
                                $(window).lazyLoad('stop');
                                $('.lazyloading-progress').hide();
                            }
                            
                            $('.lazyloading-progress-string', self.container).
                                    replaceWith(
                                        $('.lazyloading-progress-string', html)
                                    );
                            $('.lazyloading-chunk', self.container).
                                    replaceWith(
                                        $('.lazyloading-chunk', html)
                                    );
                                        
                            html.remove();

                        });
                    }
                });
                $('.lazyloading-link').die('click').live('click', function() {
                    $(window).lazyLoad('force');
                    return false;
                });
            }
        }
        
    };
})(jQuery);
;
(function($) {
    $.product_orders = {

        /**
         * Number
         */
        product_id: null,

        /**
         * Jquery object
         */
        container: null,

        /**
         * Object
         */
        options: {},

        init: function(options) {
            this.options = options;
            if (options.container) {
                this.container = $(options.container);
            } else {
                this.container = $('body');
            }

            if (this.options.lazy_loading) {
                this.initLazyLoad(this.options.lazy_loading);
            }
        },

        initLazyLoad: function(options) {
            var count = options.count;
            var offset = count;
            var total_count = this.options.total_count;
            var url = options.url;

            $(window).lazyLoad('stop'); // stop previous lazy-load implementation

            if (offset < total_count) {
                var self = this;
                $(window).lazyLoad({
                    container: self.container,
                    state: (typeof options.auto === 'undefined' ? true : options.auto) ? 'wake' : 'stop',
                    load: function() {
                        $(window).lazyLoad('sleep');
                        $('.lazyloading-link').hide();
                        $('.lazyloading-progress').show();
                        $.get(url + '&lazy=1&offset=' + offset + '&total_count=' + total_count, function(data) {

                            var html = $('<div></div>').html(data);
                            var list = html.find('table tr');
                            
                            if (list.length) {
                                offset += list.length;
                                $('table', self.container).append(list);
                                if (offset >= total_count) {
                                    $(window).lazyLoad('stop');
                                    $('.lazyloading-progress').hide();
                                } else {
                                    $(window).lazyLoad('wake');
                                    $('.lazyloading-link').show();
                                }
                            } else {
                                $(window).lazyLoad('stop');
                                $('.lazyloading-progress').hide();
                            }

                            $('.lazyloading-progress-string', self.container).
                                    replaceWith(
                                        $('.lazyloading-progress-string', html)
                                    );
                            $('.lazyloading-chunk', self.container).
                                    replaceWith(
                                        $('.lazyloading-chunk', html)
                                    );

                            html.remove();

                        });
                    }
                });
                $('.lazyloading-link').die('click').live('click', function() {
                    $(window).lazyLoad('force');
                    return false;
                });
            }
        }
    };
})(jQuery);
;
(function(a){var b=new Array;var c=new Array;a.fn.doAutosize=function(b){var c=a(this).data("minwidth"),d=a(this).data("maxwidth"),e="",f=a(this),g=a("#"+a(this).data("tester_id"));if(e===(e=f.val())){return;}var h=e.replace(/&/g,"&").replace(/\s/g," ").replace(/</g,"<").replace(/>/g,">");g.html(h);var i=g.width(),j=i+b.comfortZone>=c?i+b.comfortZone:c,k=f.width(),l=j<k&&j>=c||j>c&&j<d;if(l){f.width(j);}};a.fn.resetAutosize=function(b){var c=a(this).data("minwidth")||b.minInputWidth||a(this).width(),d=a(this).data("maxwidth")||b.maxInputWidth||a(this).closest(".tagsinput").width()-b.inputPadding,f=a(this),g=a("<tester/>").css({position:"absolute",top:-9999,left:-9999,width:"auto",fontSize:f.css("fontSize"),fontFamily:f.css("fontFamily"),fontWeight:f.css("fontWeight"),letterSpacing:f.css("letterSpacing"),whiteSpace:"nowrap"}),h=a(this).attr("id")+"_autosize_tester";if(!a("#"+h).length>0){g.attr("id",h);g.appendTo("body");}f.data("minwidth",c);f.data("maxwidth",d);f.data("tester_id",h);f.css("width",c);};a.fn.addTag=function(d,e){e=jQuery.extend({focus:false,callback:true},e);this.each(function(){var f=a(this).attr("id");var g=a(this).val().split(b[f]);if(g[0]==""){g=new Array;}d=jQuery.trim(d);var h;if(e.unique){h=a(g).tagExist(d);if(h==true){a("#"+f+"_tag").addClass("not_valid");}}else{h=false;}if(d!=""&&h!=true){a("<span>").addClass("tag").append(a("<span>").text(d).append("  "),a("<a>",{href:"#",title:"Removing tag",text:"x"}).click(function(){return a("#"+f).removeTag(escape(d));})).insertBefore("#"+f+"_addTag");g.push(d);a("#"+f+"_tag").val("");if(e.focus){a("#"+f+"_tag").focus();}else{a("#"+f+"_tag").blur();}a.fn.tagsInput.updateTagsField(this,g);if(e.callback&&c[f]&&c[f]["onAddTag"]){var i=c[f]["onAddTag"];i.call(this,d);}if(c[f]&&c[f]["onChange"]){var j=g.length;var i=c[f]["onChange"];i.call(this,a(this),g[j-1]);}}});return false;};a.fn.removeTag=function(d){d=unescape(d);this.each(function(){var e=a(this).attr("id");var f=a(this).val().split(b[e]);a("#"+e+"_tagsinput .tag").remove();str="";for(var i=0;i<f.length;i++){if(f[i]!=d){str=str+b[e]+f[i];}}a.fn.tagsInput.importTags(this,str);if(c[e]&&c[e]["onRemoveTag"]){var g=c[e]["onRemoveTag"];g.call(this,d);}});return false;};a.fn.tagExist=function(b){return jQuery.inArray(b,a(this))>=0;};a.fn.importTags=function(b){id=a(this).attr("id");a("#"+id+"_tagsinput .tag").remove();a.fn.tagsInput.importTags(this,b);};a.fn.tagsInput=function(d){var e=jQuery.extend({interactive:true,defaultText:"add a tag",minChars:0,width:"300px",height:"100px",autocomplete:{selectFirst:false},hide:true,delimiter:",",unique:true,removeWithBackspace:true,placeholderColor:"#666666",autosize:true,comfortZone:20,inputPadding:6*2},d);this.each(function(){if(e.hide){a(this).hide();}var d=a(this).attr("id");var f=jQuery.extend({pid:d,real_input:"#"+d,holder:"#"+d+"_tagsinput",input_wrapper:"#"+d+"_addTag",fake_input:"#"+d+"_tag"},e);b[d]=f.delimiter;if(e.onAddTag||e.onRemoveTag||e.onChange){c[d]=new Array;c[d]["onAddTag"]=e.onAddTag;c[d]["onRemoveTag"]=e.onRemoveTag;c[d]["onChange"]=e.onChange;}var g='<div id="'+d+'_tagsinput" class="tagsinput"><div id="'+d+'_addTag">';if(e.interactive){g=g+'<input id="'+d+'_tag" value="" data-default="'+e.defaultText+'" />';}g=g+'</div><div class="tags_clear"></div></div>';a(g).insertAfter(this);a(f.holder).css("width",e.width);a(f.holder).css("height",e.height);if(a(f.real_input).val()!=""){a.fn.tagsInput.importTags(a(f.real_input),a(f.real_input).val());}if(e.interactive){a(f.fake_input).val(a(f.fake_input).attr("data-default"));a(f.fake_input).css("color",e.placeholderColor);a(f.fake_input).resetAutosize(e);a(f.holder).bind("click",f,function(b){a(b.data.fake_input).focus();});a(f.fake_input).bind("focus",f,function(b){if(a(b.data.fake_input).val()==a(b.data.fake_input).attr("data-default")){a(b.data.fake_input).val("");}a(b.data.fake_input).css("color","#000000");});if(e.autocomplete_url!=undefined){autocomplete_options={source:e.autocomplete_url};for(attrname in e.autocomplete){autocomplete_options[attrname]=e.autocomplete[attrname];}if(jQuery.Autocompleter!==undefined){a(f.fake_input).autocomplete(e.autocomplete_url,e.autocomplete);a(f.fake_input).bind("result",f,function(b,c,f){if(c){a("#"+d).addTag(c[0]+"",{focus:true,unique:e.unique});}});}else if(jQuery.ui.autocomplete!==undefined){a(f.fake_input).autocomplete(autocomplete_options);a(f.fake_input).bind("autocompleteselect",f,function(b,c){a(b.data.real_input).addTag(c.item.value,{focus:true,unique:e.unique});return false;});}}else{a(f.fake_input).bind("blur",f,function(b){var c=a(this).attr("data-default");if(a(b.data.fake_input).val()!=""&&a(b.data.fake_input).val()!=c){if(b.data.minChars<=a(b.data.fake_input).val().length&&(!b.data.maxChars||b.data.maxChars>=a(b.data.fake_input).val().length)){a(b.data.real_input).addTag(a(b.data.fake_input).val(),{focus:true,unique:e.unique});}}else{a(b.data.fake_input).val(a(b.data.fake_input).attr("data-default"));a(b.data.fake_input).css("color",e.placeholderColor);}return false;});}a(f.fake_input).bind("keypress",f,function(b){if(b.which==b.data.delimiter.charCodeAt(0)||b.which==13){b.preventDefault();if(b.data.minChars<=a(b.data.fake_input).val().length&&(!b.data.maxChars||b.data.maxChars>=a(b.data.fake_input).val().length)){a(b.data.real_input).addTag(a(b.data.fake_input).val(),{focus:true,unique:e.unique});}a(b.data.fake_input).resetAutosize(e);return false;}else if(b.data.autosize){a(b.data.fake_input).doAutosize(e);}});f.removeWithBackspace&&a(f.fake_input).bind("keydown",function(b){if(b.keyCode==8&&a(this).val()==""){b.preventDefault();var c=a(this).closest(".tagsinput").find(".tag:last").text();var d=a(this).attr("id").replace(/_tag$/,"");c=c.replace(/[\s]+x$/,"");a("#"+d).removeTag(escape(c));a(this).trigger("focus");}});a(f.fake_input).blur();if(f.unique){a(f.fake_input).keydown(function(b){if(b.keyCode==8||String.fromCharCode(b.which).match(/\w+|[áéíóúÁÉÍÓÚñÑ,\/]+/)){a(this).removeClass("not_valid");}});}}return false;});return this;};a.fn.tagsInput.updateTagsField=function(c,d){var e=a(c).attr("id");a(c).val(d.join(b[e]));};a.fn.tagsInput.importTags=function(d,e){a(d).val("");var f=a(d).attr("id");var g=e.split(b[f]);for(var i=0;i<g.length;i++){a(d).addTag(g[i],{focus:false,callback:false});}if(c[f]&&c[f]["onChange"]){var h=c[f]["onChange"];h.call(d,d,g[i]);}};})(jQuery);
;
(function ($) {
    $.product_list = {
        /**
         * {Object}
         */
        options: {},

        /**
         * {Array} Hash of list(collection)
         */
        collection_hash: [],

        /**
         * {String} Param in url for specification list(collection)
         */
        collection_param: '',

        /**
         * {Number}
         */
        total_count: 0,

        /**
         * {Number}
         */
        category_count: 0,

        /**
         * {String|null} Sorting of list (name, rate, datetime, etc.)
         */
        sort: null,

        /**
         * {String|null} Ordering or sorting (asc, desc)
         */
        order: null,

        /**
         * {Object|null} Jquery object related to list container
         */
        container: null,

        /**
         * {Object|null} Jquery object related to right toolbar
         */
        toolbar: null,

        /**
         * {Boolean}
         */
        sortable: true,

        cached: {},

        /**
         * {Oject} Manager of fixed blocks
         * */
        fixed_blocks: {},

        init: function (options) {
            var canonical_hash = [];
            options.collection_param && canonical_hash.push(options.collection_param);
            canonical_hash.push('view='+options.view);
            options.sort && canonical_hash.push('sort='+options.sort);
            options.order && canonical_hash.push('order='+options.order);
            options.page && options.page > 1 && canonical_hash.push('page='+options.page);
            canonical_hash = '#/products/' + canonical_hash.join('&');
            $.products.forceHash(canonical_hash);

            try {
                this.options = options;
                this.container = $('#product-list');
                this.toolbar = $('#s-product-list-toolbar');
                this.sidebar = $('#s-sidebar');
                var products = this.options.products;
                delete this.options.products;
                this.total_count = this.options.total_count || 0;
                this.category_count = parseInt(this.options.category_count, 10);
                if (isNaN(this.category_count)) {
                    this.category_count = this.total_count;
                }
                this.sortable = typeof options.sortable === 'undefined' ? this.sortable : options.sortable;

                this.sort = options.sort || null;

                if (options.enable_2x) {
                    this.container.on('append_product_list', function() {
                        $.fn.retina && $.product_list.container.find('img').not(".is-empty").retina();
                    });
                }

                if (products && options.view) {
                    try {
                        this.container.append(tmpl('template-product-list-' + this.options.view, {
                            products: products,
                            sort: this.sort,
                            primary_currency: this.options.primary_currency,
                            stocks: this.options.stocks
                        }, this.options.view != 'thumbs'));
                        this.container.trigger('append_product_list', [products]);
                    } catch (e) {
                        console.log('Error: ' + e.message);
                        return this;
                    }
                    delete options.products;
                }

                if ($.isArray(this.options.collection_hash) && this.options.collection_hash.length) {
                    this.collection_hash = this.options.collection_hash;
                } else {
                    this.collection_hash = [];
                }

                if (this.options.collection_param) {
                    this.collection_param = this.options.collection_param;
                } else {
                    this.collection_param = '';
                }

                if (options.order) {
                    this.order = options.order;
                }
                if (this.options.lazy_loading) {
                    this.initLazyLoad(this.options.lazy_loading);
                } else {
                    var hash_with_page = canonical_hash.replace(/&page=\d+/, '') + '&page=';
                    $('.pagination a').each(function () {
                        var m = $(this).attr('href').match(/\?page=(\d+)/);
                        $(this).attr('href', hash_with_page + (m ? m[1] : 1));
                    });
                }

                this.initSelecting();
                this.initView(this.options.view);
                this.initDragndrop();
                // this.initSortingNotice();
                this.rubberTable();

                if (this.options.view == 'table') {
                    this.initInlineEditor();
                }
            } catch (e) {
                $.shop.error('$.product_list.init error: ' + e.message, e);
            }

            return this;
        },

        /**
         * @description see at "checkAlerts" (301 line) in products.js
         * */
        // initSortingNotice: function() {
        //     if ($.storage.get('shop/list-sorting-notice-closed')) {
        //         return;
        //     }
        //     var $notice = $('#custom-backend-order-notice');
        //     if ($notice.length) {
        //         $notice.show().on('click', '.close', function() {
        //             $.storage.set('shop/list-sorting-notice-closed', '1');
        //             $notice.remove();
        //         });
        //     }
        // },

        initLazyLoad: function (options) {
            var count = options.count;
            var offset = count;
            var total_count = this.total_count;

            $(window).lazyLoad('stop'); // stop previous lazy-load implementation

            if (offset < total_count) {
                var self = this;

                var enabled_columns = self.container.find('tr.header th[data-additional-column]').map(function() {
                    return $(this).data('additional-column');
                }).get().join(',');

                $(window).lazyLoad({
                    container: self.container,
                    state: (typeof options.auto === 'undefined' ? true : options.auto) ? 'wake' : 'stop',
                    hash: ['', 'products'], // ['products']
                    load: function () {
                        $(window).lazyLoad('sleep');
                        $('.lazyloading-link').hide();
                        $('.lazyloading-progress').show();
                        $.get('?module=products&action=loadList&offset=' + offset + ('&total_count=' + total_count) +
                        (self.collection_param ? '&' + self.collection_param : '') + (self.sort ? '&sort=' + self.sort : '') +
                        (self.order ? '&order=' + self.order : '') + ('&enabled_columns='+(enabled_columns||'')), function (r) {
                            if (r.status == 'ok' && r.data.count) {
                                offset += r.data.count;
                                var product_list = self.container;
                                try {
                                    self.container.append(tmpl('template-product-list-' + self.options.view, {
                                        products: r.data.products,
                                        check_all: product_list.find('.s-select-all:first').length ? product_list.find('.s-select-all:first').attr('checked') : false,
                                        sort: $.product_list.sort,
                                        primary_currency: $.product_list.options.primary_currency,
                                        stocks: $.product_list.options.stocks
                                    }));
                                    self.container.trigger('append_product_list', [r.data.products]);
                                } catch (e) {
                                    console.log('Error: ' + e.message);
                                    $(window).lazyLoad('stop');
                                    return;
                                }

                                product_list.find('.last').removeClass('last');
                                product_list.find('.product:last').addClass('last');
                                $('.lazyloading-progress-string').text(r.data.progress.loaded + ' ' + r.data.progress.of);

                                $('.lazyloading-progress').hide();
                                $('.lazyloading-chunk').text(r.data.progress.chunk);

                                if (offset >= total_count) {
                                    $(window).lazyLoad('stop');
                                    $('.lazyloading-link').hide();
                                } else {
                                    $('.lazyloading-link').show();
                                    $(window).lazyLoad('wake');
                                }
                            } else if (r.data && !r.data.count) {
                                if (console) {
                                    console.log('Count of again loaded products is 0');
                                    $('.lazyloading-progress').hide();
                                }
                            } else {
                                if (r.errors && console) {
                                    console.log('Error when loading products: ' + r.errors);
                                }
                                $(window).lazyLoad('stop');
                            }
                        }, "json");
                    }
                });
                $('.lazyloading-link').die('click').live('click', function () {
                    $(window).lazyLoad('force');
                    return false;
                });
            }
        },

        initSelecting: function () {
            var product_list = this.container;
            var toolbar = this.toolbar;
            var toolbar_count = toolbar.find('.count');
            var select_all_input = product_list.find('.s-select-all:first');
            var recount = function () {
                var count = parseInt(product_list.find('> .product.selected').length, 10);
                if (count) {
                    toolbar_count.text(count).show();
                } else {
                    toolbar_count.text('').hide();
                }
            };

            // when 'shift' held on prevent default browser selecting
            $(document).keydown(function (e) {
                if (e.keyCode == 16 && !$(e.target).closest('.redactor-box').length) {
                    document.body.onselectstart = function () {
                        return false;
                    };
                }
            }).keyup(function (e) {
                if (e.keyCode == 16) {
                    document.body.onselectstart = null;
                }
            });

            // handler of triggerable 'select' event
            product_list.off('select', '.product').on('select', '.product', function (e, selected, need_count) {
                selected = selected !== undefined ? selected : true;
                need_count = need_count !== undefined ? need_count : true;
                if (selected) {
                    $(this).addClass('selected').find('input:first').attr('checked', true);
                } else {
                    $(this).removeClass('selected').find('input:first').attr('checked', false);
                    if (select_all_input.is(':checked')) {
                        select_all_input.attr('checked', false);
                    }
                }
                if (need_count) {
                    recount();
                }
                return false;
            });

            select_all_input.unbind('select').bind('select', function (e, selected) {
                selected = selected !== undefined ? selected : true;
                var self = $(this);
                if (selected) {
                    self.attr('checked', true);
                    product_list.find('> .product').trigger('select', true, false);
                    toolbar_count.text(self.attr('data-count')).show();
                } else {
                    self.attr('checked', false);
                    product_list.find('> .product').trigger('select', false, false);
                    toolbar_count.text('').hide();
                }
            });

            product_list.off('click', '.product input').on('click', '.product input', function (e, ext) {
                var shiftKey = e.shiftKey, checked = this.checked;
                if (ext) {
                    shiftKey = ext.shiftKey;
                    checked = ext.checked;
                }
                var self = $(this).parents('.product:first');
                if (checked) {
                    self.addClass('selected');
                } else {
                    if (select_all_input.is(':checked')) {
                        select_all_input.attr('checked', false);
                    }
                    self.removeClass('selected');
                }

                if (shiftKey && checked) { // when hold shift
                    // look before current
                    var started = product_list.data('last_checked');
                    if (!started) {
                        started = product_list.find('> .product:first').trigger('select', true);
                    }

                    // try find started before current
                    var found = self.prevAll('.selected[data-product-id=' + started.attr('data-product-id') + ']');
                    var li;
                    if (found.length) {
                        li = self.prev();
                        started = started.get(0);
                        while (li.length && started != li.get(0)) {
                            li.addClass('selected').find('input').attr('checked', true);
                            li = li.prev();
                        }
                    } else {
                        found = self.nextAll('.selected[data-product-id=' + started.attr('data-product-id') + ']');
                        if (found.length) {
                            li = self.next();
                            started = started.get(0);
                            while (li.length && started != li.get(0)) {
                                li.addClass('selected').find('input').attr('checked', true);
                                li = li.next();
                            }
                        }
                    }
                    if (!product_list.data('last_checked') && !found.length) {
                        started.trigger('selected', false);
                    }
                }
                if (checked) {
                    product_list.data('last_checked', self);
                }
                recount();
            });

            // when select product by hand (see below). Firefox version
            // In Firefox shift+click on label don't delegate to corresponding input
            if ($.browser.mozilla) {
                product_list.off('click', '.product label').on('click', '.product label', function (e) {
                    if (!e.shiftKey) {
                        return;
                    }
                    var item = $(e.target), input;
                    if (!$(item).is('label')) {
                        item = $(item).parents('label:first');
                    }
                    input = $('#' + item.attr('for'));
                    input.trigger('click', {
                        shiftKey: e.shiftKey,
                        checked: !input.attr('checked')
                    });
                });
            }
        },

        initView: function (view) {

            try {
                var product_list = this.container;
                var sidebar = this.sidebar;

                if (product_list.find('.s-select-all:first').length) {
                    product_list.find('.s-select-all:first').click(function () {
                        $(this).trigger('select', this.checked);
                    });
                }

                if (view == 'table') {
                    // Click on a table view icon toggles product name view in table: single-lined or multi-lined
                    $('#s-content .list-view-mode-table').click(function() {
                        product_list.toggleClass('single-lined');
                        $.storage.set('shop/product_list/multi-lined', !product_list.hasClass('single-lined'));
                        return false;
                    });
                    if ($.storage.get('shop/product_list/multi-lined')) {
                        product_list.removeClass('single-lined');
                    }
                }

                // var param = 'view=' + view + (this.sort ? '&sort=' + this.sort : '');
                var param = 'view=' + view;
                sidebar.find('.s-collection-list li.dr').each(function () {
                    var self = $(this);
                    self.find('a:first').attr('href', '#/products/' + self.attr('id').replace('-', '_id=') + '&' + param);
                });
                $('#s-products-search').autocomplete('disable').val(this.options.text || '').autocomplete('enable');

                var li_id = 's-all-products',
                    collection_condition = $.product_list.collection_hash.length
                        && $.product_list.collection_hash[0] !== 'search'
                        && $.product_list.collection_hash[0] !== 'tag'
                        && $.product_list.collection_hash[0] !== 'id';
                if (collection_condition) {
                    li_id = $.product_list.collection_hash.join('-');
                }
                $.shop.trace('$.product_list.initView', [view, li_id]);
                sidebar.find('li.selected').removeClass('selected');

                var active_element = sidebar.find('#' + li_id);
                if (active_element.length <= 0 && window.location.hash) {
                    active_element = sidebar.find('a[href="' + window.location.hash + '"]').parent();
                }
                if (active_element.length <= 0) {
                    active_element = sidebar.find('#s-all-products');
                }
                active_element.addClass('selected');
                if (collection_condition) {
                    active_element.find('.count:first').text(this.category_count);
                }

                $.product_list.fixed_blocks = $.product_list.initFixedBlocks();

                this.initEditingControls();
                this.initToolbar();

                $(document).trigger('product_list_init_view');
            } catch (e) {
                $.shop.error('$.product_list.initView error: ' + e.message, e);
            }
        },

        highlightInlineEditorCells: function() {

            // Highlight all non-editable cells with a CSS class
            $.product_list.container.find('tr').each(function() {
                var $tr = $(this);
                var has_edit_rights = $tr.data('edit-rights');
                if(!has_edit_rights || $tr.data('min-price') != $tr.data('max-price')) {
                    $tr.find('.s-product-price .editable').filter(function() { return !$(this).data('plugin'); }).addClass('not-editable');
                }
                if(!has_edit_rights || $tr.data('sku-count') != 1) {
                    $tr.find('.s-product-stock .editable').filter(function() { return !$(this).data('plugin'); }).addClass('not-editable');
                }
            });

        },

        initInlineEditor: function() { "use strict";
            var self = this;

            $.product_list.highlightInlineEditorCells();
            $.product_list.container.on('append_product_list', function() {
                $.product_list.highlightInlineEditorCells();
            });

            $.product_list.container.on('click', '.s-product-price,.s-product-stock', function() {
                var $td = $(this);
                if ($td.data('plugin')) {
                    return;
                }
                var $tr = $td.closest('tr');
                var is_price_cell = $td.hasClass('s-product-price');

                if (is_price_cell) {
                    if($tr.data('min-price') != $tr.data('max-price')) {
                        return playDeniedAnimation($td, $_('Inline editing is available only for products with a single SKU'));
                    }
                } else {
                    if ($tr.data('sku-count') != '1') {
                        return playDeniedAnimation($td, $_('Inline editing is available only for products with a single SKU'));
                    }
                }

                if (!$tr.data('edit-rights')) {
                    return playDeniedAnimation($td, $_('Insufficient access rights'));
                }

                if ($td.hasClass('editor-on')) {
                    return;//backToReadOnly($td);
                }

                $td.addClass('editor-on').data('read-only-state-html', $td.html());
                $.product_list.container.removeClass('single-lined');

                if ($tr.data('original-price') !== undefined) {
                    // Show the editor right away when we previously loaded all data we need
                    showEditor();
                } else {
                    $td.html('<i class="icon16 loading"></i>');
                    loadInlineEditorData(showEditor);
                }

                function showEditor() {
                    if (is_price_cell) {
                        $td.html(tmpl('template-list-price-editor-one', {
                            product_id: $tr.data('product-id'),
                            currency: $tr.data('currency'),
                            value: $tr.data('original-price')
                        }));
                    } else {
                        var stocks = $tr.data('stocks');
                        if (!stocks || typeof stocks != 'object') {
                            $td.html(tmpl('template-list-stock-editor-one', {
                                product_id: $tr.data('product-id'),
                                value: stocks || ''
                            }));
                        } else {
                            $td.html(tmpl('template-list-stock-editor-many', {
                                product_id: $tr.data('product-id'),
                                values: stocks
                            }));
                        }
                    }

                    $td.find('.cancel').click(function() {
                        backToReadOnly($td);
                    });

                    var $form = $td.find('form').submit(function() {
                        if ($form.find('.loading').length) {
                            return false;
                        }
                        $form.find(':submit').after('<i class="icon16 loading"></i>');
                        $.post('?module=products&action=inlineSave', $form.serialize(), function(r) {
                            $form.find('.loading').remove();

                            // update the whole line
                            try {
                                r.data && r.data[0] && (r.data[0].alien = $tr.hasClass('s-alien'));
                                var $div = $('<table>').html(tmpl('template-product-list-table', {
                                    products: r.data,
                                    check_all: $.product_list.container.find('.s-select-all:first').prop('checked'),
                                    sort: $.product_list.sort
                                }));
                                $tr.replaceWith($div.find('tr'));
                                self.container.trigger('append_product_list', [r.data]);
                            } catch (e) {
                                console.log('Error: ' + e.message);
                            }
                        }, 'json');
                        return false;
                    });
                    $form.on('dblclick', false);

                    setTimeout(function() {
                        $td.find(':input:visible:first').focus();
                    }, 0);
                }
            });

            // Visually show the user that he cannot edit given table cell
            function playDeniedAnimation($td, reason) {
                if ($td.data('denied-reason') == reason) {
                    $td.data('denied-reason', '');
                    alert(reason);
                } else {
                    $td.data('denied-reason', reason);
                    setTimeout(function() {
                        $td.data('denied-reason', '');
                    }, 3000);

                    $td.wrapInner('<div class="animation-container" style="position:relative;"></div>');
                    var $div = $td.find('.animation-container').animate({ left: '3px' }, 100, function() {
                        $div.animate({ left: '0px' }, 100, function() {
                            $div.animate({ left: '3px' }, 100, function() {
                                $div.animate({ left: '0px' }, 100, function() {
                                    $div.children().first().unwrap();
                                });
                            });
                        });
                    });
                }
            }

            // Turn off editor for given cell
            function backToReadOnly($td) {
                $td.removeClass('editor-on').html($td.data('read-only-state-html'));
                $td.data('read-only-state-html', '');
                $td.data('denied-reason', '');
            }

            // Load data required for inline editors to work, assign them to <tr> and <td> data properties, then call callback
            function loadInlineEditorData(callback) {
                var product_ids = [];
                $.product_list.container.find('tr.product').each(function() {
                    var $tr = $(this);
                    if ($tr.data('original-price') !== undefined) {
                        return;
                    }
                    if (!$tr.data('edit-rights')) {
                        return;
                    }
                    product_ids.push($(this).data('product-id'));
                });

                if (!product_ids.length) {
                    return callback();
                }

                // Load data required and then show the editor
                $.post('?module=products&action=inlineEditorData', { ids: product_ids }, function(r) {
                    if (r.data) {
                        $.product_list.container.find('tr.product').each(function() {
                            var $tr = $(this);
                            var p = r.data[parseInt($tr.data('product-id'), 10)];
                            if (p) {
                                $tr.data('stocks', p.stocks || null);
                                $tr.data('original-price', p.price.replace(/\.?0+$/g, ''));
                            }
                        });
                    }
                    callback();
                }, 'json');
            }
        },

        initFixedBlocks: function () {
            var mainmenu_offset = $('#mainmenu').height();
            var sidebar_width = $('#s-sidebar').width();
            var sensitivity = 5;

            var win = $(window);

            var fixed_blocks = $('#s-fixed-blocks');
            if (!fixed_blocks.length) {
                var fixed_blocks = $('<div id="s-fixed-blocks"></div>').css({
                    display: 'none',
                    position: 'fixed',
                    background: '#fff',
                    top: mainmenu_offset,
                    width: sidebar_width,
                    'float': 'left'
                }).appendTo('#s-sidebar');
            }

            var category_list = $('#s-category-list');
            var category_list_block = $('#s-category-list-block');

            var set_list = $('#s-set-list');
            var set_list_block = $('#s-set-list-block');

            // FIXED CATEGORY BLOCK
            var fixed_category_block = (function () {

                var top_offset = category_list_block.offset().top;

                var block_id = 's-category-list-block';
                var dummy_id = 's-category-list-fishki';
                var handler_id = 's-category-list-handler';

                var fixed = false;
                var is_list_hidden;
                var is_collapsed;

                function setFixed() {
                    if (fixed) {
                        return;
                    }

                    var h = $('#' + handler_id);
                    is_collapsed = $.categories_tree.isCollapsed(h);
                    is_list_hidden = category_list.is(':hidden');

                    // insert instead of original block fishki with proper height
                    var d = $('<div id="' + dummy_id + '" class="block"></div>').css({
                        height: category_list_block.height()
                    });
                    category_list_block.replaceWith(d);

                    fixed_blocks.show().append(category_list_block.hide());
                    category_list_block.find('.heading').before('<span class="hint float-right" style="margin-top: 3px;">' + $_('Drag products here') + '</span>');

                    if (is_collapsed) {
                        $.categories_tree.expand(h, null, function () {
                            $.categories_tree.collapse(h);
                        });
                    }
                    if (!is_list_hidden) {
                        category_list.hide();
                    }

                    category_list_block.show();

                    // hide control (icon) for adding
                    $('i.add', category_list_block).hide();

                    // hide main collapse/expand handler
                    $('#' + handler_id).hide();

                    category_list_block.css({
                        'overflow-x': 'hidden',
                        'overflow-y': 'auto'
                    });

                    (function () {
                        var is_hidden = category_list.is(':hidden');     // for optimization reason
                        var timer_id;
                        category_list_block.bind('mousemove.fixed_blocks.category', function (e) {
                            if (!isProductDragging()) {
                                return;
                            }
                            if (is_hidden) {
                                if (timer_id) {
                                    clearTimeout(timer_id);
                                    timer_id = null;
                                }
                                timer_id = setTimeout(function () {
                                    if (is_hidden) {
                                        category_list_block.css({
                                            height: ''
                                        });
                                        category_list.show();
                                        var current_height = category_list_block.height();
                                        var proposed_height = (win.height() - mainmenu_offset) / 2;
                                        category_list_block.css({
                                            height: Math.min(current_height, proposed_height)
                                        });
                                        category_list_block.find('.heading').prev('.hint').hide();
                                        is_hidden = false;
                                    }
                                }, 250);
                            }
                        });
                        win.bind('mouseout.fixed_blocks.category', function (e) {
                            if (e.pageX > sidebar_width + 10) {
                                if (timer_id) {
                                    clearTimeout(timer_id);
                                }
                                timer_id = null;
                                if (!is_hidden) {
                                    category_list.hide();
                                    category_list_block.css({
                                        height: ''
                                    });
                                    category_list_block.find('.heading').prev('.hint').show();
                                    is_hidden = true;
                                }
                            }
                        });
                    })();

                    fixed = true;

                }

                function unsetFixed() {
                    if (!fixed) {
                        return;
                    }
                    // place back original block
                    var d = $('#' + dummy_id);
                    d.replaceWith(category_list_block);

                    category_list_block.css({
                        'overflow-x': '',
                        'overflow-y': ''
                    });

                    // back to previous collapse/expand status
                    var h = $('#' + handler_id);
                    if (is_collapsed) {
                        $.categories_tree.collapse(h);
                    }
                    if (!is_list_hidden) {
                        category_list.show();
                    }

                    category_list_block.find('.heading').prev('.hint').remove();

                    // show back collapse/expand handler
                    $('#' + handler_id).show();

                    // show back adding control
                    $('i.add', category_list_block).show();

                    // remove fishki
                    d.remove();

                    // unbind events
                    category_list_block.unbind('mousemove.fixed_blocks.category');
                    win.unbind('mouseout.fixed_blocks.category');

                    if (!fixed_blocks.children().length) {
                        fixed_blocks.hide();
                    }

                    fixed = false;

                    $.categories_tree.init();

                }

                function dummyExists() {
                    return document.getElementById(dummy_id);
                }

                function isProductDragging() {
                    return document.getElementById('products-helper');
                }

                win.unbind('scroll.fixed_blocks.category').bind('scroll.fixed_blocks.category', function () {
                    if (!fixed) {
                        top_offset = category_list_block.offset().top;
                    }
                    var bottom = top_offset;
                    if (dummyExists()) {
                        bottom += $('#' + dummy_id).height();
                    } else {
                        bottom += $('#' + block_id).height();
                    }
                    if (win.scrollTop() + mainmenu_offset + sensitivity >= bottom) {
                        setFixed();
                    } else {
                        unsetFixed();
                    }
                });

                return {
                    setFixed: setFixed, unsetFixed: unsetFixed
                };

            })();

            // FIXED SET BLOCK
            var fixed_set_block = (function () {

                var top_offset = set_list_block.offset().top;

                var block_id = 's-set-list-block';
                var dummy_id = 's-set-list-fishki';

                var is_list_hidden;
                var fixed = false;

                //var is_collapsed = $.categories_tree.isCollapsed('#' + handler_id);

                function setFixed() {
                    if (fixed) {
                        return;
                    }

                    is_list_hidden = set_list.is(':hidden');

                    // insert instead of original block fishki with proper height
                    var d = $('<div id="' + dummy_id + '" class="block"></div>').css({
                        height: set_list_block.height()
                    });
                    set_list_block.replaceWith(d);

                    fixed_blocks.show().append(set_list_block);
                    set_list_block.find('.heading').before('<span class="hint float-right" style="margin-top: 3px;">' + $_('Drag products here') + '</span>');

                    if (!is_list_hidden) {
                        set_list.hide();
                    }

                    // hide control (icon) for adding
                    $('i.add', set_list_block).hide();

                    // hide handler control
                    $('i.collapse-handler', set_list_block).hide();

                    set_list_block.css({
                        'overflow-x': 'hidden',
                        'overflow-y': 'auto'
                    });

                    (function () {
                        var is_hidden = set_list.is(':hidden');     // for optimization reason
                        var timer_id;
                        set_list_block.bind('mousemove.fixed_blocks.set', function (e) {
                            if (!isProductDragging()) {
                                return;
                            }
                            if (is_hidden) {
                                if (timer_id) {
                                    clearTimeout(timer_id);
                                    timer_id = null;
                                }
                                timer_id = setTimeout(function () {
                                    if (is_hidden) {
                                        set_list_block.css({
                                            height: ''
                                        });
                                        set_list.show();
                                        var current_height = set_list_block.height();
                                        var proposed_height = (win.height() - mainmenu_offset) / 2;
                                        set_list_block.css({
                                            height: Math.min(current_height, proposed_height)
                                        });
                                        set_list_block.find('.heading').prev('.hint').hide();
                                        is_hidden = false;
                                    }
                                }, 250);
                            }
                        });
                        win.bind('mouseout.fixed_blocks.set', function (e) {
                            if (e.pageX > sidebar_width + 10) {
                                if (timer_id) {
                                    clearTimeout(timer_id);
                                }
                                timer_id = null;
                                if (!is_hidden) {
                                    set_list.hide();
                                    set_list_block.css({
                                        height: ''
                                    });
                                    set_list_block.find('.heading').prev('.hint').show();
                                    is_hidden = true;
                                }
                            }
                        });
                    })();

                    fixed = true;

                }

                function unsetFixed() {
                    if (!fixed) {
                        return;
                    }
                    // place back original block
                    var d = $('#' + dummy_id);
                    d.replaceWith(set_list_block);

                    set_list_block.css({
                        'overflow-x': '',
                        'overflow-y': ''
                    });

                    set_list_block.find('.heading').prev('.hint').remove();

                    // back to previous collapse/expand status
                    if (!is_list_hidden) {
                        set_list.show();
                    }

                    // show back adding control
                    $('i.add', set_list_block).show();

                    // show back handler control
                    $('i.collapse-handler', set_list_block).show();

                    // remove fishki
                    d.remove();

                    // unbind events
                    set_list_block.unbind('mousemove.fixed_blocks.category');
                    win.unbind('mouseout.fixed_blocks.category');

                    if (!fixed_blocks.children().length) {
                        fixed_blocks.hide();
                    }

                    fixed = false;

                }

                function dummyExists() {
                    return document.getElementById(dummy_id);
                }

                function isProductDragging() {
                    return document.getElementById('products-helper');
                }

                win.unbind('scroll.fixed_blocks.set').bind('scroll.fixed_blocks.set', function () {
                    if (!fixed) {
                        top_offset = set_list_block.offset().top;
                    }
                    var bottom = top_offset;
                    if (dummyExists()) {
                        bottom += $('#' + dummy_id).height();
                    } else {
                        bottom += $('#' + block_id).height();
                    }
                    if (win.scrollTop() + mainmenu_offset + sensitivity >= bottom) {
                        setFixed();
                    } else {
                        unsetFixed();
                    }
                });

                return {
                    setFixed: setFixed, unsetFixed: unsetFixed
                };

            })();

            return {
                category: fixed_category_block,
                set: fixed_set_block
            };

        },

        initEditingControls: function () {
            var list_title = $('#s-product-list-title'),
                type = $.product_list.collection_hash[0],
                save_url = '?module=category&action=save&';

            if (type === 'set') {
                save_url = '?module=set&action=save&'
            }

            if (list_title.hasClass('editable')) {
                list_title.inlineEditable({
                    minSize: {
                        width: 350
                    },
                    maxSize: {
                        width: 600
                    },
                    size: {
                        height: 30
                    },
                    inputClass: 's-title-h1-edit',
                    beforeMakeEditable: function () {
                        $('.s-product-list-manage').hide();
                    },
                    afterBackReadable: function (input, data) {
                        $('.s-product-list-manage').show();
                        if (!data.changed) {
                            return false;
                        }
                        $.shop.jsonPost(save_url + $.product_list.collection_param + '&edit=name', {
                            name: $(input).val()
                        }, function (r) {
                            $.product_list.sidebar.find('#' + type + '-' + r.data.id).find('.name:first').html(r.data.name);
                        });
                    }
                });
                if (this.options.edit == 'name') {
                    list_title.trigger('editable');
                }
            }

            // category settings
            var list_settings_link = $('#s-product-list-settings');
            if (list_settings_link.length && (type == 'category' || type == 'set')) {
                list_settings_link.unbind('click').bind('click', function () {

                    //new mode
                    if (type == 'category') {
                        shopDialogProductsCategory.staticDialog($.product_list.collection_hash[1], null, 'edit');
                    } else {
                        shopDialogProductsSet.staticDialog($.product_list.collection_hash[1], 'edit');
                    }

                    return false;
                });
            }

            var list_delete_link = $('#s-product-list-delete');
            if (list_delete_link.length && (type == 'category' || type == 'set')) {
                list_delete_link.unbind('click').bind('click', function () {
                    var d = $("#s-product-list-delete-dialog");
                    d.waDialog({
                        disableButtonsOnSubmit: true,
                        onLoad: function () {
                            $(this).find('.dialog-buttons i.loading').hide();
                        },
                        onSubmit: function () {
                            var self = $(this);
                            var category_id = parseInt($.product_list.collection_hash[1]);
                            self.find('.dialog-buttons i.loading').show();
                            var remove_products = self.find('input[name=s-delete-products]:checked').val() == '1';

                            if (type == 'category' && self.find('input[name="s-delete-sub"]').is(':checked')) {

                                // Get all children of this category by fetching its expanded HTML
                                $.get('?action=categoryExpand&tree=1&recurse=1&id=' + category_id, function(html) {
                                    var ids = $('<div>').html(html).find('li[id^="category-"]').map(function() {
                                        return parseInt(this.id.substr(9), 10);
                                    }).get().reverse();

                                    // Delete all children, then delete category itself
                                    ids.push(category_id);
                                    removeMany(ids, function() {
                                        location.href = '#/';
                                    });
                                });

                            } else {
                                // Delete category and attach children to parent of deleted category
                                removeOne($.product_list.collection_hash, function() {
                                    location.href = '#/';
                                });
                            }

                            return false;

                            function removeMany(ids, fn) {
                                if (!ids.length) {
                                    return fn && fn();
                                }

                                // Delete first category from the list, then delete the rest of them
                                var id = ids.shift();
                                removeOne(['category', id], function() {
                                    removeMany(ids, fn);
                                });
                            }

                            function removeOne(hash, fn) {
                                var params = {
                                    hash: hash.join('/') || 'all',
                                    remove: ['list']
                                };
                                if (remove_products) {
                                    params.remove.push('products');
                                }

                                var remove = function () {
                                    $.product_list.remove(params, function (r, not_allowed_ids) {
                                        removeFromSidebar(hash, r);

                                        // update counters
                                        $.product_list.sidebar.trigger('update', r.data.lists);
                                        fn && fn();
                                    });
                                };

                                // collapse/expand handler (suitable for category)
                                var handler = $('#' + hash.join('-') + '-handler');
                                if (handler.length) {
                                    $.categories_tree.expand(handler, function (h) {
                                        h.parent().find('ul:first').hide();
                                        remove();
                                    });
                                } else {
                                    remove();
                                }

                                return false;
                            }

                            function removeFromSidebar(hash, r) { "use strict";
                                var type = hash[0];
                                var li = $('#' + hash.join('-'));
                                var sep = li.prev('.drag-newposition');
                                var tree = $('#s-' + hash[0] + '-list');
                                var tree_ul = tree.find('ul:first');
                                var ul;

                                if (type == 'set') {
                                    li.remove();
                                    sep.remove();
                                } else {
                                    ul = li.find('ul:first');
                                    if (ul.length) { // curent item has children
                                        ul.find('>li.drag-newposition:first').remove();
                                        li.hide();
                                        ul.find('>li').each(function () {
                                            li.after(this);
                                        });
                                    }
                                    ul = li.parents('ul:first'); // now going to check parent
                                    li.remove();
                                    sep.remove();
                                    if (!ul.find('li.dr').length) {
                                        if (tree_ul.get(0) != ul.get(0)) {
                                            ul.parents('li:first').find('i.collapse-handler').remove();
                                            ul.closest('li').find('.collapse-handler-ajax:first').remove();
                                            ul.remove();
                                        } else {
                                            tree_ul.closest('.block').find('.collapse-handler-ajax:first').remove();
                                        }
                                    }
                                }

                                // if tree list is empty - hide it
                                if (!tree_ul.find('li.dr:first').length) {
                                    tree_ul.hide();
                                    tree.find('.s-empty-list').show();
                                } else {
                                    tree_ul.show();
                                    tree.find('.s-empty-list').hide();
                                }

                                if (r.data.old_parent_category &&
                                    typeof r.data.old_parent_category.children_count !== 'undefined' && !parseInt(r.data.old_parent_category.children_count, 10)) {
                                    $('#category-' + r.data.old_parent_category.id + '-handler').remove();
                                }
                            }
                        }
                    });
                    return false;
                });
            }

            if (type === 'set') {
                $('#s-embed-code').click(function () {
                    $('#s-product-list-embed-dialog').waDialog();
                    return false;
                });
            }

        },

        initDragndrop: function () {
            $.product_dragndrop.init({
                products: true,
                view: this.options.view,
                sort: this.options.sort
            }).bind('move_product', function (options) {
                $.shop.jsonPost('?module=product&action=move&' + $.product_list.collection_param, {
                    product_ids: options.product_ids,
                    before_id: options.before_id || null
                }, options.success, options.error);
            }).bind('is_product_sortable', function () {
                return $.product_list.sortable;
            }).bind('add_to_list', function (options) {
                var data = {};
                if (options.whole_list) {
                    data.hash = $.product_list.collection_hash.join('/') || 'all';
                } else {
                    data.product_id = options.product_ids;
                }
                $.shop.jsonPost('?module=product&action=addToList&' + options.collection_param, data, options.success, options.error);
            });
        },

        initToolbar: function () {
            var toolbar = this.toolbar;
            toolbar.find('li').unbind('click.product_list').bind('click.product_list', function(event) {
                event.preventDefault();

                var $li = $(this);
                var action = $li.attr('data-action');
                if (!action) {
                    return;
                }

                // products == { count: 2, serialized: (result of $form.serializeArray() }
                // in `serialized` there may be a single `hash`, or many `product_id[]` entities
                var products = $.product_list.getSelectedProducts(action != 'delete');
                if (!products.count) {
                    alert($_('Please select at least one product'));
                    return false;
                }

                switch (action) {
                    case 'new-set':
                        /*
                         * $.shop.jsonPost('?module=products&action=saveListSettings&set_id=0&parent_id=0', products.serialized.concat({ name : 'name', value : 'New
                         * set' }), function(r) { var url = '#/products/set_id=' + r.data.id + '&view=' + $.product_list.options.view; $('#s-set-list
                         * ul:first').trigger('add', [r.data, 'set', url]); location.href = url + '&edit=name'; });
                         */
                        break;
                    case 'category':
                        $.product_list.categoriesDialog(products);
                        break;
                    case 'set':
                        $.product_list.setsDialog(products);
                        break;
                    case 'type':
                        $.product_list.typesDialog(products);
                        break;
                    case 'assign-tags':
                        $.product_list.assignTagsDialog(products);
                        break;
                    case 'delete':
                        $.product_list.deleteProductsDialog(products);
                        break;
                    case 'delete-from-set':
                        if ($.product_list.collection_hash[0] == 'set') {
                            $.product_list.deleteFromSet(products);
                        }
                        break;
                    case 'delete-from-category':
                        if ($.product_list.collection_hash[0] == 'category') {
                            $.product_list.deleteFromCategory(products);
                        }
                        break;
                    case 'visibility':
                        $.product_list.visibilityDialog(products, $li);
                        break;
                    case 'export':
                        $.product_list.exportProducts(products, $(this).attr('data-plugin'));
                        break;
                    case 'duplicate':
                        $.product_list.duplicateProducts(products, $(this));
                        break;
                    case 'promo':
                        $.product_list.associatePromo(products, $(this));
                        break;
                    case 'coupon':
                        $.product_list.createCoupon(products);
                        break;
                    case 'set-badge':
                    case 'delete-badge':
                    //case 'set-custom-badge':
                        $.product_list.setBadge(products, $(this));
                        break;
                    default:
                        return;
                }
                return false;
            });

            // 'set-custom-badge' action with a compound control
            toolbar.find('li[data-action="set-custom-badge"] a').click(function() {
                $(this).parent().find('.textarea-wrapper').slideToggle('fast');
                return false;
            }).closest('li').find('.textarea-wrapper').click(function() {
                return false;
            }).find('input').click(function() {
                var products = $.product_list.getSelectedProducts(true);
                if (!products.count) {
                    alert($_('Please select at least one product'));
                } else {
                    $.product_list.setBadge(products, $(this).closest('li'));
                }
                return false;
            });

            // Make right toolbar stick to the top of the page
            // if its height is less than height of the window
            (function() { "use strict";
                var h;
                var menu_height = $('#mainmenu').height();
                var toolbar_top = toolbar.find(':first').offset().top - menu_height;
                var $document = $(document);
                var $window = $(window);
                $document.bind('scroll', h = function () {
                    if (!jQuery.contains(document.documentElement, toolbar[0])) {
                        $document.off('scroll', h);
                        $window.off('resize', h);
                        return;
                    }

                    if ($document.scrollTop() > toolbar_top && toolbar.height() + menu_height < $window.height()) {
                        toolbar.addClass('s-fixed').css({
                            top: menu_height
                        });
                    } else {
                        toolbar.removeClass('s-fixed');
                    }
                });
                $window.bind('resize', h);
            })();
        },

        /**
         * Get special key-value object for mass operations (delete, delete-from-set and etc) Taking into account all-products checkbox (s-select-all)
         *
         * Object say how many products are selected (key 'count'), and info about products or hash If all-products checkbox is activated than object has hash
         * info, else object has products info
         *
         * @param {Boolean} serialize If true than hash/product info packed into field with key 'serialized' else hash info corresponds 'hash'-key and products
         *        info corresponds 'products'-key
         * @returns {Object}
         */
        getSelectedProducts: function (serialize) {
            serialize = serialize || false;
            var product_list = this.container;
            var data = {
                count: 0
            };
            if (product_list.find('.s-select-all:first').attr('checked')) {
                var hash = $.product_list.collection_hash.join('/') || 'all';
                if (serialize) {
                    data.serialized = [
                        {
                            name: 'hash',
                            value: hash
                        }
                    ];
                } else {
                    data.hash = hash;
                }
                data.count = this.total_count;
            } else {
                if (serialize) {
                    data.serialized = $.product_list.container.find('.product.selected').map(function () {
                        data.count += 1;
                        return {
                            name: 'product_id[]',
                            value: $(this).attr('data-product-id')
                        };
                    }).toArray();
                } else {
                    data.product_id = $.product_list.container.find('.product.selected').map(function () {
                        data.count += 1;
                        return $(this).attr('data-product-id');
                    }).toArray();
                }
            }
            return data;
        },

        visibilityDialog: function (products, $li) {
            // Sanity check...
            if (!$.isArray(products.serialized)) {
                return false;
            }

            var $icon = $li.find('i.icon16');
            if (!$icon.hasClass('loading')) {
                var $wrapper = $('#visibility-dialog-wrapper');
                if (!$wrapper.length) {
                    $wrapper = $('<div id="visibility-dialog-wrapper">').appendTo('#s-content');
                }

                var old_icon_class = $icon.attr('class');
                $icon.attr('class', 'icon16 loading');
                $wrapper.data('products', products).load('?module=dialog&action=visibility', function() {
                    $icon.attr('class', old_icon_class);
                });
            }
        },

        categoriesDialog: function (products) {
            var d = $('#s-categories');
            var sidebar = this.sidebar;
            var product_list = this.container;
            var showDialog = function () {
                $('#s-categories').waDialog({
                    disableButtonsOnSubmit: true,
                    onLoad: function () {
                        var self = $(this);
                        self.find('.dialog-content h1 span').text('(' + products.count + ')').show();
                        self.find('.dialog-buttons i.loading').hide();
                        self.find('input[name=new_category_name]').val('');
                        self.find('input[name=new_category]').attr('checked', false);
                    },
                    onSubmit: function (d) {
                        // addToCategories
                        var form = d.find('form');
                        form.find('.dialog-buttons i.loading').show();
                        $.shop.jsonPost(form.attr('action'), form.serializeArray().concat(products.serialized), function (r) {

                            // add new category to sidebar
                            if (r.data.new_category) {
                                $('#s-category-list ul:first').trigger('add',
                                    [r.data.new_category, 'category', '#/products/category_id=' + r.data.new_category + '&view=' + $.product_list.options.view]);
                            }

                            // update cagegories in sidebar
                            if (r.data.categories) {
                                sidebar.trigger('update', [
                                    {
                                        category: r.data.categories
                                    }
                                ]);
                                product_list.find('.s-select-all:first').trigger('select', false);
                            }


                            form.find('input:checked').attr('checked', false);
                            d.trigger('close');
                        });
                        return false;
                    }
                });
            };

            // no cache dialog
            if (d.length) {
                d.parent().remove();
            }

            var p = $('<div></div>').appendTo('body');
            p.load('?module=dialog&action=categories', showDialog);
        },

        setsDialog: function (products) {
            var d = $('#s-sets');
            var sidebar = this.sidebar;
            var product_list = this.container;
            var showDialog = function () {
                $('#s-sets').waDialog({
                    disableButtonsOnSubmit: true,
                    onLoad: function () {
                        var self = $(this);
                        self.find('.dialog-content h1 span').text('(' + products.count + ')').show();
                        self.find('.dialog-buttons i.loading').hide();
                        self.find('input[name=new_set_name]').val('');
                        self.find('input[name=new_set]').attr('checked', false);
                    },
                    onSubmit: function (d) {
                        // addToSets
                        var form = d.find('form');
                        form.find('.dialog-buttons i.loading').show();
                        $.shop.jsonPost(form.attr('action'), form.serializeArray().concat(products.serialized), function (r) {

                            // add new category to sidebar
                            if (r.data.new_set) {
                                $('#s-set-list ul:first').trigger('add',
                                    [r.data.new_set, 'set', '#/products/set_id=' + r.data.new_set + '&view=' + $.product_list.options.view]);
                            }

                            // update cagegories in sidebar
                            if (r.data.sets) {
                                sidebar.trigger('update', [
                                    {
                                        set: r.data.sets
                                    }
                                ]);
                                product_list.find('.s-select-all:first').trigger('select', false);
                            }
                            form.find('input:checked').attr('checked', false);
                            d.trigger('close');
                        });
                        return false;
                    }
                });
            };

            // no cache dialog
            if (d.length) {
                d.parent().remove();
            }

            var p = $('<div></div>').appendTo('body');
            p.load('?module=dialog&action=sets', showDialog);
        },

        assignTagsDialog: function (products) {
            var d = $('#s-assign-tags');
            var showDialog = function () {
                $('#s-assign-tags').waDialog({
                    disableButtonsOnSubmit: true,
                    onLoad: function () {
                        var self = $(this);
                        self.find('.dialog-content h1 span').text('(' + products.count + ')').show();
                        self.find('.dialog-buttons i.loading').hide();
                    },
                    onSubmit: function (d) {
                        var self = $(this);
                        var $tags_input = self.find('#s-assign-tags-list_tag');
                        if ($tags_input.length) {
                            var e = jQuery.Event("keypress", {
                                which: 13
                            });
                            $tags_input.trigger(e);
                        }

                        self.find('.dialog-buttons i.loading').show();
                        var url = self.attr('action');
                        setTimeout(function () {
                            // assignTags
                            var data = self.serializeArray().concat(products.serialized);
                            $.shop.jsonPost(url, data, function (r) {
                                // Show error for items that are denied access
                                if (r.data.denied_message) {
                                    alert(r.data.denied_message)
                                }

                                if (r.data.cloud === 'search') {
                                    d.trigger('close');
                                } else if(r.data.cloud) {
                                    $('#s-tag-cloud').trigger('update', [r.data.cloud]);
                                }
                                d.trigger('close');
                                $.products.dispatch();
                            }, function () {
                                d.trigger('close');
                            });
                        }, 10);
                        return false;
                    }
                });
            };

            // no cache dialog
            if (d.length) {
                d.remove();
            }

            // use post-method instead of get-method because of potential long list of product ids
            $.post('?module=dialog&action=assignTags', products.serialized, function (html) {
                $('body').append(html);
                showDialog();
            });
        },

        typesDialog: function (products) {
            var d = $('#s-types');
            var product_list = this.container;
            var sidebar = this.sidebar;
            var showDialog = function () {
                $('#s-types').waDialog({
                    disableButtonsOnSubmit: true,
                    onLoad: function () {
                        $(this).find('.dialog-buttons i.loading').hide();
                    },
                    onSubmit: function (d) {
                        var form = $(this);
                        form.find('.dialog-buttons i.loading').show();
                        $.shop.jsonPost(form.attr('action'), form.serializeArray().concat(products.serialized), function (r) {
                            sidebar.trigger('update', {
                                type: r.data.types
                            });
                            product_list.find('.s-select-all:first').trigger('select', false);
                            form.find('input:checked').attr('checked', false);
                            d.trigger('close');
                            $.products.dispatch();
                        });
                        return false;
                    }
                });
            };
            var p = d.parent();
            if (!d.length) {
                p = $('<div></div>').appendTo('body');
                p.load('?module=dialog&action=types', showDialog);
            } else {
                showDialog();
            }
        },

        deleteFromSet: function (products) {
            if (products.count > 0) {
                $.shop.jsonPost('?module=products&action=deleteFromSet&id=' + this.collection_hash[1], products.serialized, function () {
                    $.products.dispatch();
                });
            }
        },

        deleteFromCategory: function (products) {
            if (products.count > 0) {
                $.shop.jsonPost('?module=products&action=deleteFromCategory&id=' + this.collection_hash[1], products.serialized, function () {
                    $.products.dispatch();
                });
            }
        },

        deleteProductsDialog: function (products) {
            var showDialog = function () {
                $('#s-product-list-delete-products-dialog').waDialog({
                    disableButtonsOnSubmit: true,
                    onLoad: function () {
                        $(this).find('.dialog-buttons i.loading').hide();
                    },
                    onSubmit: function (d) {
                        $(this).find('.dialog-buttons i.loading').show();
                        $.product_list.remove($.extend(products, {
                            remove: ['products']
                        }), function (r, not_allowed_ids) {
                            $.product_list.sidebar.trigger('update', r.data.lists);
                            $.products.dispatch();
                            d.trigger('close');
                            if (not_allowed_ids.length) {
                                alert((d.data('not-allowed-string')||'').replace('%d', not_allowed_ids.length));
                            }
                        });
                        return false;
                    }
                });
            };
            var d = $('#s-product-list-delete-products-dialog');
            var p = d.parent();
            if (!d.length) {
                p = $('<div></div>').appendTo('body');
            }
            if (products.count > 0) {
                p.load('?module=dialog&action=productsDelete', products, showDialog);
            }
        },

        exportProducts: function (products, plugin) {
            var ids = [];
            var product;
            var hash = false;
            while (product = products.serialized.pop()) {
                if (product.name) {
                    if (product.name == 'product_id[]') {
                        ids.push(parseInt(product.value, 10));
                    } else if (product.name == 'hash') {
                        hash = product.value;
                    }
                }
            }
            var url = '?action=importexport#/';
            url += plugin;
            if (hash) {
                url += '/hash/' + hash;
                window.location = url;
            } else if (ids.length) {
                url += '/hash/id/' + ids.join(',');
                window.location = url;
            }
        },

        createCoupon: function (products) {
            var ids = [];
            var product;
            var hash = false;
            while (product = products.serialized.pop()) {
                if (product.name) {
                    if (product.name == 'product_id[]') {
                        ids.push(parseInt(product.value, 10));
                    } else if (product.name == 'hash') {
                        hash = product.value;
                    }
                }
            }

            var url = this.options['marketing_url'] +'coupons/create/';
            if (hash) {
                url += '?products_hash=' + hash;
                window.location = url;
            } else if (ids.length) {
                url += '?products_hash=id/' + ids.join(',');
                window.location = url;
            }
        },

        duplicateProducts: function (products, $link) {
            var ids = [];
            var product;
            var hash = false;
            while (product = products.serialized.pop()) {
                if (product.name) {
                    if (product.name == 'product_id[]') {
                        ids.push(parseInt(product.value, 10));
                    } else if (product.name == 'hash') {
                        hash = product.value;
                    }
                }
            }
            if (!hash && ids.length) {
                hash = 'id/' + ids.join(',');
            }
            if (hash) {
                $link.find('i.icon16').removeClass('split').addClass('loading');
                this.duplicate(hash, {
                    'progress': function (data) {
                        $link.attr('title', Math.round(100.0 * data.offset / data.total_count) + '%');
                    },
                    'finish': function (data, new_ids) {
                        $link.attr('title', null);
                        var $icon = $link.find('i.icon16');
                        $icon.removeClass('loading').addClass('yes');
                        setTimeout(function () {
                            $icon.removeClass('yes').addClass('split');
                        }, 3000);

                        $(document).one('product_list_init_view', function() {
                            var is_new = {};
                            $.each(new_ids, function(i, id) {
                                is_new[id] = 1;
                            });
                            $('#product-list [data-product-id]').each(function() {
                                var $this = $(this);
                                var id = $(this).data('product-id');
                                if (id && is_new[id]) {
                                    $this.addClass('highlighted');
                                }
                            });
                        });

                        if (data || new_ids) {
                            $.products.dispatch();
                        }
                    },
                    'error': function (data) {

                    }
                });
            }
        },

        setBadge: function(products, $li) {
            var action = $li.data('action');
            if (action != 'set-custom-badge') {
                $li.parent().find('.textarea-wrapper').slideUp('fast');
            }

            $li.find('.loading').remove();
            $li.find('a').append('<span class="count"><i class="icon16 loading"></i></span>');

            // Hashmap of product ids used in jsonComplete()
            var is_selected = {};
            var everything_selected = false;
            $.each(products.serialized, function() {
                everything_selected = everything_selected || this.name == 'hash';
                is_selected[this.value] = 1;
            });

            // Badge deletion has a separate controller
            if (action == 'delete-badge') {
                $li.find('.loading').remove();
                $.shop.jsonPost('?module=product&action=badgeDelete', products.serialized, jsonComplete);
                return;
            }

            // Prepare data for badge saving contoller
            var badge_code;
            if (action == 'set-custom-badge') {
                badge_code = $li.find('textarea').val();
            } else {
                badge_code = $li.data('type');
            }
            var data = products.serialized;
            data.push({
                name: 'code',
                value: badge_code
            });

            // Save badge
            $.shop.jsonPost('?module=product&action=badgeSet', data, jsonComplete, errorHandler);

            // Helper to update DOM after badge has been saved
            function jsonComplete(r) {
                var badge_html = (action == 'delete-badge' ? null : r.data);
                $('#product-list [data-product-id]').each(function() {
                    var $li = $(this);
                    if (everything_selected || is_selected[$li.data('product-id')]) {
                        if ($li.is('tr')) {
                            var $a = $li.find('.s-image a');
                            $a.find('.s-image-corner').remove();
                            badge_html && $a.prepend($('<div class="s-image-corner"></div>').html(badge_html));
                        } else {
                            var $a = $li.find('.s-product-image a');
                            $a.find('.s-image-corner.top.right').remove();
                            badge_html && $a.append($('<div class="s-image-corner top right"></div>').html(badge_html));
                        }
                        $li.trigger('badge', [badge_html]);
                    }
                });

                action == 'set-custom-badge' && $li.parent().find('.textarea-wrapper').slideUp('fast');
                $li.find('.loading').remove();
                $li.find('a').append(
                    $('<span class="count"><i class="icon16 yes"></i></span>').animate({ opacity: 0 }, function() {
                        $(this).remove();
                    })
                );

                $.product_list.container.find('.s-select-all:first').trigger('select', false);
            }
            function errorHandler(r) {
                if (typeof r.errors === 'object' && typeof r.errors[0] === "string") {
                    alert(r.errors[0])
                }
                $li.find('.loading').remove();
            }
        },

        duplicate: function (hash, options) {
            var params = {
                'hash': hash,
                'limit': 50,
                'offset': options.offset || 0
            };
            var url = '?module=products&action=duplicate';
            var self = this;
            var new_ids = [];

            $.shop.jsonPost(url, params, function (response) {
                if ((response.status || 'error') == 'ok') {
                    new_ids = new_ids.concat(response.data.new_ids || []);
                    if (response.data.offset < response.data.total_count) {
                        options.offset = response.data.offset;
                        self.duplicate(hash, options);
                        options.progress(response.data || {});
                    } else {
                        options.finish(response.data || {}, new_ids);
                    }
                } else if (response.status == 'fail' && response.errors.message) {
                    var $error_dialog = $("#s-product-list-duplicate-error-dialog");
                    $error_dialog.waDialog();
                }
            }, function (r) {
                if (r.errors) {
                    options.finish();
                    if (r.errors.message) {
                        var $error_dialog = $("#s-product-list-duplicate-error-dialog");
                        $error_dialog.find('.js-content').html(r.errors.message);
                        $error_dialog.waDialog();
                    } else {
                        alert(r.errors);
                    }
                }
            });
        },

        remove: function (options, finish) {
            var count = 100;
            var params = {};
            var url = '?module=products&action=deleteList';
            var not_allowed_ids = [];
            var process;
            if (options.product_id) {
                process = function () {
                    if (options.product_id.length <= count) {
                        params.get_lists = true;
                    }
                    params.product_id = options.product_id.splice(0, count);
                    $.shop.jsonPost(url, params, function (r) {
                        r.data.not_allowed && r.data.not_allowed.length && (not_allowed_ids = not_allowed_ids.concat(r.data.not_allowed));
                        if (options.product_id.length) {
                            process();
                        } else if (typeof finish === 'function') {
                            finish(r, not_allowed_ids);
                        }
                    });
                };
            } else {
                params.hash = options.hash || (this.collection_hash.join('/') || 'all');
                params.remove = $.isArray(options.remove) && options.remove.length ? options.remove : ['list'];
                if (params.remove.length == 1 && params.remove[0] == 'list') {
                    process = function () {
                        $.shop.jsonPost(url, params, finish);
                    };
                } else {
                    params.count = count;
                    var rest_count = null; // previous rest count
                    process = function () {
                        $.shop.jsonPost(url, params, function (r) {
                            r.data.not_allowed && r.data.not_allowed.length && (not_allowed_ids = not_allowed_ids.concat(r.data.not_allowed));
                            if (r.data.rest_count > 0 && rest_count != r.data.rest_count) {
                                process();
                            } else if (typeof finish === 'function') {
                                finish(r, not_allowed_ids);
                            }
                        });
                    };
                }
            }

            process();

        },

        associatePromo: function(products, $link) {
            var is_locked = $link.data("locked");
            if (!is_locked) {
                $link.data("locked", true);
                showDialog().always( function() {
                    $link.removeData("locked");
                });
            }

            function showDialog() {
                var href = location.pathname + "?module=productsAssociatePromoDialog",
                    data = {
                        products_hash: getHash(products.serialized)
                    };

                var lock_scroll_class = "is-scroll-locked";

                return $.post(href, data).done( function(html) {
                    $(html).waDialog({
                        onLoad: function () {
                            $("body").addClass(lock_scroll_class);
                        },
                        onCancel: function () {
                            $("body").removeClass(lock_scroll_class);
                            $(this).remove();
                        }
                    });
                });
            }
        },

        // Fix for long table
        rubberTable: function() {
            var $wrapper = $("#wa"),
                $content_wrapper = $("#s-content"),
                $content = $("#s-content > .content"),
                left_margin = parseInt( $content_wrapper.css("margin-left")),
                right_margin = parseInt( $content.css("margin-right")),
                $table = $(".s-product-list-table-container table"),
                table_width = $table.width(),
                old_styles = $wrapper.attr("style"),
                content_width,
                page_width;

            // Save old styles
            if (old_styles) { $wrapper.data("style", old_styles); }

            content_width = parseInt( $content.width() - $(".s-product-list-table-container").width() ) + table_width;
            page_width = content_width + left_margin + right_margin;

            if ($wrapper.width() < page_width) {
                $wrapper.css({ "min-width": page_width + "px" });
            }

            $(window).resize();
        }
    };

    function getHash(products_array) {
        var ids = [];
        var hash = "";

        $.each(products_array, function(i, product) {
            if (product.name) {
                if (product.name === 'product_id[]') {
                    ids.push(parseInt(product.value, 10));
                } else if (product.name === 'hash') {
                    hash = product.value;
                }
            }
        });

        if (!hash && ids.length) {
            hash = 'id/' + ids.join(',');
        }

        return hash;
    }

})(jQuery);
;
var shopDialogProductsSet = (function ($) {

    shopDialogProductsSet = function (options) {
        var that = this;

        // DOM
        that.$wrapper = options['$wrapper'];
        that.is_new = options['is_new'];

        // INIT
        that.initClass();
    };
    shopDialogProductsSet.prototype.initClass = function () {
        var that = this;

        if (that.is_new) {
            that.initTransliterateSetID();
        }
        that.initTypeSwitch();
        that.initDatepickers();
    };

    shopDialogProductsSet.prototype.initTypeSwitch = function () {
        var that = this,
            $wrapper = that.$wrapper;

        $wrapper.find('input[name=type]').on('click', function () {
            if ($(this).val() == '0') {
                $wrapper.find('.js-set-dynamic-settings').hide();
            } else {
                $wrapper.find('.js-set-dynamic-settings').show();
            }
        });
    };

    shopDialogProductsSet.prototype.initDatepickers = function () {
        var that = this;

        that.$wrapper.find('.js-datepicker').each( function() {
            var $field = $(this);
            $field.datepicker({});
            $field.datepicker('widget').hide();
        });

        validateStartFinish();

        function validateStartFinish() {
            var $start_field = that.$wrapper.find(".js-start-date"),
                $finish_field = that.$wrapper.find(".js-finish-date");

            var error_class = "error";

            $start_field.on("change", function() {
                var $field = $(this),
                    value = $.trim( $field.val() ),
                    date = null;

                if (value) {
                    var is_valid = checkDate(value);
                    if (is_valid) {
                        date = new Date( $field.datepicker("getDate").getTime() + 1000 * 60 * 60 * 24 );
                    } else {
                        $field.val("").addClass(error_class);
                    }
                }

                $finish_field.datepicker("option", "minDate", date);
            });

            $finish_field.on("change", function() {
                var $field = $(this),
                    value = $.trim( $field.val() ),
                    date = null;

                if (value) {
                    var is_valid = checkDate(value);
                    if (is_valid) {
                        date = new Date( $field.datepicker("getDate").getTime() - 1000 * 60 * 60 * 24 );
                    } else {
                        $field.val("").addClass(error_class);
                    }
                }

                $start_field.datepicker("option", "maxDate", date);
            });

            $([$start_field, $finish_field]).on("keydown", function(event) {
                var $field = $(this),
                    has_error = $field.hasClass(error_class);

                if (has_error) {
                    $field.removeClass(error_class);
                }
            });

            $start_field.trigger("change").datepicker("refresh");
            $finish_field.trigger("change").datepicker("refresh");

            function checkDate(date) {
                var format = $.datepicker._defaults.dateFormat,
                    is_valid = null;

                try {
                    $.datepicker.parseDate(format, date);
                    is_valid = true;

                } catch(e) {
                    is_valid = false;
                }

                return is_valid;
            }
        }
    };

    shopDialogProductsSet.prototype.initTransliterateSetID = function () {
        var that = this,
            $wrapper = that.$wrapper,
            $id_input = $wrapper.find('.js-product-set-id'),
            $name_input = $wrapper.find('.js-product-list-name'),
            state = {val: "", changed: false},
            delay = 200,
            id_input_timer,
            name_input_timer;

        $id_input.bind('keydown', function () {
            var self = $(this);
            if (id_input_timer !== null) {
                clearTimeout(id_input_timer);
                id_input_timer = null;
            }
            id_input_timer = setTimeout(function () {
                var val = self.val();
                if (state.val !== val) {
                    state.changed = true;
                    state.val = val;
                    self.unbind('keydown');
                }
            }, delay);
        });

        $name_input.bind('keydown', function () {
            var self = $(this);
            if (state.changed) {
                self.unbind('keydown');
                return;
            }
            if (name_input_timer !== null) {
                clearTimeout(name_input_timer);
                name_input_timer = null;
            }
            name_input_timer = setTimeout(function () {
                var val = self.val();
                if (!val) {
                    return;
                }
                $.getJSON('?action=transliterate&str=' + val, function (r) {
                    if (state.changed) {
                        self.unbind('keydown');
                        return;
                    }
                    if (r.status == 'ok') {
                        state.val = r.data;
                        $id_input.val(state.val);
                    }
                });
            }, delay);
        });
    };

    shopDialogProductsSet.staticDialog = function (set_id, status) {
        var $wrapperDialog = $('#s-product-set-dialog');

        var showDialog = function () {
            $wrapperDialog = $('#s-product-set-dialog');
            $wrapperDialog.waDialog({
                esc: false,
                disableButtonsOnSubmit: true,
                onLoad: function () {
                    new shopDialogProductsSet({
                        $wrapper: $wrapperDialog,
                        is_new: status === 'new'
                    });

                    setTimeout(function () {
                        $('.js-product-list-name').focus();
                    }, 50);
                },
                onSubmit: function (d) {
                    var form = $(this);
                    var success = function (r) {
                        var hash = null;

                        if (location.hash.indexOf('set_id') > 0) {
                            hash = location.hash.replace('set_id=' + set_id, 'set_id=' + r.data.id);
                            //reset sort
                            if ('rule' in r.data) {
                                hash = hash.replace(/&sort=[^&]*/, '&sort=');
                                hash = hash.replace(/&order=[^&]*/, '&order=');
                            }
                        } else {
                            hash = '#/products/set_id=' + r.data.id;
                        }

                        if (status === 'new') {
                            $.product_sidebar.createNewElementInList(r.data, 'set');
                        }

                        $.product_sidebar.updateItemInCategoryList(r, hash);

                        if (location.hash != hash) {
                            location.hash = hash;
                        } else {
                            $.products.dispatch();
                        }

                        d.trigger('close');
                    };
                    var error = function (r) {
                        if (r && r.errors) {
                            var errors = r.errors,
                                rendered_errors = 0;

                            for (var name in errors) {
                                var $field = d.find('input[name=' + name + ']');
                                if ($field.length) {
                                    $field.addClass('error');
                                    rendered_errors += 1;

                                    var $wrapper = $field.parent().find('.errormsg');
                                    if ($wrapper.length) {
                                        $wrapper.text(errors[name]);
                                    }

                                    $field.one("keyup", function () {
                                        rendered_errors -= 1;
                                        showSubmit();

                                        $field.removeClass('error');
                                        if ($wrapper.length) {
                                            $wrapper.text("");
                                        }
                                    });
                                }
                            }

                            function showSubmit() {
                                if (!rendered_errors) {
                                    var $submit = form.find("[type='submit']");
                                    $submit.removeAttr("disabled", false);
                                }
                            }

                            return false;
                        }
                    };

                    if (form.find('input:file').length) {
                        $.products._iframePost(form, success, error);
                    } else {
                        $.shop.jsonPost(form.attr('action'), form.serialize(), success, error);
                        return false;
                    }
                },
                onClose: function () {
                    $wrapperDialog.find('.js-datepicker').each(function () {
                        $(this).datepicker('widget').hide();
                    });
                }
            });
        };


        var $p;
        if (!$wrapperDialog.length) {
            $p = $('<div class="s-products-set-dialog-wrapper"></div>').appendTo('body');
        } else {
            $p = $wrapperDialog.closest('.s-products-set-dialog-wrapper').empty();
        }

        if (status === 'new') {
            $p.load('?module=set&action=Create', showDialog);
        } else if (status === 'edit') {
            $p.load('?module=set&action=Edit&set_id=' + set_id, showDialog);
        }
    };
    return shopDialogProductsSet;

})(jQuery);
;
var shopDialogProductsCategory = (function ($) {

    shopDialogProductsCategory = function (options) {
        var that = this;

        // DOM
        that.$wrapper = options['$wrapper'];

        // VARS
        that.SEARCH_STEP = options['SEARCH_STEP'];
        that.category_id = options['category_id'];
        that.category_type = options['category_type'];
        that.account_name = options['account_name'];
        that.filter_count = options['filter_count'];

        that.filter_ignore_id = [];
        that.ignore_id = [];

        // TEMPLATES
        that.filter_element_html = options['templates']['filter_element_html'];

        // TEXT
        that.show_more_filters_text = options['texts']['show_more_filters_text'];

        // INIT
        that.initClass();
    };

    shopDialogProductsCategory.prototype.initClass = function () {
        var that = this;
        that.initAutocomplete();
        that.initEvent();
        that.initFilter();
        that.initMetaTagEdit();
        that.initFrontendUrlEdit();
        that.initCategoryVisibility();
        that.initSocialMetaTag();
        that.initShowMoreFilters();
        that.initFilterIgnoreId();
        that.updateShowFilterButton();
        that.initFilterAutocomplete();

        var $range = that.$wrapper.find('*[data-slider="range"]');
        if ($range.length) {
            $range.each(function () {
                that.initRangeSlider('.js-feature-slider-' + $(this).data('code'));
            });
        }
    };

    shopDialogProductsCategory.prototype.initEvent = function () {
        var that = this;

        that.initDynamicSettingsEvent();
        that.disableManualSorting();
        that.initShowMore();
        that.initShowAllFeatureValue();
        that.initGetFeatures();
    };


    shopDialogProductsCategory.prototype.initShowMoreFilters = function () {
        var that = this,
            url = '?module=categoryGetFeatures';

        that.$wrapper.on('click', '.js-show-more-filters', function (e) {
            e.preventDefault();
            var data = {
                category: that.category_id,
                offset: that.getFilterOffset(),
                ignore_id: that.filter_ignore_id,
                category_type: that.category_type,
            };

            $.post(url, data).success(function (response) {
                if (!response || !response.data.features) {
                    return false;
                }
                var features = response.data.features;
                $.each(features, function (i, filter) {
                    that.setFilterElement(filter)
                });

                that.updateShowFilterButton();
            });
        })
    };

    shopDialogProductsCategory.prototype.updateShowFilterButton = function () {
        var that = this,
            left = that.SEARCH_STEP,
            show_link = that.$wrapper.find('.js-show-more-filters'),
            filters = that.$wrapper.find('.js-category-filters .js-filter-checkbox').length,
            text = that.show_more_filters_text;


        filters -= 1;
        filters -= that.filter_ignore_id.length;
        if (filters + that.SEARCH_STEP > that.filter_count) {
            left = that.filter_count - filters;
        }

        if (left >= 1) {
            var total_left = that.filter_count - filters;

            text = text.replace(/%d/g, left);
            text = text.replace(/%all/g, total_left);
            show_link.text(text);
        } else {
            show_link.hide();
        }
    };

    shopDialogProductsCategory.prototype.setFilterElement = function (filter, checked) {
        var that = this,
            template = that.filter_element_html,
            category_filters = that.$wrapper.find('.js-category-filters');

        checked = (checked ? checked : false);

        template = template.replace(/%id/g, filter.id);
        template = template.replace(/%name/g, filter.name);
        template = template.replace(/%code/g, filter.code);
        template = template.replace(/%type_name/g, filter.type_name);

        category_filters.append(template);

        if (checked) {
            that.$wrapper.find('.js-category-filter input[data-filter-id="' + filter.id + '"]').prop("checked", true);
        }
    };

    shopDialogProductsCategory.prototype.getFilterOffset = function () {
        var that = this,
            offset = that.$wrapper.find('.js-category-filters .js-filter-checkbox').length;

        // удаляем price
        offset -= 1;

        // Удаляем сохраненные фильтры и добавленные через автокомплит
        offset -= that.filter_ignore_id.length;

        if (offset < 0) {
            offset = 0;
        }

        return offset;
    };

    shopDialogProductsCategory.prototype.initFilterIgnoreId = function () {
        var that = this,
            result = [],
            filters = that.$wrapper.find('.js-category-filters .js-filter-checkbox:checked');

        filters.each(function () {
            var val = $(this).val();
            if (val !== 'price') {
                result.push(val);
            }
        });

        that.filter_ignore_id = result;
    };

    shopDialogProductsCategory.prototype.initFilterAutocomplete = function () {
        var that = this,
            $input = that.$wrapper.find('.js-filter-autocomplete'),
            url = "?action=autocomplete&type=filter";

        $input.autocomplete({
            source: function (request, response) {
                var data = {
                    term: request.term,
                    category_id: that.category_id,
                    options: {
                        ignore_id: that.filter_ignore_id,
                        category_type: that.category_type,
                    }
                };
                $.post(url, data, function (data) {
                    response(data);
                }, 'json');
            },
            minLength: 1,
            delay: 300,
            create: function () {
                //move autocomplete container
                $input.autocomplete("widget").appendTo(".js-filter-autocomplete-block")
            },
            select: function (event, ui) {
                event.preventDefault();
                that.setFilterElement(ui.item, true);
                that.filter_ignore_id.push(parseInt(ui.item.id));
                $(this).val("");
                return false;
            },
            focus: function () {
                return false;
            }
        });
    };

    shopDialogProductsCategory.prototype.initAutocomplete = function () {
        var that = this,
            $input = that.$wrapper.find('.js-autocomplete'),
            ignore_id = [];

        if ($input.length) {
            // Init autocomplete
            $input.autocomplete({
                source: function (request, response) {
                    // add the used features to ignore
                    that.$wrapper.find('.js-condition-feature').each(function () {
                        var f_id = $(this).data('feature_id');
                        if ($.isNumeric(f_id)) {
                            if ($.inArray(f_id, ignore_id) == -1) {
                                ignore_id.push(f_id);
                            }
                        }
                    });

                    $.ajax({
                        type: "POST",
                        url: "?action=autocomplete&type=feature",
                        data: {
                            term: request.term,
                            options: {
                                ignore_id: ignore_id,
                                count: 1
                            }
                        },
                        success: function (data) {
                            var error_field = that.$wrapper.find('.js-autocomplete-wrapper .errormsg');

                            response(data);
                            if (data.length === 0) {
                                // Do logic for empty result.
                                error_field.html('').html($_('Matching features were not found or are already selected.'));
                            } else {
                                error_field.html('');
                            }
                        },
                        dataType: 'json'
                    });
                },
                minLength: 1,
                delay: 300,
                create: function () {
                    //move autocomplete container
                    $input.autocomplete("widget").appendTo(".js-autocomplete-block")
                },
                select: function (event, ui) {
                    that.renderFeature(ui.item.id);
                    //add feature.id to ignore array
                    that.ignore_id.push(parseInt(ui.item.id));
                    return false;
                },
                focus: function () {
                    return false;
                }
            });

        }
    };
    shopDialogProductsCategory.prototype.initRangeSlider = function (wrapper) {
        var begin = $(wrapper).find('.js-begin'),
            end = $(wrapper).find('.js-end'),
            begin_value = parseFloat(begin.attr('placeholder')),
            end_value = parseFloat(end.attr('placeholder')),
            step = 1,
            $slider = $(wrapper).find('.js-range-slider');

        if ($slider.data('step')) {
            step = parseFloat($slider.data('step'));
        } else {
            var diff = end_value - begin_value;
            if (Math.round(begin_value) != begin_value || Math.round(end_value) != end_value) {
                step = diff / 10;
                var tmp = 0;
                while (step < 1) {
                    step *= 10;
                    tmp += 1;
                }
                step = Math.pow(10, -tmp);
                tmp = Math.round(100000 * Math.abs(Math.round(begin_value) - begin_value)) / 100000;
                if (tmp && tmp < step) {
                    step = tmp;
                }
                tmp = Math.round(100000 * Math.abs(Math.round(end_value) - end_value)) / 100000;
                if (tmp && tmp < step) {
                    step = tmp;
                }
            }
        }

        var base_slider_value = 100,
            min_val = parseFloat(begin.val() ? begin.val() : 0),
            max_val = parseFloat(end.val() ? end.val() : (begin.val() > base_slider_value ? parseFloat(begin.val()) + base_slider_value : base_slider_value));

        $slider.slider({
            range: true,
            min: min_val - 3,
            max: max_val + 5,
            step: step,
            values: [min_val, max_val],
            slide: function (event, ui) {
                var s_min_option = $(this).slider('option', 'min'),
                    s_max_option = $(this).slider('option', 'max');

                //$(ui.handle).index() The numeric index of the handle being moved.

                if ($(ui.handle).index() != 2) {
                    if (ui.values[0] == s_min_option) {
                        $(this).slider("option", "min", s_min_option - step);
                    }
                    begin.val(ui.values[0]);
                }

                if ($(ui.handle).index() != 1) {
                    if (ui.values[1] == s_max_option) {
                        $(this).slider("option", "max", s_max_option + step);
                    }
                    end.val(ui.values[1]);
                }
            },
            stop: function (event, ui) {
                end.change();
            }
        });

        begin.add(end).change(function () {
            var v_min = begin.val() === '' ? $slider.slider('option', 'min') : parseFloat(begin.val());
            var v_max = end.val() === '' ? $slider.slider('option', 'max') : parseFloat(end.val());
            if (v_max >= v_min) {
                $slider.slider('option', 'values', [v_min, v_max]);
                // set min max options slider
                $slider.slider('option', 'max', parseFloat(v_max) + 5);
                $slider.slider('option', 'min', parseFloat(v_min) - 3);
            }
        });

    };

    /*
     * Function render feature field or feature value
     * @param feature info as in db
     * @param feature_block jquery-container where to put DOM
     * @param template jquery-template to use in rendering
     * @param checked selected feature (use in autocomplete)
     * @param show_all shows all features values ​​(use in editing dynamic category)
     */
    shopDialogProductsCategory.prototype.initShowFeatures = function (feature, feature_block, template, checked, show_all) {
        var that = this,
            f_type = feature.type.substr(0, 5);


        if (f_type == 'range') {
            var range_values_min = [],
                range_values_max = [];

            // find the min and max value for the range values
            for (var key in feature.values) {
                if (feature.values.hasOwnProperty(key)) {
                    range_values_min.push(parseInt(feature.values[key].begin));
                    range_values_max.push(parseInt(feature.values[key].end));
                }
            }

            // clear feature.values and set begin&end values
            feature.values = {};
            feature.values[0] = {
                "begin": Math.min.apply(Math, range_values_min) ? Math.min.apply(Math, range_values_min) : "",
                "end": Math.max.apply(Math, range_values_max) ? Math.max.apply(Math, range_values_max) : ""
            }

        }

        //render field template
        feature_block.append(
            tmpl(template, {
                feature: feature,
                default_checked: checked,
                show_all: show_all
            })
        );

        //render slider
        if (f_type === 'range') {
            that.initRangeSlider('.js-feature-slider-' + feature.code);
        }

    };

    shopDialogProductsCategory.prototype.initGetFeatures = function () {
        var that = this,
            $wrapper = this.$wrapper;

        $wrapper.on('change', '.js-condition-feature', function () {
            var $feature_block = $(this).closest('tr').find('.js-condition-feature-block');

            if (this.checked) {
                var feature_id = $(this).data('feature_id'),
                    action_url = "?module=category&action=getFeatures&feature_id=" + feature_id,
                    loading = $(this).attr('data-loading');

                if (that.category_id === 'new') {
                    if (!loading) {
                        var this_elem = this;

                        //show loading
                        $(this_elem).closest('.js-condition-feature-names').append('<i class="icon16 loading"></i>');

                        $.get(action_url, function (r) {
                            if (r.status === "ok") {
                                if (r.data.features) {
                                    var feature = r.data.features[feature_id];
                                    that.initShowFeatures(feature, $feature_block, 'template_feature_field_values', true, false)
                                }
                                $(this_elem).attr('data-loading', 'ok');
                                //remove loading
                                $(this_elem).closest('.js-condition-feature-names').find('i.loading').remove();
                            }
                        });
                    }
                }

                $feature_block.show();
                //enabled all input elements in feature block
                $feature_block.find(':input').each(function () {
                    $(this).attr('disabled', false)
                });

            } else {
                $feature_block.hide();
                //disabled all input elements in feature block
                $feature_block.find(':input').each(function () {
                    $(this).attr('disabled', true)
                });
            }
        });
    };

    shopDialogProductsCategory.prototype.renderFeature = function (item_id) {
        var that = this,
            $wrapper = that.$wrapper,
            checked = true,
            offset_count = $wrapper.find('.js-show-more').attr('data-offset'),
            data = "feature_id=" + item_id,
            type = "GET";

        if (!item_id) {
            checked = false;
            data = {
                ignore_id: that.ignore_id,
                category: that.category_id,
                category_type: that.category_type,
                offset: offset_count
            };
            type = "POST";
        }

        $.ajax({
            type: type,
            url: "?module=categoryGetFeatures",
            data: data,
            dataType: "json",
            success: function (r) {
                // remove loading
                $wrapper.find('.js-show-more').find('i.loading').remove();
                if (r.status === "ok") {
                    var $before = $wrapper.find(".js-condition-list .js-feature-insertion-block"),
                        feature_count = $wrapper.find('.js-show-more').attr('data-count'),
                        count = 0;

                    for (var id in r.data.features) {
                        if (r.data.features.hasOwnProperty(id)) {
                            var feature = r.data.features[id];
                            that.initShowFeatures(feature, $before, 'template_feature_field', checked, false);
                            ++count;
                        }
                    }
                    // Update feature_count and show-more text
                    var count_item = feature_count - count;

                    if (count_item > 0) {
                        var show_more_text = '<b><i>' + (count_item > 20 ? $_("Show %d more").replace('%d', 20) + ' ' + $_("From").toLowerCase() + ' ' + count_item : $_("Show %d more").replace('%d', count_item)) + '</i></b>';
                        $wrapper.find('.js-show-more').html(show_more_text).attr('data-count', count_item);
                        if (!item_id) {
                            offset_count = parseInt(offset_count) + parseInt(count);
                            $wrapper.find('.js-show-more').attr('data-offset', offset_count);
                        }
                    } else {
                        $wrapper.find('.js-autocomplete-wrapper').hide();
                    }
                } else if (r.status === "fail") {
                    console.log(r.errors);
                }
            }
        });
    };

    shopDialogProductsCategory.prototype.initShowAllFeatureValue = function () {
        var that = this,
            $wrapper = that.$wrapper;

        $wrapper.on("click", ".js-show-all-feature", function () {
            var show_all = this,
                feature_id = $(this).data('feature_id');


            $(this).html('<i class="icon16 loading"></i>');

            if (typeof feature_id == "undefined") {
                $(this).parent().find('.js-feature-hidden').show();
                $(this).hide();
            } else {
                var action_url = "?module=category&action=getFeatures&feature_id=" + feature_id,
                    $feature_block = $(this).parent();

                //get all feature values only save feature
                $.get(action_url, function (r) {
                    if (r.status === "ok") {
                        if (r.data.features) {
                            var feature = r.data.features[feature_id];

                            //find the feature that are already displayed
                            $feature_block.find('.js-feature-value').each(function () {
                                var f_used_val = parseInt($(this).data('f_val'));

                                for (var key in feature.values) {
                                    if (feature.values.hasOwnProperty(key)) {
                                        if (key == f_used_val) {
                                            delete feature.values[key];
                                        }
                                    }
                                }
                            });
                            that.initShowFeatures(feature, $feature_block, 'template_feature_field_values', true, true);
                            $(show_all).html('');
                        }
                    }
                });
            }
        });
    };

    shopDialogProductsCategory.prototype.initShowMore = function () {
        var that = this,
            $wrapper = that.$wrapper,
            count_item = $wrapper.find('.js-show-more').attr('data-count');

        // add the used features to ignore & update Show more count
        if (!that.ignore_id.length) {
            that.$wrapper.find('.js-condition-feature').each(function () {
                if ($.isNumeric($(this).data('feature_id'))) {
                    that.ignore_id.push($(this).data('feature_id'));
                }
            });
        }

        count_item = count_item - that.ignore_id.length;

        if (count_item <= 0) {
            $wrapper.find('.js-autocomplete-wrapper').hide();
        } else {
            var show_more_text = '<b><i>' + (count_item > 20 ? $_("Show %d more").replace('%d', 20) + ' ' + $_("From").toLowerCase() + ' ' + count_item : $_("Show %d more").replace('%d', count_item)) + '</i></b>';
            $wrapper.find('.js-show-more').html(show_more_text).attr('data-count', count_item);
        }


        $wrapper.find('.js-show-more').click(function () {
            $(this).html('<i class="icon16 loading"></i>');
            that.renderFeature();
        });
    };

    shopDialogProductsCategory.prototype.disableManualSorting = function () {
        var that = this,
            $wrapper = that.$wrapper;

        // disable manual sort is show subcategory products
        $wrapper.find('.js-subcategory-toggle').change(function () {
            var self = this;
            if (self.checked) {
                $wrapper.find('.js-sort-type option[value=""]').attr('disabled', true).next().attr('selected', 'selected');
            } else {
                $wrapper.find('.js-sort-type option[value=""]').attr('disabled', false);
            }
        });
    };

    shopDialogProductsCategory.prototype.initDynamicSettingsEvent = function () {
        var that = this,
            $wrapper = that.$wrapper;

        $wrapper.find('input[name=type]').on('click', function () {
            if ($(this).val() == '0') {
                $wrapper.find('.js-category-dynamic-settings').hide();
                //disabled all input elements in hide block
                $wrapper.find('.js-category-dynamic-settings').find(':input').each(function () {
                    $(this).attr('disabled', true)
                });
            } else {
                $wrapper.find('.js-category-dynamic-settings').show();
                //enabled all input elements in show block
                $wrapper.find('.js-category-dynamic-settings').find(':input').each(function () {
                    if (!$(this).hasClass('js-always-disabled')) {
                        $(this).attr('disabled', false);
                    }
                });
            }
        });

        //initialization rating widget
        $wrapper.find('.js-category-rate').rateWidget({
            withClearAction: false,
            onUpdate: function (rate) {
                $wrapper.find('.js-c-category-rate-value').val(rate);
            }
        });

        // check corresponding checkbox when change control
        $wrapper.find('select[name^=rating]').change(function () {
            $wrapper.find('.js-condition-rate').attr('checked', true);
        });
        $wrapper.find('.js-category-rate').click(function () {
            $wrapper.find('.js-condition-rate').attr('checked', true);
        });
        $wrapper.find('select[name^=count]').change(function () {
            $wrapper.find('.js-condition-count').attr('checked', true);
        });
        $wrapper.find('.js-category-count-value').click(function () {
            $wrapper.find('.js-condition-count').attr('checked', true);
        });
        $wrapper.on('change', 'input[name^=tag]', function () {
            $wrapper.find('.js-condition-tag').attr('checked', true);
        });
        $wrapper.on('keyup', 'input[name^=price]', function () {
            $wrapper.find('.js-condition-price-interval').attr('checked', true);
        });
        $wrapper.on('change', '.js-feature-value', function () {
            if (this.checked) {
                $(this).closest('tr').find('.js-condition-feature').attr('checked', true);
            }

            // Disabled/Enabled filtering parameters case( that more 2 options are selected)
            var feature_id = $(this).closest('tr').find('.js-condition-feature').attr('data-feature_id'),
                count = parseInt($(this).closest('.js-condition-feature-block').find('input:checkbox:checked').length),
                filter_element = $wrapper.find('.js-category-filter input[data-filter-id="' + feature_id + '"]');

            if (filter_element.length) {
                if (count >= 2) {
                    if (filter_element.is(':disabled')) {
                        filter_element.attr('disabled', false);
                    }
                } else {
                    filter_element.attr('disabled', true);
                }
            }
        });
    };

    shopDialogProductsCategory.prototype.initFrontendUrlEdit = function () {
        var that = this,
            frontend_url = $('#s-settings-frontend-url');

        frontend_url.inlineEditable({
            editLink: '.js-settings-frontend-url-edit-link',
            editOnItself: false,
            minSize: {
                width: 100
            },
            makeReadableBy: [],
            beforeMakeEditable: function (input) {
                var self = $(this);
                var parent_div = self.parents('div:first');
                var slash = parent_div.find('span.slash');
                $(input).after(slash);

                parent_div.find('span.s-frontend-base-url').html(parent_div.find('a.s-frontend-base-url').hide().contents()).show();
            },
            beforeBackReadable: function (input, data) {
                var self = $(this);
                var parent_div = self.parents('div:first');
                var slash = parent_div.find('span.slash');
                self.after(slash);

                parent_div.find('a.s-frontend-base-url').html(parent_div.find('span.s-frontend-base-url').hide().contents()).show();
            }
        });

        //CREATE CATEGORY EDIT

        var product_list_name = that.$wrapper.find(".js-product-list-name");
        var product_list_url = that.$wrapper.find(".js-product-list-url");

        var state = {name: '', url: '', timer_id: null};
        product_list_name.unbind('.create_product_list').bind('change.create_product_list, keyup.create_product_list', function () {
            if (state.time_id) {
                clearTimeout(state.time_id);
            }

            if (product_list_url.val() !== state.url) {
                product_list_name.unbind('.create_product_list');
                return;
            }

            var name = product_list_name.val();
            if (name !== state.name) {
                state.time_id = setTimeout(function () {
                    $.getJSON('?action=transliterate', {str: name}, function (r) {
                        if (r.status === 'ok') {
                            product_list_url.val(r.data);
                            state = {name: name, url: r.data, time_id: null}
                        } else if (console) {
                            if (r.errors) {
                                console.error(r.errors);
                            } else if (r) {
                                console.error(r);
                            }
                        }
                    });
                }, 300);
            }
        });

    };

    shopDialogProductsCategory.prototype.initMetaTagEdit = function () {
        var that = this,
            $wrapper = that.$wrapper,
            account_name = that.account_name;

        // change meta title input placeholder automaticly on changing name of category
        (function () {
            var title_input = $('input[name=meta_title]', $wrapper);
            $.shop.changeListener($('input[name=name]', $wrapper), function (name_input) {
                title_input.attr('placeholder', name_input.val());
            });
        })();

        // change meta keywords input placeholder automaticly on changing name of category
        (function () {
            var keywords_input = $('[name=meta_keywords]', $wrapper);
            $.shop.changeListener($('input[name=name]', $wrapper), function (name_input) {
                keywords_input.attr('placeholder', [account_name, name_input.val()].join(', '));
            });
        })();

        $.shop.makeFlexibleInput('s-meta-title');
    };

    shopDialogProductsCategory.prototype.initSocialMetaTag = function () {
        var that = this,
            $checkbox = that.$wrapper.find('.js-category-social-metatag'),
            $fieldgroup = $checkbox.closest('.field-group'),
            $disablers = $fieldgroup.find('.editable-og-disabler');

        $checkbox.closest('.field').appendTo($fieldgroup.closest('form').find('[name="meta_title"]').closest('.field-group'));
        $checkbox.prop('checked') || $fieldgroup.show();

        $checkbox.change(function () {
            if ($checkbox.prop('checked')) {
                $fieldgroup.slideUp(200);
                $disablers.prop('disabled', false);
            } else {
                $fieldgroup.slideDown(200);
                $disablers.prop('disabled', true);
            }
        });
    };

    shopDialogProductsCategory.prototype.initFilter = function () {
        var that = this,
            $wrapper = that.$wrapper,
            $category_filter = $wrapper.find('.js-category-filter');

        // EVENTS

        $wrapper.on("click", ".js-category-allow-filter", function () {
            if (this.checked) {
                //enabled all input elements in filter category
                $category_filter.find(':input').each(function () {
                    if (!$(this).data('disabled')) {
                        $(this).attr('disabled', false)
                    }
                });
                $category_filter.show();
            } else {
                //disabled all input elements in filter category
                $category_filter.find(':input').each(function () {
                    $(this).attr('disabled', true)
                });
                $category_filter.hide();
            }
        });

        $category_filter.sortable({
            distance: 5,
            opacity: 0.75,
            items: 'li:not(.unsortable)',
            handle: '.sort',
            cursor: 'move',
            tolerance: 'pointer'
        });

        // enabled/disabled filter item
        $wrapper.on("change", ".js-filter-checkbox", function () {
            showSortHandles();
        });

        // INIT
        showSortHandles();

        function showSortHandles() {
            var $active_filters = $wrapper.find(".js-filter-item .js-filter-checkbox:checked"),
                force_hide = !($active_filters.length > 1);

            $wrapper.find('.js-filter-item').each(function () {
                var $filter = $(this);
                sortToggle($filter, force_hide);
            });

            $category_filter.sortable("refresh");

            //

            function sortToggle($filter, force_hide) {
                // DOM
                var $field = $filter.find(".js-filter-checkbox"),
                    $icon = $filter.find('i.sort');

                // CONST
                var sort_class = "unsortable";
                var is_checked = (!force_hide && $field.is(":checked"));

                if (is_checked) {
                    if ($filter.hasClass(sort_class)) {
                        $filter.removeClass(sort_class);
                        $icon.show();
                    }
                } else {
                    if (!$filter.hasClass(sort_class)) {
                        $filter.addClass(sort_class);
                        $icon.hide();
                    }
                }
            }
        }
    };

    shopDialogProductsCategory.prototype.initCategoryVisibility = function () {
        var that = this,
            block = that.$wrapper.find('.js-product-category-visibility-block');

        $('input[name=storefront]', block).change(function () {
            if (this.value == 'route') {
                $('input[name="routes[]"]', block).attr('disabled', false);
            } else {
                $('input[name="routes[]"]', block).attr('disabled', true);
            }
        });
    };

    shopDialogProductsCategory.staticDialog = function (category_id, parent_id, status) {
        var showDialog = function () {

            $('#s-product-category-dialog').waDialog({
                esc: false,
                disableButtonsOnSubmit: false,
                onLoad: function () {
                    if ($('#s-category-description-content').length) {
                        $.product_sidebar.initCategoryDescriptionWysiwyg($(this));
                    }
                    setTimeout(function () {
                        $('.js-product-list-name').focus();
                    }, 150);
                },
                onSubmit: function (d) {
                    var form = $(this);

                    var errors = validateFeatureValues();
                    if (errors) {
                        return false;
                    }

                    function validateFeatureValues() {
                        var errors = false,
                            $fields = form.find('.js-condition-feature:checked, .js-condition-tag:checked');

                        $fields.each(function () {
                            var $feature_block = $(this).closest('tr').find('.js-condition-feature-block, .js-condition-tag-block'),
                                feature_checkbox = $feature_block.find('.js-feature-value:checkbox, .js-tag-value:checkbox');

                            if (feature_checkbox.length && !feature_checkbox.is(':checked')) {
                                errors = true;
                                $feature_block.find('.errormsg').html('').html($_('Nothing selected'));
                                form.find('.js-category-error').html('').html($_('Nothing selected'));
                            }

                        });
                        setTimeout(function () {
                            form.find(".errormsg").html('');
                        }, 5000);

                        return errors;
                    }

                    var success = function (r) {
                        var hash = null;

                        if (location.hash.indexOf('category_id') > 0) {
                            hash = location.hash.replace('category_id=' + category_id, 'category_id=' + r.data.id);
                            //reset sort
                            if (('sort_products' in r.data) || ('rule' in r.data)) {
                                hash = hash.replace(/&sort=[^&]*/, '&sort=');
                                hash = hash.replace(/&order=[^&]*/, '&order=');
                            }
                        } else {
                            hash = '#/products/category_id=' + r.data.id;
                        }

                        if (status === 'new') {
                            $.product_sidebar.createNewElementInList(r.data, 'category');
                        }

                        $.product_sidebar.updateItemInCategoryList(r, hash);

                        if (location.hash != hash) {
                            location.hash = hash;
                        } else {
                            $.products.dispatch();
                        }

                        d.trigger('close');
                    };

                    var error = function (r) {
                        if (r && r.errors) {
                            var errors = r.errors;
                            for (var name in errors) {
                                d.find('input[name=' + name + ']').addClass('error').parent().find('.errormsg').text(errors[name]);
                            }
                            return false;
                        }
                    };

                    if ($('#s-category-description-content').length) {
                        $('#s-category-description-content').waEditor('sync');
                    }

                    if (form.find('input:file').length) {
                        $.products._iframePost(form, success, error);
                    } else {
                        $.shop.jsonPost(form.attr('action'), form.serialize(), success, error);
                        return false;
                    }
                }
            });
        };

        var d = $('#s-product-category-dialog');
        var p;
        if (!d.length) {
            p = $('<div></div>').appendTo('body');
        } else {
            p = d.parent();
        }

        if (status === 'new') {
            p.load('?module=category&action=Create&parent_id=' + parent_id, showDialog);
        }

        if (status === 'edit') {
            p.load('?module=category&action=Edit&category_id=' + category_id, showDialog);
        }
    };

    return shopDialogProductsCategory;

})(jQuery);
;
/*
 * jQuery UI Slider 1.8.2
 *
 * Copyright (c) 2010 AUTHORS.txt (http://jqueryui.com/about)
 * Dual licensed under the MIT (MIT-LICENSE.txt)
 * and GPL (GPL-LICENSE.txt) licenses.
 *
 * http://docs.jquery.com/UI/Slider
 *
 * Depends:
 *	jquery.ui.core.js
 *	jquery.ui.mouse.js
 *	jquery.ui.widget.js
 */
(function(d){d.widget("ui.slider",d.ui.mouse,{widgetEventPrefix:"slide",options:{animate:false,distance:0,max:100,min:0,orientation:"horizontal",range:false,step:1,value:0,values:null},_create:function(){var a=this,b=this.options;this._mouseSliding=this._keySliding=false;this._animateOff=true;this._handleIndex=null;this._detectOrientation();this._mouseInit();this.element.addClass("ui-slider ui-slider-"+this.orientation+" ui-widget ui-widget-content ui-corner-all");b.disabled&&this.element.addClass("ui-slider-disabled ui-disabled");
this.range=d([]);if(b.range){if(b.range===true){this.range=d("<div></div>");if(!b.values)b.values=[this._valueMin(),this._valueMin()];if(b.values.length&&b.values.length!==2)b.values=[b.values[0],b.values[0]]}else this.range=d("<div></div>");this.range.appendTo(this.element).addClass("ui-slider-range");if(b.range==="min"||b.range==="max")this.range.addClass("ui-slider-range-"+b.range);this.range.addClass("ui-widget-header")}d(".ui-slider-handle",this.element).length===0&&d("<a href='#'></a>").appendTo(this.element).addClass("ui-slider-handle");
if(b.values&&b.values.length)for(;d(".ui-slider-handle",this.element).length<b.values.length;)d("<a href='#'></a>").appendTo(this.element).addClass("ui-slider-handle");this.handles=d(".ui-slider-handle",this.element).addClass("ui-state-default ui-corner-all");this.handle=this.handles.eq(0);this.handles.add(this.range).filter("a").click(function(c){c.preventDefault()}).hover(function(){b.disabled||d(this).addClass("ui-state-hover")},function(){d(this).removeClass("ui-state-hover")}).focus(function(){if(b.disabled)d(this).blur();
else{d(".ui-slider .ui-state-focus").removeClass("ui-state-focus");d(this).addClass("ui-state-focus")}}).blur(function(){d(this).removeClass("ui-state-focus")});this.handles.each(function(c){d(this).data("index.ui-slider-handle",c)});this.handles.keydown(function(c){var e=true,f=d(this).data("index.ui-slider-handle"),g,h,i;if(!a.options.disabled){switch(c.keyCode){case d.ui.keyCode.HOME:case d.ui.keyCode.END:case d.ui.keyCode.PAGE_UP:case d.ui.keyCode.PAGE_DOWN:case d.ui.keyCode.UP:case d.ui.keyCode.RIGHT:case d.ui.keyCode.DOWN:case d.ui.keyCode.LEFT:e=
false;if(!a._keySliding){a._keySliding=true;d(this).addClass("ui-state-active");g=a._start(c,f);if(g===false)return}break}i=a.options.step;g=a.options.values&&a.options.values.length?(h=a.values(f)):(h=a.value());switch(c.keyCode){case d.ui.keyCode.HOME:h=a._valueMin();break;case d.ui.keyCode.END:h=a._valueMax();break;case d.ui.keyCode.PAGE_UP:h=a._trimAlignValue(g+(a._valueMax()-a._valueMin())/5);break;case d.ui.keyCode.PAGE_DOWN:h=a._trimAlignValue(g-(a._valueMax()-a._valueMin())/5);break;case d.ui.keyCode.UP:case d.ui.keyCode.RIGHT:if(g===
a._valueMax())return;h=a._trimAlignValue(g+i);break;case d.ui.keyCode.DOWN:case d.ui.keyCode.LEFT:if(g===a._valueMin())return;h=a._trimAlignValue(g-i);break}a._slide(c,f,h);return e}}).keyup(function(c){var e=d(this).data("index.ui-slider-handle");if(a._keySliding){a._keySliding=false;a._stop(c,e);a._change(c,e);d(this).removeClass("ui-state-active")}});this._refreshValue();this._animateOff=false},destroy:function(){this.handles.remove();this.range.remove();this.element.removeClass("ui-slider ui-slider-horizontal ui-slider-vertical ui-slider-disabled ui-widget ui-widget-content ui-corner-all").removeData("slider").unbind(".slider");
this._mouseDestroy();return this},_mouseCapture:function(a){var b=this.options,c,e,f,g,h,i;if(b.disabled)return false;this.elementSize={width:this.element.outerWidth(),height:this.element.outerHeight()};this.elementOffset=this.element.offset();c={x:a.pageX,y:a.pageY};e=this._normValueFromMouse(c);f=this._valueMax()-this._valueMin()+1;h=this;this.handles.each(function(j){var k=Math.abs(e-h.values(j));if(f>k){f=k;g=d(this);i=j}});if(b.range===true&&this.values(1)===b.min){i+=1;g=d(this.handles[i])}if(this._start(a,
i)===false)return false;this._mouseSliding=true;h._handleIndex=i;g.addClass("ui-state-active").focus();b=g.offset();this._clickOffset=!d(a.target).parents().andSelf().is(".ui-slider-handle")?{left:0,top:0}:{left:a.pageX-b.left-g.width()/2,top:a.pageY-b.top-g.height()/2-(parseInt(g.css("borderTopWidth"),10)||0)-(parseInt(g.css("borderBottomWidth"),10)||0)+(parseInt(g.css("marginTop"),10)||0)};e=this._normValueFromMouse(c);this._slide(a,i,e);return this._animateOff=true},_mouseStart:function(){return true},
_mouseDrag:function(a){var b=this._normValueFromMouse({x:a.pageX,y:a.pageY});this._slide(a,this._handleIndex,b);return false},_mouseStop:function(a){this.handles.removeClass("ui-state-active");this._mouseSliding=false;this._stop(a,this._handleIndex);this._change(a,this._handleIndex);this._clickOffset=this._handleIndex=null;return this._animateOff=false},_detectOrientation:function(){this.orientation=this.options.orientation==="vertical"?"vertical":"horizontal"},_normValueFromMouse:function(a){var b;
if(this.orientation==="horizontal"){b=this.elementSize.width;a=a.x-this.elementOffset.left-(this._clickOffset?this._clickOffset.left:0)}else{b=this.elementSize.height;a=a.y-this.elementOffset.top-(this._clickOffset?this._clickOffset.top:0)}b=a/b;if(b>1)b=1;if(b<0)b=0;if(this.orientation==="vertical")b=1-b;a=this._valueMax()-this._valueMin();return this._trimAlignValue(this._valueMin()+b*a)},_start:function(a,b){var c={handle:this.handles[b],value:this.value()};if(this.options.values&&this.options.values.length){c.value=
this.values(b);c.values=this.values()}return this._trigger("start",a,c)},_slide:function(a,b,c){var e;if(this.options.values&&this.options.values.length){e=this.values(b?0:1);if(this.options.values.length===2&&this.options.range===true&&(b===0&&c>e||b===1&&c<e))c=e;if(c!==this.values(b)){e=this.values();e[b]=c;a=this._trigger("slide",a,{handle:this.handles[b],value:c,values:e});this.values(b?0:1);a!==false&&this.values(b,c,true)}}else if(c!==this.value()){a=this._trigger("slide",a,{handle:this.handles[b],
value:c});a!==false&&this.value(c)}},_stop:function(a,b){var c={handle:this.handles[b],value:this.value()};if(this.options.values&&this.options.values.length){c.value=this.values(b);c.values=this.values()}this._trigger("stop",a,c)},_change:function(a,b){if(!this._keySliding&&!this._mouseSliding){var c={handle:this.handles[b],value:this.value()};if(this.options.values&&this.options.values.length){c.value=this.values(b);c.values=this.values()}this._trigger("change",a,c)}},value:function(a){if(arguments.length){this.options.value=
this._trimAlignValue(a);this._refreshValue();this._change(null,0)}return this._value()},values:function(a,b){var c,e,f;if(arguments.length>1){this.options.values[a]=this._trimAlignValue(b);this._refreshValue();this._change(null,a)}if(arguments.length)if(d.isArray(arguments[0])){c=this.options.values;e=arguments[0];for(f=0;f<c.length;f+=1){c[f]=this._trimAlignValue(e[f]);this._change(null,f)}this._refreshValue()}else return this.options.values&&this.options.values.length?this._values(a):this.value();
else return this._values()},_setOption:function(a,b){var c,e=0;if(d.isArray(this.options.values))e=this.options.values.length;d.Widget.prototype._setOption.apply(this,arguments);switch(a){case "disabled":if(b){this.handles.filter(".ui-state-focus").blur();this.handles.removeClass("ui-state-hover");this.handles.attr("disabled","disabled");this.element.addClass("ui-disabled")}else{this.handles.removeAttr("disabled");this.element.removeClass("ui-disabled")}break;case "orientation":this._detectOrientation();
this.element.removeClass("ui-slider-horizontal ui-slider-vertical").addClass("ui-slider-"+this.orientation);this._refreshValue();break;case "value":this._animateOff=true;this._refreshValue();this._change(null,0);this._animateOff=false;break;case "values":this._animateOff=true;this._refreshValue();for(c=0;c<e;c+=1)this._change(null,c);this._animateOff=false;break}},_value:function(){var a=this.options.value;return a=this._trimAlignValue(a)},_values:function(a){var b,c;if(arguments.length){b=this.options.values[a];
return b=this._trimAlignValue(b)}else{b=this.options.values.slice();for(c=0;c<b.length;c+=1)b[c]=this._trimAlignValue(b[c]);return b}},_trimAlignValue:function(a){if(a<this._valueMin())return this._valueMin();if(a>this._valueMax())return this._valueMax();var b=this.options.step>0?this.options.step:1,c=a%b;a=a-c;if(Math.abs(c)*2>=b)a+=c>0?b:-b;return parseFloat(a.toFixed(5))},_valueMin:function(){return this.options.min},_valueMax:function(){return this.options.max},_refreshValue:function(){var a=
this.options.range,b=this.options,c=this,e=!this._animateOff?b.animate:false,f,g={},h,i,j,k;if(this.options.values&&this.options.values.length)this.handles.each(function(l){f=(c.values(l)-c._valueMin())/(c._valueMax()-c._valueMin())*100;g[c.orientation==="horizontal"?"left":"bottom"]=f+"%";d(this).stop(1,1)[e?"animate":"css"](g,b.animate);if(c.options.range===true)if(c.orientation==="horizontal"){if(l===0)c.range.stop(1,1)[e?"animate":"css"]({left:f+"%"},b.animate);if(l===1)c.range[e?"animate":"css"]({width:f-
h+"%"},{queue:false,duration:b.animate})}else{if(l===0)c.range.stop(1,1)[e?"animate":"css"]({bottom:f+"%"},b.animate);if(l===1)c.range[e?"animate":"css"]({height:f-h+"%"},{queue:false,duration:b.animate})}h=f});else{i=this.value();j=this._valueMin();k=this._valueMax();f=k!==j?(i-j)/(k-j)*100:0;g[c.orientation==="horizontal"?"left":"bottom"]=f+"%";this.handle.stop(1,1)[e?"animate":"css"](g,b.animate);if(a==="min"&&this.orientation==="horizontal")this.range.stop(1,1)[e?"animate":"css"]({width:f+"%"},
b.animate);if(a==="max"&&this.orientation==="horizontal")this.range[e?"animate":"css"]({width:100-f+"%"},{queue:false,duration:b.animate});if(a==="min"&&this.orientation==="vertical")this.range.stop(1,1)[e?"animate":"css"]({height:f+"%"},b.animate);if(a==="max"&&this.orientation==="vertical")this.range[e?"animate":"css"]({height:100-f+"%"},{queue:false,duration:b.animate})}}});d.extend(d.ui.slider,{version:"1.8.2"})})(jQuery);
;
